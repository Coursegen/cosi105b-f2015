---
title: Dynamic Languages
desc: Getting deeper into Object Oriented design
homework: 1) Read POODR Chapter 5, Submit answers to warmup questions to Latte; 2) Submit "What is Duck Typing" post to Latte; 3) Teams complete nT 0.1 and submit.
---
<%= homework_hdr %>
1. Study \[POODR\] Chapter 5. <%= deliverable "Please complete the warmups in Latte"%>
2. Think about this question: What is Duck typing, and exactly how is it different from Java. Try to answer the question: what specific feature in Java do you not need anymore if you have Duck Typing. Use an example. <%= deliverable "Submit a response as a pdf. Explain your reasoning. It's a tricky question." %>
3. Complete nT functionality up to \[UNITTESTS\]. Work should be done in your <%= link_to_intro :portfolio %>.

#### Discussion
* Article Discussion
  * Read this [Twitter cuts Meercat from its social graph just as SXSW gets started](http://www.theverge.com/2015/3/13/8213255/twitter-cuts-meerkat-off-from-its-social-graph-just-as-sxsw-gets)
  * How did Twitter do that? What is the impact of that change? Why did Twitter do that? Do you agree with what they did?
  * 5 minutes: Read and think on your own about the answers to those questions
  * 5 minutes: disucss with your neighbor

#### POODR Example
* Look at and examine the sequence of examples from Chapter 5

* Static vs. Dynamic Typing
  * Java interfaces are like Classes without method bodies
  * You can only call a method on the right type
  * There is enough information in the text of the program
  * Compile can catch errors and compiled code can be optimized for performance

~~~~ java
interface Animal {

   public void eat();
   public void travel();
}
Animal myAnimal = new Dog();
myAnimal.eat();
~~~~

* Dynamic Typing
  * Objects determine at run time whether they implement a message (method)
  * Nothing in the syntax of the code limits what is possible at run time
  * Compilation and exection are more tightly connected
  * Opens up new and rich design options (Duck typing, meta programming)

<%= include_topic :four_rules_simple_design %>

#### Next Class
* Look at homework: <%= link_to_next_lecture %>
