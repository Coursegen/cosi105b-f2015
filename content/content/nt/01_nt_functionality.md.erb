---
title: nano Twitter Functionality
---

#### Functionality

* NanoTwitter (nT) is a baby version of Twitter designed as a platform for experimentation with scaling issues.
* Note that all the URLs, both for the User Interface and for the Web Services API will attempt to follow REST design principles as far as possible.

#### nT Functionality
* Users:
  * can register for an account by supplying an email a name and a password
  * are never deleted
* Logged in users
  * Can follow and unfollow other registered users
  * Can tweet
  * Can see the flow of the last n tweets by the users that they have followed
* Non-logged in users
  * See the flow of the last n tweets by any user
* Tweets
  * Consist of
    * a 140 characters of text
    * a date-time of creation
  * Belong to one user
  * Can never be deleted
* REST Api is provided
  * Retrieve the firehose of all tweets by all users
  * Retrieve the firehose for one specific user

#### nT Authentication
* First just fake authentication
  * Build in (through seed data and Faker) a series of fake users
  * Make it easy to rebuild the database with a set collection of users.
  * Add the following two urls
    * log in user :x (/login/:x)
    * log out current user (/logout)
* Later in the term, as time permits implement more real authentication.
  * Users can register for an account by supplying an email a name and a password
  * Users are never deleted
  * Add the following urls
    * Display the user registration page (/user/register)
    * Display user login prompt, and check for correct password (/login)
    * Logout (/logout)

#### nT User Interface
* Very basic bootstrappy html interface
* Non-logged-in root page (/)
  * List of the most recent 50 tweets from any user, with link to tweeter's page
* Logged-in root page (/)
  * Exactly the same as /user/1234 when user 1234 is logged in
* Specific user's page (/user/name or /user/1234)
  * If this is logged in users own page
    * Equiv to logged in root
    * ability to tweet (i.e. equiv to /)
    * Top 50 tweets of followed users
  * If this is not logged in users own page, but user is logged in
    * Button to follow that user (available only if logged in)
  * In all cases, also:
    * User's profile
    * Link to list of users followed
    * Link to list of tweets made by this user

#### nT Web Services API
* REST-y API
  * All paths start with /api/v1
  * /tweets/23 - return tweet with id
  * /users/23 - return user information for user 23
  * /tweets/recent - return the recent n tweets
  * /users/23/tweets - return the users recent tweets

* Values as JSON
  * Tweet:
`{  "id": 123,
    "text": foobar,
    "created": jan-11-2015
}`
  * User: `{"id": name": Pito Salas}`
  * List of tweets: `[<tweet>, <tweet>,...]`
  * Follow list: `["user_id": 22, "user_id": 23, ...]`

#### Test Interface
* /test/reset
  * if needed creates a new test user called "testuser"
  * if needed deletes all tweets that the "testuser" ever created
  * if needed deletes all follows of the "testuser"
* /test/seed/1234
  * create 1234 fake users
* /test/tweets/1234
  * user testuser genereates 1234 new fake tweets
* /test/follow/1234
  * 1234 randomly selected users follow user 1234
