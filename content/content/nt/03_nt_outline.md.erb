---
title: Nano Twitter Project Outline
---
#### Approximate Recipe

Each step in this recipe has a name which I use to refer to it elsehwee in this course.

##### Foundation (nT version 0.1)

* **\[DBSCHEMA\]** Design relational database schema (i.e. one for the whole app.) Decide what tables you will have, what the attributes (columns) are for each table, and what the associations are (i.e. one to many, many to one, many to many.)
* **\[HTMLUI\]** Design html, forms, and user interface. Start with a paper sketch for each page. Remember to note where there are links and buttons, and what the various text boxes are. You may use a tool like Balsamiq.com as well. No need to immitate the real twitter. Do whatever you want but make sure the User Interface functionality that is listed in <%= link_to_section :nt, :nt_functionality %> is covered.
* **\[ROUTES\]** Before coding up the sinatra app, sit down and design all urls that you will have to implement in the code. <%= link_to_section :nt, :nt_functionality %> gives you the outline, but here you need to describe all of them. Do this before you code.
* **\[SINATRAAPP\]** nanoTwitter version 0.1: Implement Sinatra front end application for ui. Use ActiveRecord and Sqlite3 for development (local) db. You will use the sketches from \[HTMLUI\] to implement .html.erb files that in a view directory to display the views. Later when you deploy to heroku you will enable Postgress for your production (heroku) db. You should have all the functionality working described as "nT User Interface" in <%= link_to_section :nt, :nt_functionality %>

##### Testing and Deployment (nT version 0.2)

* **\[TESTSUITE\]** Write complete set of unit tests with automation. Also include a few integration tests. You should have at least 5 tests!
* **\[SEEDDATA\]** Implement a large body of seed data with automation. For each table in your database you want to populate it with real looking data. You can use the faker gem to give you real looking data.
* **\[CODESHIP\]** Deploy to Codeship for automatic running of tests
* **\[HEROKU\]** Have Codeship deploy to Heroku. Make sure tests still run.
* **\[MANUALTEST\]** Once nT is up on heroku, try having all three team members log into it at the same time and do some tweeting.

##### Inital Load Testing (nT version 0.3)
  **Here are important instructions: <%= link_to_topic :nt_load_testing %>**

* **\[LOADTEST\]** Investigate and choose a way to load test your app. Use loader.io. Configure your app and heroky accordingly.
* **\[INSTRUMENT\]**Investigate and choose a way to instrument your test app. Use new relic. Configure your app and heroku accordingly.
* **\[RUNLOADEXPERIMENT\]**Design and run a series of load tests and write a report of your findings

##### Performance Tuning (nt version 0.4)

* **\[IMPROVESCHEMA\]**Update your schema to put indeces and other enhancements and see the effect on scaling
* **\[NEWWEB\]** Switch web server from WebBrick; try others, measure.
* **\[SWAPDATABASE\]**Try different databases (Mongo or others) and see the effect on scaling
* **\[SCALEEXPERIMENT\]**Design and execute scaling experiments and see the differences

##### Advanced Scaling (nt version 0.5)

* **\[REDIS\]** Investigate and figure out how to setup a Redis Caching service
* **\[CACHING\]**Consider where to add caching and do some more experiments to see how
* **\[UIBOOTSTRAP\]** Revise user interface to make it pretty, using Bootstrap
* **\[SCALEEXPERIMENT\]**Design and execute scaling experiments and see the differences

##### Web Service API and Client (nt version 0.6)

* **\[APIROUTES\]**Go back to the beginning Design external API urls. Implement them as further Sinatra routes.
* **\[CLIENTLIB\]**Write client libraries for your APIs.
* **\[CLIENTLIBTEST\]**Write a complete set of tests for them
