
var tipuesearch = { "pages": [

        {"title": "chalkmark", "text": "function handle_helpful_link(yesno) { $.ajax({ url:  http://chalkmark.herokuapp.com/api/helpful/vote/ , data: {url: document.title, value: yesno}, dataType:  jsonp , success: function(data) { display_visit_stats(data); }} )}; function display_visit_stats(response) { yes_votes = response.true; no_votes = response.false; if (yes_votes > 0 || no_votes > 0) { $( #helpful ).addClass( text-center ).html( votes so far: Yes:   + response.true +   No:   + response.false +   ); } } $( #yes-link ).click( function() { handle_helpful_link( yes );}); $( #no-link ).click( function() { handle_helpful_link( no );}); function record_visit() { $.ajax({ url:  http://chalkmark.herokuapp.com/api/helpful/visiting/ , data: {url: document.title}, dataType:  jsonp , success: function(data) { display_visit_stats(data) }} )}; $(function() { record_visit(); }); ", "tags": "", "loc": "/chalkmark/chalkmark.js" },

        {"title": "Grading", "text": "Scores There are many expecations, homeworks, assigments and/or quizes, and a several large ones. All of them are individually scored on a scale of 1-100 which you can interpret as follows: 90 - 100: Exceeds Expectations (A- -> A+) 80 - 90: Meets Expectations (B- -> B+) 70 - 80: Needs Improvement (C- -> C+) 60 - 70: Unacceptable (D- -> D+) 40: Not handed in Deadlines and consequences All homework is due by when the class starts Homeworks are scored on a 1-100 scale You can get an extension by talking to the TA, up to a point If you hand it in after a granted extension you will loose 15 points on it If you don’t hand it in at all then you get 40 points for it, which will significantly affect the average! Mid term and Final Grade These are calculated as a weighted average of the individual homeworks. The weights are as follows: Class Participation: 10% Do you show up on time (or let the teachers know ahead of time if you cannot?) Do you ask good questions, and contribute to the discussion? Do you help the class move forward and stay focused? When called on or in discussions do you demonstrate that you have done the assigned reading or work? Do you keep up with the homework? Programming Assignments: 30% All work in your Code Portfolio is examined regularly by the TAs. They will assess: Do the programs work? Does it use language features in a good way? Is it designed with good performance in mind? Does it follow good coding practices? Team nT Implementation: 30% This applies to the team coded implementation, in Git: Did all the specified functionalities get implemented How complete are unit tests and are they being run regularly Does the code reflect good coding practices Is there good Object oriented design How well does nT scale. How do you know. What Scaling techniques are applied How well do you understand the performance that you measured? What aspects of the product did you contribute to? How professional and attractive is UI, how is the fit and finish? How narrowly did you read the requirements, or did you go beyond them? Can you explain how it works? Team Contribution: 15% Do you contribute personally to your team? Are you a positive influence on productivity? Do your team mates like working with you? Are you at the center of problems or of solutions? This is based on a self- and peer- assessment Non programming assignments: 15% Don’t just summarize or regurgitate the reading Give a personal perspective or insight Make connections to other readings or work or your own research Have an interesting take or point of view Extra Credit: Ask me if you want to do an extra credit assignment The latest you can ask me is two weeks before the last day of instruction Note: it’s easier to push your grade up by doingn well on the core assignments An excellent job here will bump your grade at most one step (e.g. B+ -> A-) Notes Class Participation: includes being in class on time when the class starts, handing in homeworks that are assigned, being prepared by having done the reading, coding, viewing assigned so that when you are called on in class you can have something to say. Team Contribution: Working in teams is hard and requires a businesslike, constructive, flexible, respectful behavior among the team members. Remember that I am not asking you to become best friends, just to figure out how to get the most out of each other. I won’t be able to tell if you are just along for the ride, or actually doing a lot of work. ", "tags": "", "loc": "/content/background/grading.md/" },

        {"title": "Leveling exercise", "text": "Please do each of the following three small assignments in class today. You will have 30 minutes in class The objective is a baseline assessment of what you learned in Cosi 12 or Cosi 21 It will not be part of your grade This will be the only work you do on paper! NOTE You can use any programming language or do it in pseudo code. Get as far as you can. Partial work will get credit. Basic shell commands What are the shell commands to do the following activities: list all the files in the current directory change to a different directory delete a file delete a directory and its contents What do the following shell commands do? cp my_file.rb your_file.rb cd .. mv /mydev/freetime/home.rb /mydev/sample/home.rb Simple Class Design We want to represent a simple graphical world of simple two dimensional shapes Points, who have an x and y coordinate Rectangles, defined by a point at top-left and a point at bottom-right Circles, defined by a center point and a radius Scenes, defined by including zero or more shapes Define a class structure for each of those. You may use inheritence if you want. The scene class should include methods as follows: constructor add shape delete shape count shapes Write a main program that Creates a scene with 2 rectangles and a circle Adds an additional rectangle to the scene Deletes the circle from the scene Prints out a report showing how many shapes of each kind exist in the scene 3 line programming problem You may do this in any language you like, including pseudo code Write a short program that prints out all the even numbers between 20 and 100 ", "tags": "", "loc": "/content/background/leveling.md/" },

        {"title": "Programming Assignments", "text": "During the first three weeks of class there will be three progressively more difficult programming assignments. You will have the whole week to work on them. Each assignment is due one week after it is presented to you. The assignments will focus only on Ruby, not Rails. The objective is to solidify your ruby programming and debugging abilities. Remember that you need to do the coding work in your Code Portfolio and that it will be reviewed every Monday. (PA) Movies Part 1 (PA) Movies Part 2 (PA) Mazes ", "tags": "", "loc": "/content/background/pa.md/" },

        {"title": "Recommended Pre-Work", "text": "For those of you (most of you) who don’t have experience with Ruby on Rails, here is a list of preparatory work that you ought to do before coming to the first day of class. There are a lot of things to learn in this course, so I very strongly recommend you to do the following prework before the class starts. Your Computer Hot Tip If you have a windows computer, install a Linux Dual Boot partition. Students have all kinds of computers. I have nothing against Microsoft Windows, and you can take this course using just windows. But you're life is going to be difficult. It just seems that the open source tools and libraries we use don't like Windows. If you have a Windows computer I strongly strongly suggest you ask someone how to install a Linux partition or dual boot. Here are more tips on Ruby Highly Specific Set Up Instructions What you can do before the first class PRIORITY 1: Learn Ruby thoroughly. Ruby is a very cool language with basic and advanced features. We will have a brief time at the start of the course to get into Ruby but it will really pay off if you get ahead on this. Depending on how you best learn there are several approaches to take for learning Ruby. You can of course just use google to find resources and tutorails. The recommended self-study site is Learn Ruby The Hard Way. Students have had good success with it. Go through all the lessons! PRIORITY 2: Do (PA) Movies Part 1. This will both get a major initial homework out of the way but also prove to yourself that you’ve gotten a good sense of Ruby and how to use it. Here it is: (PA) Movies Part 1 Resources you will use constantly Stack Overflow: You may or may not have heard of Stack Overflow, but have you really used it? Have you looked for answers - probably yes, but have you posted questions? You will be doing both extensively during the course, so you might as well get used to it! Google Google is your friend. You know this of course. Almost any technical problem you encounter has been solved and written up by someone. Google it. Ask Mother Google. Ask The Google! Other interesting resources Rails Guides Highly readable and concise (yet comprehensive :) guides to the most important parts of Rails. Often better than any book or manual. Rails Casts This web site contains hundreds of free screen casts that give step by step explanations on all sorts of use cases of rails. As the series has been going on for years, and has been in suspended animation since this June, you will see videos that talk about old versions of Rails and obsolete techniques. So, your mileage may vary but it’s still a great resource. Codewars - Ruby programming katas. Ruby on Rails Tutorial - Another excellent Rails tutorial ", "tags": "", "loc": "/content/background/prework.md/" },

        {"title": "Welcome!", "text": " Software Engineering and Architecture At Scale Learn how large software teams build large systems. How does programming change when a system has thousands of modules and dozens of programmers? How do you ensure that the systems you build can evolve and grow? How do you put together an architecture that will survive an onslaught of 500,000 users or more? This course introduces you to concepts, principles, techniques and research that try to answer those questions. Pito Salas, pitosalas@brandeis.edu Scale What happens when systems have programs in multiple languages, hundreds of modules and classes, developed by teams of engineers? We need to approach programming in a whole new way, paying attention to good design, patterns, testing, source code management and other basics. In addition when software is developed in teams there are ways of approaching organization of the project, leadership, planning and scheduling. How do you design a system that is meant to support millions of users? How will it perform? You certainly can’t just get a bigger and bigger computer. This is most certainly an evolving space with new work happening both in academia and industry. Yet there are well established and tested fundamentals of architecture which we will look at to better understand this fascinating and important space. Programming There will be multiple programming assignments where students will work individually or in teams to modify and enhance parts of the NanoTwitter software. Students will have to build and test on their own computers and then deploy software to servers in the cloud. We will subject the software to artificial loads to see how they behave and then see how changes affect performance. Prerequisites and admission Prerequites for this course is that you have taken Cosi 12b and/or 21a. For more information contact Pito Salas, pitosalas@brandeis.edu ", "tags": "", "loc": "/" },

        {"title": "Code Reading (By Request!)", "text": "Some of you have said that you’re interested in investing more time in becoming master programmers. One of the best ways of doing that is reading other people’s code. I’ve selected 4 libraries that are all pretty small and digestable for your consideration. Because I am currently teaching Ruby, these examples are all Ruby. But a similar list would be easy to build for other languages. While each language has some unique capabilities that will be exploited in examples, most of what you learn in these examples would apply equally to other languages The list SignalLamp TimeTress Inflecto MicroMachine Proposed Process Find a group of two or three other, equally passionate programmers and decide on one of these programs to study. On your own study the library. Write a sample program using it so you really know what it is supposed to do. Read it on your own to orient yourself. Get together around a single computer and go through the program, line by line and discuss and explain what it does, all the while tapping into the web and ruby documentation to follow up on questions that are raised. My Special Offer I would be glad to participate in this meeting if you want! ", "tags": "", "loc": "/content/intro/code_reading_request.md/" },

        {"title": "List of lectures", "text": "#lecture datetitledescriptionhomeworkSoftware Design1Aug 27WelcomeIntroductions and logisticsStart working on Ruby the Hard Way (RHW). Start working on the movies-1 programming assignment.2Sep 1Ruby Firehose Part 1Getting up the Ruby learning curve by demos and self-paced learningWork on  Movies 1  and Ruby the Hard Way (RHW) to lesson 183Sep 3Ruby and Intro to Object OrientedGetting into Objects and Classes in RubyContinue Ruby the Hard Way \\[RHW\\] up to lesson 36. read AND DO \[POODR\] Chapter 1 and 2; complete PA movies-1.4Sep 8Software EngineeringWhat is software engineering, how does it relate to Computer Science?Because of snow days, the homework for today is what was due for the last two cancelled classes. \[RTHW\] to 45; Response to video and article about failure in software; Finish Movies-1; \\[POODR\\] Ch 3; Identify smells in movies-1.5Sep 10Software DesignSoftware design is the study of how we arrange our codeRead AND DO POODR Chapter 4, think about specific questions; complete the final set of lessons in \\[RHW\\].nano Twitter (nT)6Sep 15Server FundamentalsGoing to the fundamentals of what web servers doRead AND DO Sinatra Tutorial. Complete Movies-2.7Sep 17Database BasicsQuick intro to databasesRead AND DO \\[SODRR\\] Chapter 1. This may be hard but stick to it!8Sep 22Introduction to SinatraA very lightweight Ruby based web serverRead AND DO \\[SODRR\\] Chapter 2. Submit code from \\[SOODR\\] Chapter 1. Do Schema Design exercise.9Sep 24Twitter Case StudyIntroduction to Twitter and nanoTwitterUnderstand the key features of Twitter. View two videos and submit a diagram and an explanation of a certain part of the design.10Sep 29Persistence and Web servicesUsing databases and REST in Service Oriented ArchitecturesImplement Googlewack assignment.Scaling Basics11Oct 1Intro to ScalingGeneral concepts to help understand scaling and scaling problemsRead and do \\[SODDR\\] Chapter 3. Teams design the schema12Oct 6Architecting for scalePractical advice on how to detect and deal with scaling issuesSODDR Chapter 4 - answer some questions; Team works on nT to develop the html for the user interface and the sinatra app to do the basics.13Oct 8Introduction to Web ServicesWhat are web services? How do they tie into Service Oriented ArchitecturesRead articles about designing Web Services APIBuilding Software14Oct 13Review topicsGetting deeper into Object Oriented designTeams complete nT 0.1; Read Chapter 5 of \\[POODR\\]15Oct 15OO - InheritanceA closer look at Inheritance and delegationCRC Cards and POODR Chapter 616Oct 20TDDReview of concepts of Test Driven DevelopmentPOODR Chapters 8 and 8; tdd assignment; complete nT 0.217Oct 22Software TestingMore about the broad topics of Quality and TestingRead papers, write reflections, look into Hirefire18Oct 27Design PatternsReview and go deeper on Design PatternsnT 0.3, listen to podcast and read article, write reflection the night before!Design at Scale19Oct 29Scaling PatternsDatabase Partitioning and CachingWatch video, read article, write reflection20Nov 3Scaling PatternsQueueing and ConcurrencynT Version 0.421Nov 5Projects Discussion22Nov 10Review and DiscussionnT Version 0.523Nov 12Real World Survival KitIn which I share what I believe about succeeding in the real worldWork on your final deliverables24Nov 17Last ClassClosing day of inaugural edition of Cosi 105Are you kidding? ", "tags": "", "loc": "/content/intro/course_toc.md/" },

        {"title": "Code Portfolio", "text": "Throughout this course there will be many programming homeworks. You will be organizing them into a coursework portfolio directory with a very specific structure on your computer. That directory will be shared (automatically) with the TAs and Professor/ IMPORTANT You are required to organize your portfolio in a very specific way so that we can automatically review your work. Look way below for the specifics for this particular course. Why In addition to formally grading an assignment that spans multiple classes, in some cases it is very useful to receive help or feedback along the way. By working in your portfolio we will be able to pay attention to your work in progress. Secondly, at the end of the course you will have a nicely organized set of code that you wrote that you will be able to use for your own portfolio as you go out into the world. Grading Every Monday TA will look at your portfolio directory and give it a progress score based on: 1. How current you are with the assignment 1. How well you are applying learnings so far This grade is not meant to assess your work but to give you useful feedback and possibly help to ensure that your actual submission will get a good grade. It counts very little towards your final grade, as part of class participation. The progress score will simply be: 100: You’ve made reasonable progress 90: You seem to be behind or stuck or otherwise having challenges 80: You have not submitted anything Submitting the actual deliverable There will be a specific date by which the assignment should be completed, just like any other homework. After that date, the assignment will be scored in the usual way according to a rubric. Hypothetical Example On Jan 1 the homework is  Begin working on movies-3  On Jan 5 the homework is  Continue working on movies-3  On Jan 8 the homework is  Complete and submit movies-3 for grading  What is in your movies-3 portfolio directory on Jan 5 will be scored for progress. And what is in your movies-3 portfolio directory on Jan 8 will be scored as a formally homework submitted. Directory structure These rules are very specific because we use an automated grading tool (RoboGrade) to do a first pass on your work. Your portfolio directory is called <coursenumber>_<yourbrandeisid>. So for example, it might be cosi166b_cburkh/. Note that the <coursenumber> is complete and all lower case and your <brandeisid> is the part of your brandeis email before the @brandeis.edu Inside the portfolio directory there will be folders with very specific names that will be indicated as part of the homework. So for example, ./movies-1. Dropbox for sharing the directories with us Download and install the Dropbox Desktop application from https://www.dropbox.com/install This will create a Dropbox folder on your local machine. Within this folder, create a folder named <coursenumber>_<yourbrandeisid>. This will serve as the top-level portfolio directory. Using the Dropbox web interface, share this folder with the TAs and instructor. To do this, select the folder, press the Share dropdown, select invite people to collaborate, and add their emails. Specifics for this course Name the top level directory exactly cosi105b_<yourbrandeisid> You will have the following subdirectories, named exactly like this: hardway movies-1 movies-2 poodr sinatraintro … more to come Emails to share your Dropbox folder with: Nick Moran: nemtiax@gmail.com Pito Salas: pitosalas@gmail.com Eyad Fallatah: fallatah@brandeis.edu ", "tags": "", "loc": "/content/intro/portfolio.md/" },

        {"title": "Welcome", "text": "Homework due for today Note for first day of class: Each day of class has a page on this web site. The first section of that page is always the homework due on that very day. So in other words, the homework listed here is actually 'pre-work' for day one. We will go over this in a little more detail during class. Locate continue going through Learn Ruby The Hard Way. You will be responsible for all 52 lessons plus closing chapters in 2 weeks. Study the requirements for the first programming assignment: (PA) Movies Part 1. You will be using what you’ve learned about programming in your previous courses. Yes, it’s a new langauge, but really the basic ideas are exactly the same. We are working on problem solvingn as much as anything. Come ready to discuss the approach you will take in class. What is this course about: Software Engineering and Design Introduce Pito, where I came from, and why I am excitied about this course. Look at: FAQ for Pito Salas Here are the Books for Cosi 105B Here are the Goals and Learning Objectives for Cosi 105b The prime source for this course is this web site itself! If you weren’t able to register Some people will drop so room will likely open up Come to all the classes, and do all the work Submit homeworks via email to the TAs Add your name to the Waiting List for Cosi 105b 30 Minute Quick Assignment Leveling exercise Homeworks and Grading Yes there is a fair bit of homework You are responsible for reading the lecture’s page before each class Some homeworks have explicit deliverables: Will be clearly marked as  deliverable  or  team deliverable  Are numbered, X.Y - X is the lecture number and Y is the homework for this lecture Those are submitted to the appropriate spot in Latte, either as a .pdf (for writing) or as a .zip file The portfolio Where all your programming work has to happen Look carefully at Code Portfolio. Your portfolio will be formally reviewed every week for progress NOTE Often there is a concrete deliverable, a blog post, a zip file with code, etc. Those have to be submitted to LATTE Skills Inventory Whether you are officially registered or want to be on the wait list Really quickly Fill in Skills Inventory. (This page is protected until the day of class) Obviously this is not graded. The purpose is to help us put together good teams. Do it now please Project All students will work in teams on their version of link_to_section :nt, :nt_outline We will form teams of exactly four students. You will be assigned to a team. Let’s look at what it’s like to Working in teams Next Class Look at homework: Ruby Firehose Part 1 ", "tags": "", "loc": "/content/lectures/part1/01_welcome.md/" },

        {"title": "Ruby Firehose Part 1", "text": "Homework due for today Begin working on (PA) Movies Part 1. This assignment will get you to write some basic code with Ruby. You will learn how to read files work with data in arrays and hashes. Remember that your work should be happening inside your Code Portfolio. Continue with Learn Ruby The Hard Way. You should be at least up to Lesson 18 where you will learn about working with files. Remember that your work should be happening inside your Code Portfolio. Discussion about homework and Ruby Experiment: Click here to submit one or vote on another Let’s look at some of the problems you might have encountered in RHW Ruby Live Coding Demonstration 1########################## 2# Strings, Numbers are a class 3 41.class # => Fixnum 5 Greetings .class # => String 6 7########################## 8# We use  new  to create new instances 9 10a = Array.new(5) # => [nil, nil, nil, nil, nil] 11 12# We call a method by  .methodname  13 14a.size # => 5 15a.max # => nil 16 17########################## 18# We do array assignments with brackets 19 20a[0] =  Truth  # =>  Truth  21a[1] =  even  # =>  even  22a[2] =  unto  # =>  unto  23a[3] =  its  # =>  its  24a[4] =  innermost  # =>  innermost  25a[5] =  parts  # =>  parts  26 27########################## 28# Ruby has lots of built in methods to operate on arrays! 29 30a # => [ Truth ,  even ,  unto ,  its ,  innermost ,  parts ] 31 32a.size # => 6 33 34a.class # => Array 35 36a.sample # =>  innermost  37 38a.sort # => [ Truth ,  even ,  innermost ,  its ,  parts ,  unto ] 39 40########################## 41# Variables are not declared, nor typed 42 43x = 100 # => 100 44 45x =  pito  # =>  pito  46 47y = x # =>  pito  48 49y = true # => true 50 51x # =>  pito  52 53########################## 54# More about strings 55 56 I am a string  # =>  I am a string  57 58'So am I' # =>  So am I  59 60concat =  I am a string   + 'so am i' # =>  I am a string so am i  61 62prompt =  Hello, my name is #{x}  # =>  Hello, my name is pito  63 64prompt =  Hello, my name is #{x.capitalize}  # =>  Hello, my name is Pito  65 66########################## 67# Methods (are like functions, procedures, etc.) 68 69def greet(name) 70 result =  Good night #{name}  # =>  Good night Pito ,  Good night Pito  71 return result # =>  Good night Pito ,  Good night Pito  72end 73 74greet( Pito ) # =>  Good night Pito  75greet  Pito  # =>  Good night Pito  76 77# More idiomatic:! 78 79def greet name 80  Good night #{name}  # =>  Good night Pito ,  Good night Pito  81end 82 83greet( Pito ) # =>  Good night Pito  84greet  Pito  # =>  Good night Pito  85 86########################## 87# Hashes aka dictionaries (Python) 88 89who = 90 {first:  Jon , last:  Anders , age: 12} # => {:first=> Jon , :last=> Anders , :age=>12} 91who[:first] # =>  Jon  92who[:name] # => nil 93who[0] # => nil 94who.length # => 3 95who.sort # => [[:age, 12], [:first,  Jon ], [:last,  Anders ]] 96 97require 'json' # => true 98puts who.to_json # => nil 99 100# >> { first : Jon , last : Anders , age :12} 101 Next Class Look at homework: Ruby and Intro to Object Oriented ", "tags": "", "loc": "/content/lectures/part1/02_warm_up_1.md/" },

        {"title": "Ruby and Intro to Object Oriented", "text": "Homework due for today Continue with Learn Ruby The Hard Way. You should be at least up to Lesson 36. You will learn more about files (which you can use for your programming assignment too. Also we get into functions and control flow. The section ends with thoughts about design. Remember that your work should be happening inside your Code Portfolio. Read  Practical Object Oriented Design in Ruby  [POODR] Chapter 1 and 2. Make sure you really understand the ruby syntax for defining classes and also try to answer for yourself what the  Single Responsibility Principle  is about, and why it is important. What are some ways in which you could check whether your class has a single responsibility? What do you think Sandi Metz means by  exemplary  code? What is her view of design? See if you can understand why she calls the  message  the foundation of Object Orientation. Do you know what she means by a  message ? Remember to do all the examples, by typing them in yourself and getting them to work. Remember that your work should be happening inside your Code Portfolio. Continue (PA) Movies Part 1 and remember to apply what you’ve learned so far from the reading so far. Remember that your work should be happening inside your Code Portfolio for it to be graded. REMINDER Your portfolios will be reviewed and graded TODAY for progress. Homework discussion How did it go with the work? Who struggled, and what were some of the challenges? Lets take a look at some of the Portfolio code, either [RTHW] or Movies-1 Does movie_data respect the single responsibility principle? Why does she talk about a ‘message’ and what does that mean? What is software design? In software,  arranging code in a particular way  YAGNI principle vs. BDOF Finding the balance: effort and care proportional to cost over time! Patterns Patterns in software (inspired by:A Pattern Language, by Christopher Alexander) Where do these ideas come from? Classes Classes: How do you decide what a class is and what it is not? What is the domain or the problem space or the problem domain? Look for Nouns Use  CRC Cards  Note: SRP: Single Responsibility Principle Ask yourself:  What does this class represemt/do  Objects Classes and objects are different! Instance variables Constructor (no destructor in Ruby!) Methods: private/public Polymorphism When the same interface can be used with objects of different classes Example: In ruby, message #to_s can be sent to objects of different classes Why is it useful? Ways to achieve this: Inheritance  Duck  Typing  Duck  typing. Don’t rely on the class/type of a thing to know what it can do Reverse it: based on what it can do, you can tell the type of a thing. How is duck typing is an alternative/complement to inheritence? And what about Java interfaces? Consider a method like #talk in a gaming application Here’s The classic Duck Typing Example Inheritance inheritence: rarely is this the best solution composition and delegation: a better solution Ruby Live Coding Demonstration and discussion 1######## CLASS ####### 2# A very simple class 3 4class School 5 def initialize(name) 6 @name = name 7 end 8end 9 10##### INSTANCES ##### 11 12my_school = School.new( Brandeis ) 13 14my_school.class 15 16your_school = School.new( Olin College ) 17 18##### INSTANCE VARIABLES ##### 19 20class School 21 attr_accessor :name, :rank 22 23 def initialize(name, rank) 24 @name = name 25 @rank = rank 26 end 27 28 def to_s 29  #{@name} is ranked #{@rank}  30 end 31end 32 33my_school = School.new( Brandeis , 30) 34your_school = School.new( Olin , 50) 35 36##### DUCK TYPING ##### 37my_school.to_s 38puts  Inspecting my school: #{my_school.inspect}  39my_school.respond_to? :inspect 401.234.respond_to? :inspect 41 42########################## 43# Blocks are kind of like'anonymous methods' 44 45numbers = [1, 20, 33, -1, 11] 46numbers.sort 47numbers.sample 48numbers 49 50puts  first example:  51numbers.each { |x| puts x} 52 53puts  \nSecond example (the same!)  54numbers.each do 55 |x| puts x 56end 57 58numbers.map {|x| x * 1000} 59 60numbers.reduce { |accum, val| accum + val } 61 Next Class Look at homework: Software Engineering ", "tags": "", "loc": "/content/lectures/part1/03_warm_up_2.md/" },

        {"title": "Software Engineering", "text": " Snow Day Note These notes are actually the combination of what was on the pallete last week on Monday and Wednesday. The homeworks, which were due last week, are the same here. So today, Monday, there's no new homework, just what was due last week. Homework from last Monday: Continue with Learn Ruby The Hard Way. You should be at least up to Lesson 45. You will learn about the wonders of arrays and hashes. Also one of the more advanced ruby features, modules. And now you start getting into somewhat more abstract stuff, object oriented analysis and design.. Remember that your work should be happening inside your Throughout this course there will be many programming homeworks. You will be organizing them into a coursework portfolio directory with a very specific structure on your computer. That directory will be shared (automatically) with the TAs and Professor/ IMPORTANT You are required to organize your portfolio in a very specific way so that we can automatically review your work. Look way below for the specifics for this particular course. Why In addition to formally grading an assignment that spans multiple classes, in some cases it is very useful to receive help or feedback along the way. By working in your portfolio we will be able to pay attention to your work in progress. Secondly, at the end of the course you will have a nicely organized set of code that you wrote that you will be able to use for your own portfolio as you go out into the world. Grading Every Monday TA will look at your portfolio directory and give it a progress score based on: 1. How current you are with the assignment 1. How well you are applying learnings so far This grade is not meant to assess your work but to give you useful feedback and possibly help to ensure that your actual submission will get a good grade. It counts very little towards your final grade, as part of class participation. The progress score will simply be: 100: You’ve made reasonable progress 90: You seem to be behind or stuck or otherwise having challenges 80: You have not submitted anything Submitting the actual deliverable There will be a specific date by which the assignment should be completed, just like any other homework. After that date, the assignment will be scored in the usual way according to a rubric. Hypothetical Example On Jan 1 the homework is  Begin working on movies-3  On Jan 5 the homework is  Continue working on movies-3  On Jan 8 the homework is  Complete and submit movies-3 for grading  What is in your movies-3 portfolio directory on Jan 5 will be scored for progress. And what is in your movies-3 portfolio directory on Jan 8 will be scored as a formally homework submitted. Directory structure These rules are very specific because we use an automated grading tool (RoboGrade) to do a first pass on your work. Your portfolio directory is called <coursenumber>_<yourbrandeisid>. So for example, it might be cosi166b_cburkh/. Note that the <coursenumber> is complete and all lower case and your <brandeisid> is the part of your brandeis email before the @brandeis.edu Inside the portfolio directory there will be folders with very specific names that will be indicated as part of the homework. So for example, ./movies-1. Dropbox for sharing the directories with us Download and install the Dropbox Desktop application from https://www.dropbox.com/install This will create a Dropbox folder on your local machine. Within this folder, create a folder named <coursenumber>_<yourbrandeisid>. This will serve as the top-level portfolio directory. Using the Dropbox web interface, share this folder with the TAs and instructor. To do this, select the folder, press the Share dropdown, select invite people to collaborate, and add their emails. . Reading and Watching: As you read the article and watch the video try to figure out what some of the reasons are for failures in software projects. Are they failings of human nature or failings of science and methodology? Do the authors believe that in the future failure due to software will eventually be eliminated? How do those lessons apply to what happened with the original healthcare.gov web site? Were the problems fundamental computer science related or were they caused by easily avoided human error? Do you think software systems like that are fundamentally more complex and in fact exceed the ability of any individual to grasp? Read R.Charette,  Why Software Fails - IEEE Spectrum.  Watch Healthcare.gov failure: Analysis and discussion (also available here…) Deliverable: Write a 1-page response to the questions I posed above. Support your arguments with references to the paper or other sources. PDFs only accepted. You have to complete link_to_topic (PA) Movies Part 1 by today. If you are stuck, ask one of our wonderful TAs for assistance. Up to now you have been coding inside your own Code Portfolio Homework from last Wednesday: Read (POODR) Chapter 3. Points to understand: Gear and Wheel have several kinds of dependencies. What are they? Why are dependencies bad? How are things improved when (on page 41) wheel becomes an input to the initializer? Why does she keep using the term  messages ? What is dependency direction, how can it be changed, and how do you know which is preferred? *You are required to do all the examples, by typing them in yourself and getting them to work. Remember that your work should be happening inside your Throughout this course there will be many programming homeworks. You will be organizing them into a coursework portfolio directory with a very specific structure on your computer. That directory will be shared (automatically) with the TAs and Professor/ IMPORTANT You are required to organize your portfolio in a very specific way so that we can automatically review your work. Look way below for the specifics for this particular course. Why In addition to formally grading an assignment that spans multiple classes, in some cases it is very useful to receive help or feedback along the way. By working in your portfolio we will be able to pay attention to your work in progress. Secondly, at the end of the course you will have a nicely organized set of code that you wrote that you will be able to use for your own portfolio as you go out into the world. Grading Every Monday TA will look at your portfolio directory and give it a progress score based on: 1. How current you are with the assignment 1. How well you are applying learnings so far This grade is not meant to assess your work but to give you useful feedback and possibly help to ensure that your actual submission will get a good grade. It counts very little towards your final grade, as part of class participation. The progress score will simply be: 100: You’ve made reasonable progress 90: You seem to be behind or stuck or otherwise having challenges 80: You have not submitted anything Submitting the actual deliverable There will be a specific date by which the assignment should be completed, just like any other homework. After that date, the assignment will be scored in the usual way according to a rubric. Hypothetical Example On Jan 1 the homework is  Begin working on movies-3  On Jan 5 the homework is  Continue working on movies-3  On Jan 8 the homework is  Complete and submit movies-3 for grading  What is in your movies-3 portfolio directory on Jan 5 will be scored for progress. And what is in your movies-3 portfolio directory on Jan 8 will be scored as a formally homework submitted. Directory structure These rules are very specific because we use an automated grading tool (RoboGrade) to do a first pass on your work. Your portfolio directory is called <coursenumber>_<yourbrandeisid>. So for example, it might be cosi166b_cburkh/. Note that the <coursenumber> is complete and all lower case and your <brandeisid> is the part of your brandeis email before the @brandeis.edu Inside the portfolio directory there will be folders with very specific names that will be indicated as part of the homework. So for example, ./movies-1. Dropbox for sharing the directories with us Download and install the Dropbox Desktop application from https://www.dropbox.com/install This will create a Dropbox folder on your local machine. Within this folder, create a folder named <coursenumber>_<yourbrandeisid>. This will serve as the top-level portfolio directory. Using the Dropbox web interface, share this folder with the TAs and instructor. To do this, select the folder, press the Share dropdown, select invite people to collaborate, and add their emails. Read about Code Smells and Code Smell in wikipedia. Don’t stop there. Google for Code Smells and find the most important and common ones. Examine your own (PA) Movies Part 1 and Deliverable: Point out two code smells. Begin working on (PA) Movies Part 2 in your Code Portfolio like you did before REMINDER Your portfolios will be reviewed and graded TODAY for progress. Post It Note We will do a Post-it note exercise. Software Engineering Definitions (from: [reference]) Craft Applies traditional techniques to produce goods and provide services Examples: Cabinet making, Sewing, Teaching? Science Aims to gather, verify and document knowledge and insight through research Examples: Physics, Biology, Computer Science? Engineering Applies both knowledge and scientifically analyzed and justified methods to develop and produce technical products Examples: Electrical Engineering, Biomedical Engineering, Software Engineering? Creative tension  Well, it may be all right in practice, but it will never work in theory.  – Warren Buffett on how the academic community regards his investment approach  In theory, there is no difference between theory and practice. But, in practice, there is.  – Jan L.A. van de Snepscheut and/or Yogi Berra  In theory, the difference between theory and practice is small. In practice, the difference between theory and practice is large.   Beware of bugs in the above code; I have only proved it correct, not tried it.  – Donald Knuth What is Software Engineering? Engineering (from [reference]) The creative application of scientific principles to design or develop structures, machines To construct or operate the same with full cognizance of their design; To forecast their behavior under specific operating conditions; Respecting an intended function, economics of operation or safety to life and property Software Engineering (from me) People processes required to build working, deployed, software based systems Development methodology to deal with extreme complexity Primacy of deployed systems, used in the world, having real impact on people Triad of Money, Time and Quality How is it different from Computer Science? Science (from Is Mathematics a Science?): Evidence gathered in experiments and observations. Theories about the evidence, theories that move from the particular to the general. The requirement that contradicting evidence falsify a theory. Discussion: Imagine what  Experimental Computer Science  might mean? Why does Software Engineering matter in general Is it fundamentally different from  programming ? How? Do you want to be a Computer Scientist or a Software Engineer? Ok, but what is my degree in? Things I look for in a  software engineer  Talent at design, architecture, coding Prioritizes longevity, maintainability, reusability, sharing (repositories, version management) Follows throough on quality, fit and finish, and testing of all kinds at all levels Understands the eternal tradeoff: cost, time, schedule, delivery See my own Sofware Engineering Rules of Thumb References [1]  Software Engineering: An Idea whose time has come and gone? [2]  Can practitioners neglect theory and theoreticians neglect practice?  [3] Sofware Engineering Rules of Thumb [4] What is Computer Science? [5] Is Computer Science Sience? [6] Is Mathematics a Science? Good Programming What is  disposable code ? Not designed Incomprehensible 1 year, 1 month, 1 week later Just barely works, no idea why  write-only  Long, ugly methods Bad or meaningless naming Rules and Slogans QUOTE Know the rules well, so you can break them effectively. (Dalai Lama) Slogans DRY:  Do Not Repeat Yourself . YAGNI:  You’re Not Gonna Need It  NIH:  Not Invented Here  BDOF:  Big Design Up Front  Discussion about hard and fast rules Tools to automatically check: Automatic Code Reviews Code Smells What are they? Signs that your code can be made better Things you should look for when doing a code review Learned from practical experience There are many lists, this is mine of the top ones They are not hard-and fast The smells Large class: Class longer than 100 or so lines Large method: Method longer than 10 lines or so Long parameter list: methods with 4 or more parameters Single Responsiblity Violations: Class should do one thing Global variables: Almost always a very bad sign Bad Name: Non descriptive or very short variable names Unnecessary complexity: Nested conditionals (ifs and case) are questionable Feature envy: A class that uses methods of another class exessively Note Smells can be ambiguous or language dependent Some references Smells to Refactorings Sandi Metz’ Rules for Developers Sandi Metz’ Rules Video Other basic hygene What’s the right amount of code commenting? How important is proper formatting? Why is naming important and what is it’s connection to commenting? ‘Sandy Metz’ Rules Classes can be no longer than 100 lines of code Methods can be no longer than five lines of code Pass no more than four parameters into a method Controllers (Rails) can insantiate only one object. Therefore views can only know about one instance variable, and only send methods to that object. (@view_presenter.user.username is not allowed) Next Class Look at homework: Software Design ", "tags": "", "loc": "/content/lectures/part1/04_software_engineeringbasics.md/" },

        {"title": "Good Practices", "text": " * Read \[POODR\] Chapter 3. Points to understand: * Gear and Wheel have several kinds of dependencies. What are they? * Why are dependencies bad? * How are things improved when (on page 41) wheel becomes an input to the initializer? * Why does she keep using the term  messages ? * What is dependency direction, how can it be changed, and how do you know which is preferred? * *You are required to do all the examples, by typing them in yourself and getting them to work. Remember that your work should be happening inside your .* * Read about [Code Smells](http://martinfowler.com/bliki/CodeSmell.html) and [Code Smell](http://en.wikipedia.org/wiki/Code_smell) in wikipedia. Don't stop there. Google for Code Smells and find the most important and common ones. Examine your own and * Begin working on in a directory called movies-2 in your like you did before #### Homework discussion * Questions I asked about POODR * Reminder about the portfolio and how work there is graded #### Do Post-it note exercise #### Next Class * Look at homework: ", "tags": "", "loc": "" },

        {"title": "Software Design", "text": " Monday offline assignment instead of class: (Offline) Smell Exercise. Deliverable: PDF from the ‘study group’ with responses to the questions posed. Read [POODR] Chapter 4. Points to understand: Research and figure out why they are called  messages  and not just  calls . What’s the distinction and nuance? Bottom of page 67:  The problem is not that Customer should not send it, it’s that Trip should not receive it.  Why? In this chapter she uses talks about the context of a class. What does she mean? Can you explain the law of demeter? Or how do you recognize violations easily? You are required to do all the examples, by typing them in yourself and getting them to work. Remember that your work should be happening inside your Code Portfolio. Complete the last lessons of Learn Ruby The Hard Way. Beyond lesson 45 things get a little more free form. You are asked to develop a game. You can do that as trivially or completely as you want. Do as much of the last lessons as you can. Remember that your work should be happening inside your Code Portfolio. Continue working on (PA) Movies Part 2 as usual, in a directory called movies-2 in your Code Portfolio Post-it Note Exercise Homework Discussion Look at some of the questions asked in [POODR] work Can we look at your code? How did the Offline Smell work go? Feedback please: work in groups? What other sources did you look at Can we look at your code? Let me show you mine and explain what I did and why Movies-1 Quick code review from some volunteers? Design Fundamentals Aesthetics/Beauty/Sweet Smelling code Like a ‘beautiful proof’ or an ‘elegant argument’ Programming in the small or large can be beautiful Not an end to itself: Leads to: higher quality code Leads to: code that is easier to modify/adapt to new requirements Leads to: healthier code that doesn’t get sick and decay as quickly Decomposition A core life skill I want to get into grad school: what are the steps? How do I decompose the problem? You want to make an argument for something: what are the steps, how do I build a case? Outlines, hierarchy, dependencies For Software Design, decomposition is the central first step Example: Class Bicycle might be better represented as Class Bicycle + Class Wheel Abstraction Programming is all about abstraction Understanding the important aspects of a problem, ignoring the rest ‘Leaky Abstractions’ Note, this does not always require inheritence! Example: Class Invoice includes a collection of products with a price and a description We’re abstracting away the difference between each product as long as they respond to messages Information hiding  Inside  vs.  Outside , scales at many levels  What you don’t know can’t hurt you  Harden against future inevitable change Example: Make everything possible private Example: Does anyone outside of Invoice need to know how the collection is represented? Decoupling Related but not the same as decomposition Example: Can I write Class Wheel so it knows nothing at all about class Bicycle? Good Programming What is  disposable code ? Not designed Incomprehensible 1 year, 1 month, 1 week later Just barely works, no idea why  write-only  Long, ugly methods Bad or meaningless naming Rules and Slogans QUOTE Know the rules well, so you can break them effectively. (Dalai Lama) Slogans DRY:  Do Not Repeat Yourself . YAGNI:  You’re Not Gonna Need It  NIH:  Not Invented Here  BDOF:  Big Design Up Front  Discussion about hard and fast rules Tools to automatically check: Automatic Code Reviews Code Smells What are they? Signs that your code can be made better Things you should look for when doing a code review Learned from practical experience There are many lists, this is mine of the top ones They are not hard-and fast The smells Large class: Class longer than 100 or so lines Large method: Method longer than 10 lines or so Long parameter list: methods with 4 or more parameters Single Responsiblity Violations: Class should do one thing Global variables: Almost always a very bad sign Bad Name: Non descriptive or very short variable names Unnecessary complexity: Nested conditionals (ifs and case) are questionable Feature envy: A class that uses methods of another class exessively Note Smells can be ambiguous or language dependent Some references Smells to Refactorings Sandi Metz’ Rules for Developers Sandi Metz’ Rules Video Other basic hygene What’s the right amount of code commenting? How important is proper formatting? Why is naming important and what is it’s connection to commenting? ‘Sandy Metz’ Rules Classes can be no longer than 100 lines of code Methods can be no longer than five lines of code Pass no more than four parameters into a method Controllers (Rails) can insantiate only one object. Therefore views can only know about one instance variable, and only send methods to that object. (@view_presenter.user.username is not allowed) Next Class Look at homework: Software Design ", "tags": "", "loc": "/content/lectures/part1/06_software_design.md/" },

        {"title": "Server Fundamentals", "text": "Homework due for today Read and do all the steps in this tutorial: Making a simple, database driven website with Sinatra and Heroku. Here you will see essentially all the basic step you would need to create a simple version of nanoTwitter. Expect not to understand everything but I want you to start getting a feel of the lay of the land. I have done the complete example and made a video of it. Feel free to follow it but you must also type it in on your computer and get it to work. As for help if you require it! Remember Remember that your work should be happening in a new top level directory called `cs105b_yourname/sinatraintro`, inside your portfolio directory Complete (PA) Movies Part 2. Make sure your code is all in your Portfolio, directory  movies-2  and that it works. Look closely at the end of (PA) Movies Part 2 where two deliverables are specified. Deliverable: Upload your code to github; run it through Codeclimate; write a post with the requested information about your solution. Homework discussion How did it go? How a web server works Review of some basic concepts Client and Server Client asks for a page; server sends a page Web server receives the request and creates the page and sends it back A level deeper: Server (usually) looks inside a database for information And runs an algorithm on that to create the output And that’s what gets sent back. Next Class Look at homework: Database Basics ", "tags": "", "loc": "/content/lectures/part2/01_serv_fund.md/" },

        {"title": "Database Basics", "text": "Homework due for today Read [SODRR] Chapter 1 and attempt to get it to work on your computer. This chapter builds on the basics we covered at the last lecture. It covers much of the same ground as the last tutorial, but goes a little further. Try to develop an understanding of: What a web server is and how Sinatra helps you create one Meaning of the URL ActiveRecord as the bridge between Ruby and the relational database The relationship between the client and the server How Unit testing is done with Rspec The idea of Test Driven Development HTTP and it’s different Verbs like GET, PUT, POST etc. To help your reading and doing, here’s a video of the first 18 pages of that chapter with extensive commentary and conceptual explanations: Because the book is a couple of years old, there are some changes you need to keep in mind in order to get it to work on your own computer. They are all mentioned in the video but here they are again: gem is called active_record (not activerecord) No need to require ‘rubygems’ anymore (since Ruby 2.0) The first few lines of service_spec.rb change a lot. Click here to see a working example NOTE In addition to just reading the chapter and watching the video, I would like you to get it to work on your own computer in your portfolio in a new top level directory called `cs105b_yourname/user-service. Please spend 5 minutes on this Self Assessment Grid From Monday How a web server works Review of some basic concepts Client and Server Client asks for a page; server sends a page Web server receives the request and creates the page and sends it back A level deeper: Server (usually) looks inside a database for information And runs an algorithm on that to create the output And that’s what gets sent back. Today’s Original Plan Homework Let’s review the user-service.rb and related files to talk again about what they do. Data Modeling Background What does the term ‘Data Modeling’ mean? How Relational Databases work Tables, Columns, Databases, Joins  3d Normal Form  Different approaches Key question is how you correlate the tables in a database with the attributes of a class Data Modeling Crucial step in design SQL vs. NOSQL databases SQL Databases Schema Tables Fields Joins Relationships One to One (Student <-> Transcript) One to Many (Student -> Car) Many to Many (Student <-> Courses) Careful analysis of the product requirements Exercise Team up with one other person Design the data model for a music library management application like iTunes 15 Minutes, ask questions Steps What are the entities? Is something contained in something else? How many X’s are there for each Y? What kinds of facts do we need to know about each entity? What are the datatypes of those facts? Are there any ‘arrays’? Possibly identify other entities Repeat until done ActiveRecord DB Mechanics ActiveRecord Library from Ruby on Rails which is the connection between the rails application and the underlying database For advanced designs, there are options other than Activerecord ActiveRecord is also often used by itself, especially in Sinatra Naming Model.rb file is named singular, e.g. User Corresponding db table is plural and lower case, e.g. users Correspondences Each instance of the class (e.g. User) corresponds to a single record in the dabase When a query returns a bunch of records, you get a collection of instances of the class (this is classic Active Record model) Attributes Rails will automagically create the methods to access each field of the record in the database Different database ‘servers’ Sqllite - local database, no need for a server MySql - Standard industrial strength database, free Postgress - Becoming very popular with Rails community Datatypes supported by ActiveRecord DB datatypes for Rails 4 Queries and other ways to access the database Validations Rails Validations Tools and notes Check out MesaSQLite Handy Rake Info: Rake  tasks  (commands) Next Class Look at homework: Introduction to Sinatra ", "tags": "", "loc": "/content/lectures/part2/02_database_fund.md/" },

        {"title": "Introduction to Sinatra", "text": "Homework due for today Read [SODRR] Chapter 2. Read to understand What is a Service Oriented Architecture? A web server is now used not just as a place that has web pages for people to read, but as a place that delivers a service (functionality, data, information) to other programs, without human intervention. instead of returning HTML (for web browsers to render) it returns data (for other apps to use!) Such a server is often said to be delivering a web service or web API. This brings the notion of modularity, isolation, information hiding all the way up to the level of full servers. And creating an application can now become the stringing together of web services, each of which might be delivered by a different company (think Amazon, Heroku, Apple, IBM) Homework from last week: Complete and hand in working version of [SODDR] Chapter 1 Code. Here’s what to hand in: Complete and cleaned up code your portfolio/user-service Link to a brief Screencast showing the rspec test running and anything else you want to show off or explain. Brief explanation of your understanding of the precise purpose of the client library. Deliverable: Working code in your porfolio/user-service; screencast of running of your tests; brief expanation of purpose of client library. Do Schema Design Exercises. Deliverable: Submit a pdf with the schemas requested, in the format requested Homework Discuss building teams for projects? Discuss coding workshop this week Eyad: Tue or Thu Nick: Wed Homwork structure - coding from book? Discuss concepts you learned Quick review of web client / server relationship (http/url/html/json) What is Sintra? A ruby library Easiest way to create a simple web server Much smaller and easy to understand than rails (also less powerful) Components of a Sinatra app Single main ruby program Routing One method for each  route  Rendering of Views Nice pattern matching to generalize similar routes At the end of the method, either render html, json, or redirect Each of the route methods are  kind of like  a controller Data Sinatra doesn’t do anything special about working with the database Whatever database access you prefer will work Our examples use ActiveRecrord as a library to interface with the database But there are other ones that work just as well Typical design encapsulates the data access in a class one class for each table or entity often referred to as a model class Views Erb is a very common templating language Look at ERB Cribsheet They are what is generated at the end of the route method In addition to erb there are tons of others What they have in common: they all generate data (in the end) that is returned as the result of an HTTP request Walk through some code Sinatra Intro Simple Dataase Driven Website with Heroku SOTL-simple-service Sinatra References The readme of Sinatra is a great resource: Sinatra Readme A good basic book on sinatra is: Sinatra Up and Running Gems Shotgun Gem Foreman Gem ReRun Gem Scale Testing Choices ", "tags": "", "loc": "/content/lectures/part2/03_sinatra_intro.md/" },

        {"title": "Twitter Case Study", "text": "Homework due for today Clarify your understanding of twitter.com. If you don’t use Twitter or don’t ‘believe in it’, still sign up for an account just to play. Make sure you understand each of the core concepts of Twitter: a username (aka Twitter handle) your name on twitter to  mention :when you write @pitosalas in a tweet; to followi: when you ask to see tweets from someone else; [n,v]  tweet  or  post  or  update : the 140 character message you can send with twitter. a twitter stream or feed: all the tweets that a certain user has posted a #hashtag: a way to tag any tweet, which can be searched later a timeline: a real time stream of tweets. Your home stream or timeline is where you see all the tweets shared by the people you follow Deliverable: Your 2 sentence definitions of each of the concepts listed above. Submit as a pdf. View Twitter: From Ruby on Rails to the JVM AND Real Time Delivery Architecture at Twitter. These two talks give you a preliminary sense of what a real-world scalable architecture looks like. Many of the concepts, optimizations, design choices will apply in many other scenarios. Beware, there is a lot of depth here. It will be easy to understand superficially and hard to really understand. You are asked to draw a architectural diagram with as much detail as you understand. No more than 20 diagram boxes though. Add labels and comments as needed. You can draw neatly on paper, or use some tool to make a diagram, whatever you prefer. The second talk includes an explanation of the design elements that support the display of a new tweet on following users’ timelines. It also explains design elements that allow a new tweet to appear in a search result. They are fundamentally and subtlelly different. The difference is a key part of the scalability of Twitter. You are asked to explain the two designs in your own words. Deliverable: Your explanation of what the difference between a new tweet on timeline vs. new tweet in search result. Your diagram, as a .pdf. For paper, take a cell phone picture that is clear enough to read. Discussion about homework Lets look at some students’ diagrams Let’s talk about the features in the real Twitter All About nano Twitter nano Twitter Functionality: Point by point requirements for the project that everyone will be doing, nanoTwitter NT Design and Architecture:Review of key technical points of architecture and process Nano Twitter Project Outline: Approximate sequence of steps to get to the finished product Next Class Look at homework: Persistence and Web services ", "tags": "", "loc": "/content/lectures/part2/04_twitter_case.md/" },

        {"title": "Persistence and Web services", "text": "Homework due for today Implement the Sinatra Twitterwhack project Please do your work in your Code Portfolio, directory ./twitterwhack Here are the detailed instructions: Sinatra Twitterwhack Pay attention to object design and unit tests! Please record a brief Screencast illustrating your app in action. Deliverable: Complete code in portfolio; submit to latte the link to your screencast Make sure you have formed and communicated your nanoTwitter project teams Teams of 3 or 4 students, please try for some balance! Put your name on the google doc supplied by Nick in an email today. Your name can be on a line by itself, or with 1, 2 or 3 other people We will make sure everyone is on a team of 3 or 4 Discussion Stuff TAs will schedule a twitterwhack workshop Spark Grants Discuss homework Let’s look at someone’s code Demo your code Let’s talk about challenges encountered Who is still unsure about the role of a  client library  in a service oriented architecture? Databases in Sinatra ActiveRecord DB Mechanics ActiveRecord Library from Ruby on Rails which is the connection between the rails application and the underlying database For advanced designs, there are options other than Activerecord ActiveRecord is also often used by itself, especially in Sinatra Naming Model.rb file is named singular, e.g. User Corresponding db table is plural and lower case, e.g. users Correspondences Each instance of the class (e.g. User) corresponds to a single record in the dabase When a query returns a bunch of records, you get a collection of instances of the class (this is classic Active Record model) Attributes Rails will automagically create the methods to access each field of the record in the database Different database ‘servers’ Sqllite - local database, no need for a server MySql - Standard industrial strength database, free Postgress - Becoming very popular with Rails community Datatypes supported by ActiveRecord DB datatypes for Rails 4 Queries and other ways to access the database Validations Rails Validations Tools and notes Check out MesaSQLite Handy Rake Info: Rake  tasks  (commands) A worked out example Hands-on with Sinatra Persistence Next Class Look at homework: Persistence and Web services ", "tags": "", "loc": "/content/lectures/part2/05_more_sinatra.md/" },

        {"title": "Intro to Scaling", "text": "Homework due for today Read [SODRR] Chapter 3. This chapter introduces a running example of this book. It is a social feed reader. It’s analogous but different from our nanoTwitter. You should get lots of good ideas from this chapter to use in nT. In this chapter you learn what all the database tables (and therefore what the Models are.) Based on what we’ve covered so far you should be able to follow it. This chapter mentions Rails. Rails is a bigger sort-of-superset of Sinatra. They are both Ruby libraries. In this class we will be using Sinatra (not Rails) Don’t get confused: We are using ActiveRecord which is a separable Rails library which is also used in Sinatra. It is the  Object Relational Mapper.  It is most important that you take the time to understand the overall set of tables, why they exist and how they relate to each other and apply them to the next step of the homework. Start your design of nanoTwitter. All nanoTwitter work should happen in your Code Portfolio, directory /nanotwitter Nano Twitter Project Outline:[DBSCHEMA] Work on the model. Create a neat diagram of all the tables and the relationships between them. Use lines to connect the tables to each other for each has_many, belongs_to etc. relationship. Team Deliverable: the diagram as a pdf Discussion Finish up example of associations from previous lecture Let’s take a look at some example schemas to see how they are similar and different Thought experiment Real world example: cafeteria flow chart Optimization:the search for bottlenecks. What’s a bottleneck? Refer back to the cafeteria example. Moving target: When you eliminate/improve one bottleneck, it just reveals the next one. You make starting the dashboard activity faster….so that now you can notice that drawing the map overlay is slow. Important: Measurement Worse sin: Optimizing early. Why? Performance Performance is what what a user experiences as  slow  or  fast  Response time to an operation initiated by the user Perception! Can you ‘fool’ the user into thinking the app is faster than it is? Feedback: spinners etc Anticipation: start doing work before user requests it Different (but intertwined with) scaling Scaling  How many X per minute can you do  (e.g. user log ins, page refreshes, notifications,… How many (users, sessions, videos, pictures, etc) does the site need to support Different from response time:  How long does it take to accomplish Y?  Related but different Scaling has to do with the load on the servers Big challenge: how fast or slow will the site or app grow? Architectural techniques apply equally scaling up vs. scaling out caching load balancing database partitioning and sharding asynchronous processing Patterns of scaling problems and solutions  Clients  = web browsers accessing the site, mobile apps accessing the site, etc. Load on the servers. Some scenarios, one or more of: Too many clients asking the server to do operation O * Individual clients asking the server to do operation P too often Operation Q is time consuming for the server to satisfy Solutions can be Add an identical server to handle operations O, P or Q Send operation O to one server and operation P to another server Why are so many clients asking for O? Can we reduce the number? What’s the reason why a client would ask for operation P so often? Can we reduce that? Is there a way to make operation Q faster to satisfy? Next Class Look at homework: Architecting for scale ", "tags": "", "loc": "/content/lectures/part3/01_scaling_intro.md/" },

        {"title": "Architecting for scale", "text": "Homework due for today Read [SODRR] Chapter 4. This is a hard, conceptual chapter. You will want to come back to it later in the course. Try to understand: The core concept of partitioning the workload into services. Exactly what do they mean by a ‘service’. Why would you partition it? For nanoTwitter name one bit of functionality that could be partitioned into a separate service. What is meant by the design of the API of services. What is the relationship with HTTP and the URI? What is the conneciton with the concept of Routing that we discussed with Sinatra? Deliverable: Reflect on this chapter by giving your responses to the questions posed above. 1 page or less, pdf. Work on nT with team Nano Twitter Project Outline sections: HTMLUI and SINATRAAPP Team should decide how to divide up the work. There is lots of opportunity for working separately based on your interests and abilities. All work is happening in Code Portfolio directory /nanotwitter Homework Discussion Discuss answers to questions submitted Show one or three project’s schemas so far Discuss challenges with material from the last few classes.. Architecting for scale YAGNI Never do extra work for scaling until measurement reveals there's a problem and where the problem is. Base configuration We start with the simplest possible set up. If you have stand alone servers (which we don’t) you would run the database and web server on the same box. In our case we are deploying to a cloud server, where you aren’t getting a full box but a virtual slice, from e.g. Heroku. In that case our base configuration is a single  web worker  to run Sinatra and a single  database  to run our database, which would be Postgress. With that base, measure performance. If you have a real load, you can measure. In our case we have to create an artificial load send traffic to the server. We want to see how many simultanuous sessions we support. Stage One Scalability Tuning Analyze and think abou whether the servers are poweful enough. Is it your old laptop running a database server or is it a fairly new computer with no other load. If you are using a cloud service, like BlueMix, Heroku or Digital Ocean, what kind of virtual capacity or limits does it have? You might need to simply up the capacity. Examine your database access and queries. Can you determine that pages that don’t have a database call are really fast and the ones that do are slower? Can you see what pages slow down the most? If queries are the problem Make sure you clearly understand the separation between the web and the database server. Consider whether you should put the database on it’s own server Consider whether any tables need indexes Consider whether you are going back to the database more than a few times for each page displayed. Consider whether you are hitting the database once for each record displayed (so called N+1 problem). If you are, look at making your queries ‘greedy’ meaning that they bring back more in a single call to tge server Consider whether you are issuing the exact same query over and over again. Consider whether an intermediate query result that is expensive is being requested again. If so, caching those results is a strategy. Look at the metrics on your database servers, that is simple If the app/web server seems to be the problem Consider whether you are fully/over utilizing resources Make sure that the resources (memory, cpu) are being used but not pinned to maximum. You don’t want to hit your caps on resources, otherwise the app will start thrashing. Consider adding more  web workers  or concurrent threads. You have to be careful that your architecture allows that. Is your design ready to run concurrently. Is there any way that one request can corrupt another one running at the same time? If you still have scaling issues Consider adding another discrete server Once you see one box does not cut it any longer add another server, you will need a load balancer for this. Adding another server, increases your redundancy. Depending on how valuable this app is and how badly it needs to stay up 2 app servers is a good idea, as well as 2 database servers, 1 primary and 1 follower on stand by. AWS RDS makes that last part easy. Consider caching services Are there intermediate results that can be cached to avoid hitting the database at all? Consider partitioning the databases One replica for update transactions and multiple replicas for read transactions Partitioning vertically, by moving certain columns of tables to a separate db servers. Partitioning horizontally (sharding) by moving certain sets of rows to separate db servers. (For example, profile records for half the users on one server and the other half on another server.) Consider breaking into services Are there separable major bits of functionality that you can carve off into fully independent services, with their own app and db servers #### Next Class * Look at homework: Introduction to Web Services ", "tags": "", "loc": "/content/lectures/part3/02_architecting_for_scale.md/" },

        {"title": "Introduction to Web Services", "text": "Homework due for today Read these articles Dropbox starts using POST and why this is poor API design Best Practices for Designing a Pragmatic RESTful API nanoTwitter Examine the routes that were proposed in nano Twitter Functionality for nT and evaluate them in the context of this reading. Do the [ROUTES] step in the Project Outline: Document in full detail all the routes that you will have to implement for nT, both for the  nT User Interface  and the  Web Services API . For each route (URI pattern) document the pattern, a description, whatever variable values there are (e.g. :email corresponds to the email for the registered user) and whatever status codes may be returned. Team Deliverable: PDF with the API documentation. nT implementation Teams continue working on nT. On Monday you should have the basic functionality working, i.e. up to [SINATRAAPP] Discussion Discuss homework Quick Quiz: What are some of the reasons why a product (like Facebook) would be divided up into  services ? Doing this is sometimes called a service oriented architecture. What is a service? What are some of the motivations for dividing a product into a set of services? HTTP is a protocol used when one computer (the client) has to make a request of another computer (the server). The client makes a request, and the server responds to that request. What are the key parts or elements in the request? What are the key parts of building blocks of the response? Where we left off Architecting for Scale, at  If Queries are a Problem  SOA and REST and Services What is a web service? Consider this web page: Olin College Engineering Courses What would  TeachBack  do if it wanted to have a list of courses pre-populated with a college’s courses? Grab all the text curl http://wikis.olin.edu/coursecatalog/doku.php?id=course_listings:engr > olincourses.txt Write a program to parse that page and then load the results into a database. This is called  scraping  and usually that would violate a copyright Server can also deliver information in  machine readable  formats (such as JSON or XML) The term  API  is used to describe the permissable ways that one program can call another, such as a library Web Service API is when this is between servers on the internet Protocols This can be done with many different standards and formats and protocols SOAP: Simple Object Access Protocol XMLRPC: XML-RPC REST: Representational State Transfer – our focus Discussion: What are some of the big differences between calling a gem’s API and calling a web service API?. Performance? Error handling and recovery? Security? Cost sharing? Pause to look at the big picture Servers on the internet, anywhere, can be called as objects and methods Resources of all kinds can be offered to clients with no coordination The internet becomes a huge, amazing Operating System One level deeper RPC - Remote Procedure Calls Imagine a procedure (method): get_horoscope(date, sign) => String, so for example: get_horoscope( march 22, 2015 ,  aries ) which returns a sentence of text (not html!) I could use it to improve my calendar app to optionally display the user’s horoscope Or, I could use it to create a twitter  robot  to answer a tweet with my horosc What would it mean to call it between two computers? What would it mean to call it between two computers over the internet? How would you approach it? REST - A different way to think about RPC REST based on HTTP: Mini review HTTP Verbs: GET (HEAD), PUT, POST, DELETE. Think of everything in terms of a ‘resource’ that is being manipulated For example, GET means get a representation of the resource marked, e.g. GET http://www.facebook.com/user/pitosalas GET http://www.facebok.com/users GET 0.0.0.0:3000/cards/1.xml Some things are harder to fit with the model What might a horoscope service look like as REST? The ‘resource’ here is a single fortune http://myhoroscope.org/fortunes/1 http://myhoroscope.org/fortunes http://myhoroscope.org/fortunes?date=mar-15-2025,sign=scorpio http://myhoroscope.org/fortunes/random Note fortunes/random, random is not exactly identifying a resource; but close enough. What if caching was done strictly by url? Two advantages: some rhyme or reason on how to build urls and make logical use of url space Different ‘representations’ possible: html and xml, but others too, say csv or video Big one: Standards allow caching in the cloud. But what about ‘random’ case? TTL! Next Class Look at homework: Introduction to Web Services ", "tags": "", "loc": "/content/lectures/part3/03_web_services.md/" },

        {"title": "Review topics", "text": "Homework due for today Study [POODR] Chapter 5. Points to understand: Duck typing. How to use it. How it works. Notice how you need to think pretty carefully about the role of each class in your design to make sure you place a method. Can you explain what Duck typing is? There are almost always multiple classes where a certain bit of functionality could be placed. To be a good designer you have to first become aware of the possibilities and then reason about why it belongs in a certain place. What are some considerations for making that decision? Think about this question: What is Duck typing, and exactly how is it different from Java. Try to answer the question: what specific feature in Java do you not need anymore if you have Duck Typing. Deliverable: Submit a response as a pdf. Explain your reasoning. It’s a tricky question. Complete nT functionality up to [SINATRAAPP]. Work should be done in your Code Portfolio, directory  /nanotwitter . Team Deliverable: Completed nanoTwitter Version 0.1 github URL Discussion Homework Reminder: Please do your coding work in portfolio. For nanotwitter, call the directory nanotwitter. What is Duck Typing? Article Discussion Read this Twitter cuts Meercat from its social graph just as SXSW gets started How did Twitter do that? What is the impact of that change? Why did Twitter do that? Do you agree with what they did? 5 minutes: Read and think on your own about the answers to those questions 5 minutes: disucss with your neighbor Quick Review of Web Services (APIs) in Sinatra Sinatra server returns JSON instead of HTML Client is not a web browser, but another application Purpose is so that one server can provide data/informationto antother even though: The two servers are totally separate pieces of software Potentially written and run by totally separate (competing) companies Look at Sinatra Service Hands On Quick Review of Cloud Deployment on Heroku Look at Cloud Deployment Look at Hands On Heroku for Sinatra POODR Example Look at and examine the sequence of examples from Chapter 5 Static vs. Dynamic Typing Java interfaces are like Classes without method bodies You can only call a method on the right type There is enough information in the text of the program Compile can catch errors and compiled code can be optimized for performance 1interface Animal { 2 3 public void eat(); 4 public void travel(); 5} 6Animal myAnimal = new Dog(); 7myAnimal.eat(); Dynamic Typing Objects determine at run time whether they implement a message (method) Nothing in the syntax of the code limits what is possible at run time Compilation and exection are more tightly connected Opens up new and rich design options (Duck typing, meta programming) Four Rules of Simple Design What are rules like this good for? They condense highly abstract ideas into easier to follow and remember rules of thumb Why do we care about  simple design ? What’s the driving force? Context matters: Are you writing throwaway code or software that someone will rely on? What is  good design ? It’s an aesthetic judgement, in a way According to Sandi Metz, good design is: T.R.U.E. Transparent: The opposite of  clever . Is it easy to understand? Can a programmer anticipate the consquences of a change? Reasonable: How easy is it to make a simple change? Do you have to rewrite a whole class? Simple changes should be simple, and deeper changes should be possible. Usable: One sign of good design is if it shows itself to be usable in new ways for new purposes that were not necessarily apparent originally. Exemplary: Are you proud to show it off? Would you want someone to use your code as an example? Four Rules of Simple Design Tests Pass! Yes, you have to learn how to write tests and make it part of your practice Expresses Intent: Yes, naming matters a lot. Often as or more important than documentation No Duplication (DRY) In the simplest sense, no textual duplication of lines of code More important: No duplication of concepts or knowledge Small Partly YAGNI But also: code paths, classes, test data, examples, abstractions that are no longer used. Reference: Understanding the four rules of Simple Design Book Review Understanding the 4 Rules of Simple Design Next Class Look at homework: OO - Inheritance ", "tags": "", "loc": "/content/lectures/part4/01_review_topics.md/" },

        {"title": "OO - Inheritance", "text": "Homework due for today Study A library for OO thinking. Consider a system to manage a small school’s registration system. There are students, faculty, courses, registrations, semesters and so on. Design a set of CRC cards for that system. Deliverable: Take digital photos of your CRC cards, make sure they are legible, put them into a file with any explanations needed, and export to pdf. Submit it. Read [POODR] Chapter 6. See if you can explain to yourself what she means with  Inheritance is at its core a mechanism for automatic message delegation. It defines a forwarding path for not-understood messages.  Take your time. If you ‘got’ the previous chapter, you saw many places in which a message (=method call) is ‘delegated’ to another class. Do you see the similarity and how delegation is related to inheritance? The antipattern she mentions, putting a ‘type’ field in a class is a very common one. It is likely the first thing you think of. It is a major code smell telling you to look again at your design with the goal of eliminating the type. It’s as bad as having a conditional checking if my class is  Mountain Bike , another major code smell. Study to make sure you understand what she means by  The best way to create an abstract class is by pushing code up from concrete subclasses.  Deliverable: Write down three things that you didn’t understand, and if you undertood it all, then three things you learned. Submit as pdf Teams: You should start working on the deliverable for Monday because it will take some time. Longitudinal Self Assessment Discussion Homework What are the negative consequences of classes that have an instance variable (e.g. @kind_of_bike) to say what variant the class is? How do you spot that pattern. How do you remove it? Compare inheritance and delegation as ways for classes to share behavior Can you say what the  Template Method Pattern  is? Feedback on POST-it notes SCALE If the course had more of a fous on things relating to scale and less things * relating to ruby/sinatra give us more info on scaling. more in depth. more talk about scaling get into the implementation of caching, load testing and making services * faster. I would really like to learn how to use Redis OK I couldnt say I think the course is going well overall like that we can follow along with examples on our own machines and * think its very rewarding i’m not sure :( i have learned a lot in this class and cant think of anything that would be * more rewarding To be honest I have gotten the most out of speaking w Nick  post  class or * outside the class. Sessions describing the structure of assignments * explaining technical aspects greatly improved my understanding. TIME workshops - getting the app done turned out to be very dificult and we * werent able to finish. While I like learning that way having regular * workshops/labs would be great More office hours built in lab time. Early in this course it could be used for workshops; * later in the course for group access to the TAs. The limiting factor for * figuring out this stuff is time. CODING more small coding projects hints for an assingment as an initial push maybe i think maybe more build-up assignments and in class demonstreations before * jumping into nanotwitter. Twitterhack and user-service helped a lot but more * on databases and interacting with data i liked your sinatra persistence example. it was nice to see it gone through * step by step. I think doing this for more concepts, like duck typing for * example, would be nice a few more coding examples relative to the more abstrac theoretical lessons * in the class MISC add answers to deliverables afer the submission deadline review how to use sqlite and postgre For me learning these skills to create web applications is already rewarding * enough. I just have to make sure to try helping with both the HTML and * SInatra parts maybe share some more useful tools and more examples of good code style more heroku guidance no written summary turn-in Inheritence Lets tour the code for Chapter 5 of POODR Refactoring as a tool Here to discover, uncover code sharing opportunities Unusally we don’t attempt refactoring without supporting tests Technically I wouldn’t call this refactoring, I would call this design Liskoff Substitution Principle (!!) Google it, you will see lots of hits Part of the SOLID principles of OO Design (google that too) Code that works correctly with objects of class P should continue to work correcty with objects of class C (where C < P, C ) Or: Code that works correctly with Bicycle should work exactly the same with RoadBike or MountainBike. (Think of the Mechanic doing a  prepare bike ) Here’s my example Inheritance Demo Practice design CRC Cards Work with your neigbor. 10 minutes. Design the CRC cards for: A system to reserve tickets at a venue, dealing with seats being free or assigned, what section they are in, allowing for different venues to have different layouts, representing performances using a venue etc Next Class Look at homework: TDD ", "tags": "", "loc": "/content/lectures/part4/02_oo_inheritance.md/" },

        {"title": "TDD", "text": "Homework due for today Read [POODR] Chapters 8 and 9. Apply what you are learing to the team’s nanoTwitter project. Read Minimalicious testing in Ruby 1.9 with MiniTest Do the assignment in TDD homework. Do it in your portfolio under subdirectory tdd_example. Deliverable: Code in your portolio. Complete nT functionality TESTSUITE, SEEDDATA, CODESHIP and HEROKU. Work should be done in your Code Portfolio, directory /nanotwitter. When complete, submit it to github. Team Deliverable: Completed nanoTwitter Version 0.2 github URL. You should use the same github repo but tag the previous version as 0.1 and the current version of 0.2. (See Git Tagging) REMINDER Your portfolios will be reviewed and graded TODAY for progress. Discussion Everyone go to http://b.socrative.com/login/student/ and go to room  Pito  Question 1: Are you in now Question 2: Are you caught up on the nanoTwitter homework from today? Interactive questions Homework Did you really do TDD? What is the key to it? How did it feel to program in this way? Was it easier, harder, different? Conventions: file names, separating the tests from the code (why?) Loader.io! Testing Intro There are different kinds of testing and why they are important Unit testing: test a small unit of code that has few side effects Integration testing: test a subsystem that has many components End-to-end testing: test the complete system from top to bottom Code Coverage: Seeing how much of your actual code is run during a test or production Performance testing: Checking the speed of your code and there are some other categories NB: Ruby community is especially focused on quality and testing Simplistic Demo TDD demo Money Demo Goal: A Money class represent money in different currencies Allow them to be added and subtracted etc. Look at the test suite Look at TDD Demo Video together Discussion What do  I  do with testing in  real life ? Let’s review some of the options in Minitest Quick Reference Fixtures (and seeds) Intro Data or objects that exist exclusively for testing Sometimes known as test or seed data What is the role of data in developing tests for your application Where are they stored? in memory (i.e. objects and classes) on disk (i.e. files, images, …) in a database (i.e. records in a dbms) When are they created? At  build  time, i.e. putting files in the right directories or adding records to an empty database At  launch  time, i.e. when the app launches it creates the fixtures At  test run time , i.e just before the test needs them Tooling In rails, we have  seeds  and  fixtures  built in In sinatra, just seeds Four Rules of Simple Design What are rules like this good for? They condense highly abstract ideas into easier to follow and remember rules of thumb Why do we care about  simple design ? What’s the driving force? Context matters: Are you writing throwaway code or software that someone will rely on? What is  good design ? It’s an aesthetic judgement, in a way According to Sandi Metz, good design is: T.R.U.E. Transparent: The opposite of  clever . Is it easy to understand? Can a programmer anticipate the consquences of a change? Reasonable: How easy is it to make a simple change? Do you have to rewrite a whole class? Simple changes should be simple, and deeper changes should be possible. Usable: One sign of good design is if it shows itself to be usable in new ways for new purposes that were not necessarily apparent originally. Exemplary: Are you proud to show it off? Would you want someone to use your code as an example? Four Rules of Simple Design Tests Pass! Yes, you have to learn how to write tests and make it part of your practice Expresses Intent: Yes, naming matters a lot. Often as or more important than documentation No Duplication (DRY) In the simplest sense, no textual duplication of lines of code More important: No duplication of concepts or knowledge Small Partly YAGNI But also: code paths, classes, test data, examples, abstractions that are no longer used. Reference: Understanding the four rules of Simple Design Book Review Understanding the 4 Rules of Simple Design Next Class Look at homework: Software Testing ", "tags": "", "loc": "/content/lectures/part4/03_tdd.md/" },

        {"title": "Software Testing", "text": "Homework due for today Reading Should Computer Scientists Experiment More? Can Practitioners neglect theory and Theoreticians neglect practice? They write right stuff Read these three papers. Write a brief reflection (~1 page) summarizing your response key points that these papers. What did you learn? What is the value of formal studeies and research in Computer Science to the overall enterprise of software engineering at scale – if any?  Deliverable: Reflections, as pdf, ~1-2 pages Watch this video The Magic Tricks of Testing Sign up and experiment a little with HireFire. Deliverable: Specifically what does Hirefire do. How exactly could you use Hirefire for your projects? - brief pdf Discussion Where did the word  bug  come from? Load testing of nanoTwitter Load Testing nanoTwitter Evolution of Software Testing - in brief The Original  Bug  found by Grace Hopper Industrial or Manufacturing model Quality Assurance: Make sure that the product we ship works as advertised Factory cranks parts, random sample is sent back to the lab and ‘tested’ Statistics used to deterime whether the quality was at the desired level Software Quality Assurance Realize that software was different Required a detailed functional spec Believed in an adverserial relationship between QA and Development team Written test plans Most testing was manual Automated Analysis as a Computer Science persuit Read code and detect the errors?  Executable  specifications Automatic measures of code complexity to predict location of errors Introduction of test automation Required some rearchitecture of the software Turned the ‘manual’ test plans into something that could be ‘executed’ Beginning of merging of QA with Dev We see that finding a bug early in cycle saves big bucks We see that software can be designed to be testable Titles startreflecting this  Quality Engineer  – QE not QA ‘Testing’ function is integrated into the development team Agile methodology Whole concept of shipping a product begins disappearing Rapid release cycles, even continuous delivery Holy grail is 100% automated testing. Manual testing disappears Agile’s emphasis on refactoring demands finer grained unit tests Present era Contunous testing, integration and testing The notion of a release or a version totally gone Feature switches allow individual features to be released and un-released Cloud computing means that deployment happens to faraway servers Further integration of  operations  into software development: Rise of Devops. Here’s a longer version: History of Software Testing The Context Credit: Some of this is directly quoting POODR Testing and Agile Notion of a ‘release’ is gone Notion of a ‘spec’ is gone Cycles are much faster Automation becomes a requirement Testing and Design Insight (not shared by all) that TDD supports design Insist on looking at the class/module/unit first as a black box that delivers services Good design delays all decisions that can be delayed until further requirements are nailed down. Refactoring is how new requirements are incorporated Good test suites is what gives you the confidence to refactor Testing and Refactoring: Recall: Refactoring is a controlled technique for improving the design of an existing code base. Its essence is applying a series of small behavior-preserving transformations, each of which ‘too small to be worth doing’ So you always should have solid tests before you start refactoring Each small change is verified to not have changed behavior Good Testing/Quality/Testability Fundamental motivation for testing: reduce costs Writing tests should over the lifetime of the code cost less Otherwise it’s not worth doing How does it reduce costs? Breaking it down: Why Test? Finding bugs early Reducing errors Making assumptions explicit - documenting code with code [how do test do that?] Make refactoring possible and safe [how safe?] Driving design decisions (TDD?) Discover bad design decisions [how?] Philosophy of Commenting Believe or not, it’s controversial Comments should not duplicate what the code clearly says Of course,  clearly says  is in the eyes of the beholder One philosophy: If you feel the need to put in a block comment, extract that section into a method with an intention revealing name Four Rules of Simple Design What are rules like this good for? They condense highly abstract ideas into easier to follow and remember rules of thumb Why do we care about  simple design ? What’s the driving force? Context matters: Are you writing throwaway code or software that someone will rely on? What is  good design ? It’s an aesthetic judgement, in a way According to Sandi Metz, good design is: T.R.U.E. Transparent: The opposite of  clever . Is it easy to understand? Can a programmer anticipate the consquences of a change? Reasonable: How easy is it to make a simple change? Do you have to rewrite a whole class? Simple changes should be simple, and deeper changes should be possible. Usable: One sign of good design is if it shows itself to be usable in new ways for new purposes that were not necessarily apparent originally. Exemplary: Are you proud to show it off? Would you want someone to use your code as an example? Four Rules of Simple Design Tests Pass! Yes, you have to learn how to write tests and make it part of your practice Expresses Intent: Yes, naming matters a lot. Often as or more important than documentation No Duplication (DRY) In the simplest sense, no textual duplication of lines of code More important: No duplication of concepts or knowledge Small Partly YAGNI But also: code paths, classes, test data, examples, abstractions that are no longer used. Reference: Understanding the four rules of Simple Design Book Review Understanding the 4 Rules of Simple Design Next Class Look at homework: Design Patterns ", "tags": "", "loc": "/content/lectures/part4/04_testing.md/" },

        {"title": "Design Patterns", "text": "Homework due for today Actively Read/Listen. Submit answers to the questions by midnight before class The Art of Enbugging Book Club: Patterns of Enterprise Application Architecture with Martin Fowler Answer these 3 questions: In what way are the  Tell don’t ask  and the  Law of Demeter  principles related, that is, serving the same more basic purpose? Explain the Active record pattern and how it is related or different from the Data mapper pattern. What 1 or 2 important things from the reading/listening did you not undertand; and if you understood it all, then what 1 or 2 important things were most insightful/useful/valuable to you. Deliverable: BY MIDNIGHT THE NIGHT BEFORE: the answers to these questions, as a pdf, 1 page max Complete nT 0.3 functionality See Nano Twitter Project Outline: LOADTEST, INSTRUMENT, RUNLOADEXPERIMENT and MANUALTEST Of course this assumes that you have fully completed last week’s assignment for nT 0.2 You need to have your loader.io account set up with log ins for all three team members You need to have at least 5 tests in your test suite You need to have Codeship.com configured, and have codeship in turn deploy to heroku Work should be done in your Code Portfolio, directory /nanotwitter. When complete, submit it to github. You should use the same github repo but tag the previous version as 0.2 and the current version of 0.2. (See Git Tagging) Team Interim Report: Write a report describing process so far, and results of initial tests (from your lab notebook). Also nclude the results of Codeclimate run over your github repo. Team Deliverable: Team interim report, 1-2 pages, pdf, including completed nanoTwitter Version 0.3 github URL Demos Each team will be asked to demo their version of nT to the class by having everyone sign up for an account! Reading Discussion Review Law of Demeter (shorthand) Review DataMapper vs. ActiveRecord More about DM Which is simpler Applicability of each What is the entity manager? Terms: PORO: Plain Old Ruby Object aggregate object: Any object that represents a collection of something (e.g. array etc.) Lazy loading (or lazy anything): Delaying actually doing the work until it is specifically required. (Compare to gem ‘eager loading’) side-effect: When a method changes something in it’s environment. Compare: functional, where a method takes inputs and generate outputs but don’t do anything outside of that, ORM: Object Relational Mapper Data Gateway pattern. Building block of a Data Mapper. (See Table Data Gateway Why did some people mention PHP in their responses? Loader.io Record Limit Add your team name and team members to home page of your app Target Verification, something similar to this to apps get '/loaderio-bb5a35bfa0186405c4a48a10d3f67e60/' do  loaderio-bb5a35bfa0186405c4a48a10d3f67e60  end References An example of a data mapper implementation: Perpetuity Gem An example (no guarantees) of DataMapper inside Sinatra: Sinatra DataMapper Example Getting Started with DataMapper Design Patterns Patterns in software (inspired by:A Pattern Language, by Christopher Alexander) Patterns and Anti-patterns Anti-patterns vs. Code smells Why do these buzz words matter anyway?  Meta patterns  or  just good design  Knowledge should be in only one place (DRY) Separate out things that change from those that stay the same Tell don’t ask Prefer composition over inheritance Delay, delay, delay [YAGNI] Examples we’ve already seen MVC, Model View Controller Template class and template method pattern Factory class and factory method pattern REST Pattern ActiveRecord Pattern Service Oriented Architecture What are the Major ones? There are many catalogs Some patterns are ‘language dependent’ e.g. dynamic vs. static typing, method overloading, multiple inheritance Don’t try to memorize them Don’t feel like you are more ‘virtuous’ if you do use them But… DO learn about them and try to use them Some of my favorites Template method pattern: Ruby Design Patterns: The Template Method Factory pattern: Gang of Four Design Patterns: Factory Strategy pattern: Gang of Four Design Patterns: Strategy Builder pattern. My own code for  Coursegen : bootstrap_markup Domain Specific Language Pattern: Writing a DSL in Ruby Delegator + Decorator Pattern: Using Simple Delegator for your Decorators References Design Patterns in Ruby Interesting repo with examples of patterns: Ruby Patterns The original GoF Book, now a little dated IMO: Desing Patterns Next Class Look at homework: Design Patterns ", "tags": "", "loc": "/content/lectures/part4/05_patterns.md/" },

        {"title": "Scaling Patterns", "text": "Homework due for today Watch and Read Watch: Basics of Database Sharding. Quick explanation: Sharding is way to break a database that is getting too big into two (or n). Each is called a  shard , and has the same schema. A certain record is sent to one or the other shard based on some value, e.g. their last name or employee id. Read: 5 Early Lessons from Rapid High Availability Scaling. Don’t be concerned that it mentions  Rails , the lessons are equally applicable (almost) to Sinatra Think about and answer these questions: What is meant by denormalization and what does it has to do with scalability? Can you clarify why the article says that you are screwed if you don’t create an index early? What’s the SSD that is mentioned in the context of the sharing article and why does it matter? What 1 or 2 important things from the reading/listening did you not undertand; and if you understood it all, then what 1 or 2 important things were most insightful/useful/valuable to you. Deliverable: BY MIDNIGHT THE NIGHT BEFORE: the answers to these questions, as a pdf, 1 page max Teams, continue to work on nanoTwitter. This is your primary deliverable at this point. Discussion Points Raised in the reading Multiple questions about denormalization Sharding Why would anyone ever use anything other than Hash lookup How to apply it to nanoTwitter Is it always a good idea? How does consistent hashing even work? Terms Chokepoint Indexing: Note the uniqueness argument too Universal User: What? Some Background Architecting for scale Load Testing nanoTwitter Techniques for Scaling What is scaling? Measuring performance: How many Xs per second? and/orhow long does it take to Y? Analysis Instrumentation (basically logging) Deep thought Identify the bottle neck Action Remove the bottle neck Scalability Pattern: Database Caching Example, Social Graph Classic Relational Approach Schema (like all of you have) People(id, name) Follow(id, follower, following) Nicely normalized First, Second and Third Normal form Origins of the relational database Queries like: How many people are following user X Who is following user Y But to display each and every user, a join is needed! Measurement Ask database system to analyze SQL queries that are slow e.g. heroku pg:outliers Discover that the social graph access was very slow Solution: Caching Use Network scale caching (Redis) to store and share across servers Caching with  Redis  Analogous to other network scale caching solutions (e.g. cached) Typical structure is a key-value store A nosql database. But in memory It has some interesting characteristics ATOMIC operations, e.g.  INCR  operation keys that expire (TTL) Supports other values: lists, sets, hashes And many many more Ruby bindings gem redis-objects Wait, where’s the data actually stored? A redis host, accessible by tcp/ip: dns name + port number You can run it Heroku can run it for you with Redis to go. Nano size is free! In all cases, if the host dies, the data is gone Putting the two together  Store the social graph, denormalized, in a cache  Means, more or less: All user information is stored as before in the relational database In addition, a denormalized copy of the key facts are stored in Redis Redis is accessed Whenever ui needs to show count of followings or followers Whenever a new follow command is issued, it is updated Under certain circumstances, Redis is refreshed with good data Scalability Pattern: Database Partitioning Conflicting definitions When you divide a big database into several smaller ones Partitioning: Horizontal and Vertical Sharding; Horizontal Partitioning What’s the problem? When the database is the bottleneck Add a second database server What to do with the data? Some options Replication: Put a complete copy of the data on the second db server Pay attention to read vs. write What to do about data consistency? Parition Example User Database Happens to often be a monster Lots of records Each record with lots of information Accessed a lot Schema User: (id, name, email, biography, hobbies, college, last_login, encrypted_pw, profile_photo_jpg, …) Vertical partition Often associated with an SOA Divide the User table into three different database servers: User: (id, name, biography, email) Autentication: (id, last_login, encrypted_pw) Photos: (id, profile_photo_jpg) How it changes your application Pretty basic rearchitecture into separate services Sharding (Horizontal partition)  buckets  of users (== shards) How? Create multiple database servers with the same schema different subset or clump of records Need a way to direct requests to the right  shard  inspect something about the record determine what shard to look in Three common flavors to decide what bucket gets a record Range Based: Range of some scalar value (record id, first letter of name, etc.) List Based: Take some other property (e.g. zipcode, department) Hash Based: Compute a hash on some value How it changes your application Whenever you either read, write, or search Require to include enough information to pick the right shard Pros and Cons Joins become a problem What was once one db is now spread over more than one db Can lead to denormalization Data Integrity Foreign keys might now point to another database Databases can get out of sync NB Both kinds of sharding are advanced techniques and you should only use them when you have quantitative reasons to believe they will improve a measured performance issue. References Building Scalable Databases: Pros and Cons of Sharding Next Class Look at homework: Scaling Patterns ", "tags": "", "loc": "/content/lectures/part5/01_scaling_patterns.md/" },

        {"title": "Scaling Patterns", "text": "Homework due for today Complete nT 0.4 functionality See Nano Twitter Project Outline:  Performance Tuning (nt version 0.4)  Of course this assumes that you have fully completed last week’s assignment for nT 0.3 Work should be done in your Code Portfolio, directory /nanotwitter. When complete, submit it to github. You should use the same github repo but tag the previous version as 0.3 and the current version of 0.4. (See Git Tagging) Team Interim Report: Write a report describing process so far, and results of initial tests (from your lab notebook). Team Deliverable: Team interim report, 1-2 pages, pdf, including completed nanoTwitter Version 0.3 github URL Discussions Progress on nanoTwitter Scaling patterns Do more with the available resources Do more things at the same time Resource idle time is your enemy CPU Network Disk Database Scenarios when concurrency is an option Users can ask for a detailed report about their twitter traffic It can be a one shot, or regenerated at midnight It can be displayed on the screen or emailed Inline is no good because of computational cost and error handling Users tweet with attached images Submitted in all kinds of formats, shapes and sizes Need to convert and resize to standard shapes and sizes Inline no good due to computational cost and error handling System sends an email to newly registered users After creating the new user in db, send a confirm email with a link Inline is no good, due to network latency and error handling Concurrency on a single Computer Difference between syncrhonous and asynchronous Difference between concurrent and parallel Processes and Threads Key Operating System facility for concurrency Processes ( forking ) Use more memory (new VM for each process) for the data + the program + everything  Copy on write  Context switching very expensive Communication expensive (IPC or file system) Slower to create and destroy Less hard to program and debug (not easy!) Threads Use less memory (Shared memory space) Context switching cheap Communication cheap (via queues and shared memory) Fast to create and destroy Harder to program and debug Thread-safe A property of software, or a routine or a class Does it behave ‘well’ when running in a thread (sharing memory) Deadlock ( mortal embrace ) Example with two people and two tools Race Condition When the results vary due to How to avoid: using semaphors, queues, and other techniques Ruby GIL Higher level constructs, e.g. Actors (threads that only talk through queues) See Celluloid Actor Based Library for Ruby Demonstrations… Queueing Systems: RabbitMQ Queueing and SOA SOA: Divide software into independent  services  that talk to each other Client: code that needs the service Server: code that implements the service Previously: SOA required REST between servers (‘synchronous’ - why?) Queueing is a fundamentally different way of creating services and concurrency Syncrhonous: Client makes a request (HTTP get) and waits Server Receives request Server does the service, during which client and server are waiting Server sends response Client is free to continue processing Asynchronous Client makes a request (‘Publish’ to a queue) Client can now continue Server picks next item off queue and does the service. When service complete, notifies client to use the result. That’s the theoretical framework RabbitMQ: One of several implementations Runs in a process of it’s own Defines the following terminology Producers: Software that sends messages Consumers: Software that consumes (and processes) messages Queues: FIFO  holding area  for messages Message: A bit of data which often incorporates an action or command Exchange: Receives messages from producers, and sticks them into a queue Acknowledgement: So that if the server dies before finishing, the message gets given to someone else Durability: So that if the Queueing Service dies, the content of the queue survives Demonstration Review the scenarios from before References RabbitMQ Tutorial Rabbit Demo (github) Concurrency and Parallelism Blog Post Ruby Concurrency Exmplained ", "tags": "", "loc": "/content/lectures/part5/02_scaling_patterns_continued.md/" },

        {"title": "Projects Discussion", "text": "Homework due for today Listen to this podcast: Refactoring with Martin Fowler Final Deliverables Individual final programming assignment: Elevator Simulation Assignment is detailed here: Elevator Assignment Team nanoTwitter deliverables nanoTwitter Github Repo nanoTwitter Scalability Tests nanoTwitter Portfolio page Due on  day of the final  How nanoTwitter will be evaluated Quality of the engineering. How is the design, is it broken down into some classes? Is there attention to single responsibility principle and other good design practices? Are the classes and methods reasonably brief. How does the code look? Are there tests and are they being run automatically? Quality of the Scalability. How well does the nT perform under load from loader.io using the specific testing rules that we described. What steps did you take to help it scale better? And what is final result? Fit and Finish. Does the final product look professional and clean? Did you read the requirements (from me) broadly and go beyond the very minimum? Or did you just barely get it to work? Does it look good and show pride of work? Github You will be submitting the github directory with the code in it Include a readme file that documents your design as far as you need to. Make sure to include a  CodeClimate  badge in your readme. How nanoTwitter Scalability will be tested We will be looking at how well your server stands the load There is not a magic number to beat Preparation for testing: Build in a special test user called  test_user  Create a path (/test_reset) which deletes all tweets by test_user and has test_user unfollow all users. This is used between tests to reset. Create a path (/test_tweet) which when visited causes test_user to post a random tweet (use faker or a set string + a timestamp to generate unique tweets). Create a path (/test_follow) which when visited selects a random user and has test_user follow that user or unfollow that user (if test_user currently follows that user, unfollow. If test user_does not follow that user, follow). Create a path (/test_user) that displays test_user’s logged in state page. To be clear, this is not actually logging in, it’s just displaying the page that would happen if test_user was logged in. Test Protocol Show the homepage with 100 most recent tweets Test tweeting Use loader.io to run against /test_tweet and the home page. Test following Use loader.io to run against /test_follow and test_user’s profile page. The profile page should show the 100 most recent tweets only by people test_user follows Porfolio Page Google Sites (or other) Make it look pretty! 2 page web site An  e-brochure  for your project Containing info such as: Summary statement of assignment (1-2 paragraphs) Screenshots Technology Description Interesting Engineering Result of scalability work, timings etc. Team members Dates ", "tags": "", "loc": "/content/lectures/part5/03_projects.md/" },

        {"title": "Review and Discussion", "text": "Homework due for today I would like you to think back about your expectations and hopes about this course before you took it and what you know now. Write up a retrospective blog post thinking about questions such as: To what extent has it lived up to them? How have I changed my views on computer science and software engineers, and what it takes to be one? Do I see a role for myself as an computer scientis, software engineer or entrepreneur in the future? What have I learned about myself as a computer scientist? How have I grown? In what way do I feel better prepared now? In what way have I clarified what I want to do when I graduate? Deliverable: Write up your reflection as a post. Complete nT 0.5 functionality See Nano Twitter Project Outline:  Performance Tuning (nt version 0.4)  Of course this assumes that you have fully completed last week’s assignment for nT 0.4 Work should be done in your Code Portfolio, directory /nanotwitter. When complete, submit it to github. You should use the same github repo but tag the previous version as 0.4 and the current version of 0.5. (See Git Tagging) Team Interim Report: Write a report describing process so far, and results of initial tests (from your lab notebook). Team Deliverable: Team interim report, 1-2 pages, pdf, including completed nanoTwitter Version 0.3 github URL Discussions Update on nanoTwitter Projects Discussion of using Redis, with Nick Review of Elevator programming assignment requirements Reminder: No  finals  meeting! What should we do on last day of class? ", "tags": "", "loc": "/content/lectures/part5/04_review.md/" },

        {"title": "Real World Survival Kit", "text": "Homework due for today Continue Work on Cosi 105 Final Deliverables Discussion Questions about final deliverables or the elevator simulation? Anyone seriously looking for a job or internship? Articles about interpretting loader.io results: Testing Your SLA with Loader and New Relic Insights Dissect my results: What’s this green line doing? Please go to sage and fill in the course evaluation! One last time: Longitudinal Self Assessment Real World Tips: Cliff Notes LinkedIn. How it works. Why to Join Please join now and connect to me. Lets look someone up. Designing your profile People Networking. How to do it. Why it’s important Karma. What you sow is what you reap The  System . 6 months. Keep a list. Know why you want to talk; know why you’d be worth talking to Resumes. Some tips Who looks at them, for how long How does hiring process work Type, color, pages, appearance Career goal; Special qualifications Interviews. Shome tips. Enthusiasm Dress, demeanor: Not what they can do for you; what can you do for them Trick questions: What salary are you looking for and other trick questions Companies Key functions. Titles. Risk factors. Runway. Layoffs. Big vs. Small company Real World Survival Kit. Details and Old ", "tags": "", "loc": "/content/lectures/part5/05_realworld.md/" },

        {"title": "Last Class", "text": "There Shall Be Food Discussion How can the course be improved for the next semester? ", "tags": "", "loc": "/content/lectures/part5/06_conclusion.md/" },

        {"title": "nano Twitter Functionality", "text": "Functionality NanoTwitter (nT) is a baby version of Twitter designed as a platform for experimentation with scaling issues. Note that all the URLs, both for the User Interface and for the Web Services API will attempt to follow REST design principles as far as possible. nT Functionality Users: can register for an account by supplying an email a name and a password are never deleted Logged in users Can follow and unfollow other registered users Can tweet Can see the flow of the last n tweets by the users that they have followed Non-logged in users See the flow of the last n tweets by any user Tweets Consist of a 140 characters of text a date-time of creation Belong to one user Can never be deleted REST Api is provided Retrieve the firehose of all tweets by all users Retrieve the firehose for one specific user nT User Interface Very basic bootstrappy html interface Non-logged-in root page (/) Login link (/login) Register for account link (/user/register) List of the most recent 50 tweets, with link to tweeter’s page Logged-in root page (/) Logout link (/logout) Box to submit a tweet (/tweet) List of most recent ‘n’ tweets, with link to the tweeter’s page Specific user’s page (/user/name or /user/1234) List of users tweets Button to follow that user (available only if logged in) If this is logged in users page, then also ability to tweet (i.e. equiv to /) Users’ own profile page (/user/profile) Only when logged in, only for yourself Your name, email List of followed users nT Web Services API REST-y API All paths start with /api/v1 /tweets/23 - return tweet with id /users/23 - return user information for user 23 /tweets/recent - return the recent n tweets /users/23/tweets - return the users recent tweets Values as JSON Tweet: {  id : 123,  text : foobar,  created : jan-11-2015 } User: { id : name : Pito Salas} List of tweets: \[<tweet>, <tweet>,...\] Follow list: \[ user_id : 22,  user_id : 23, ...\] New for Fall 2015 /user/name or /user/1234, has profile info link to followed users (/user/x/follows) Link to users own tweets (/user/x/tweets) Test Interface /test/reset if needed creates a new test user called  testuser  if needed deletes all tweets that the  testuser  ever created if needed delets all follows of the  testuser  /test/tweets/1234 user testuser genereates 1234 new fake tweets /test/follow/1234 1234 randomly selected users follow user 1234 ", "tags": "", "loc": "/content/nt/01_nt_functionality.md/" },

        {"title": "NT Design and Architecture", "text": "nanoTwitter Design and Architecture The objective of the NT project is to give students hands-on experience designing a simple system which will expose and exercise issues of scale. Architecture The  spec  for NanoTwitter doesn’t dictate anything about the architecture other than it be reached via a url. It has two kinds of access, through a web browser (for human access) and as a REST service (for access from other applications). Deployment NT will be deployed as a service in the cloud. Our base case is to use Heroku but again there are other variations that are possible which are equally valid. Language and framework The base case would be to implement NT using Ruby and Sinatra. We will cover those in the class. But there are other languages and platforms that could be used as easily, for example Node.js with Express. There are others. We will discuss this possibility in class. Testing The NT code will have automated unit test that can be run at will to check for new bugs. The base case will be to use ruby’s minitest package. Logging and performance The NT code will need to incporate instrumentation to be able to monitor its performance and detect bottlenecks and other problems. The base case will be to use newrelic. ", "tags": "", "loc": "/content/nt/02_nt_arch.md/" },

        {"title": "Nano Twitter Project Outline", "text": "Approximate Recipe Each step in this recipe has a name which I use to refer to it elsehwee in this course. Foundation (nT version 0.1) [DBSCHEMA] Design relational database schema (i.e. one for the whole app.) Decide what tables you will have, what the attributes (columns) are for each table, and what the associations are (i.e. one to many, many to one, many to many.) [HTMLUI] Design html, forms, and user interface. Start with a paper sketch for each page. Remember to note where there are links and buttons, and what the various text boxes are. You may use a tool like Balsamiq.com as well. No need to immitate the real twitter. Do whatever you want but make sure the User Interface functionality that is listed in nano Twitter Functionality is covered. [ROUTES] Before coding up the sinatra app, sit down and design all urls that you will have to implement in the code. nano Twitter Functionality gives you the outline, but here you need to describe all of them. Do this before you code. [SINATRAAPP] nanoTwitter version 0.1: Implement Sinatra front end application for ui. Use ActiveRecord and Sqlite3 for development (local) db. You will use the sketches from [HTMLUI] to implement .html.erb files that in a view directory to display the views. Later when you deploy to heroku you will enable Postgress for your production (heroku) db. You should have all the functionality working described as  nT User Interface  in nano Twitter Functionality Testing and Deployment (nT version 0.2) [TESTSUITE] Write complete set of unit tests with automation. Also include a few integration tests. You should have at least 5 tests! [SEEDDATA] Implement a large body of seed data with automation. For each table in your database you want to populate it with real looking data. You can use the faker gem to give you real looking data. [CODESHIP] Deploy to Codeship for automatic running of tests [HEROKU] Have Codeship deploy to Heroku. Make sure tests still run. [MANUALTEST] Once nT is up on heroku, try having all three team members log into it at the same time and do some tweeting. Inital Load Testing (nT version 0.3) Here are important instructions: Load Testing nanoTwitter [LOADTEST] Investigate and choose a way to load test your app. Use loader.io. Configure your app and heroky accordingly. [INSTRUMENT]Investigate and choose a way to instrument your test app. Use new relic. Configure your app and heroku accordingly. [RUNLOADEXPERIMENT]Design and run a series of load tests and write a report of your findings Performance Tuning (nt version 0.4) [IMPROVESCHEMA]Update your schema to put indeces and other enhancements and see the effect on scaling [NEWWEB] Switch web server from WebBrick; try others, measure. [SWAPDATABASE]Try different databases (Mongo or others) and see the effect on scaling [SCALEEXPERIMENT]Design and execute scaling experiments and see the differences Advanced Scaling (nt version 0.5) [REDIS] Investigate and figure out how to setup a Redis Caching service [CACHING]Consider where to add caching and do some more experiments to see how [UIBOOTSTRAP] Revise user interface to make it pretty, using Bootstrap [SCALEEXPERIMENT]Design and execute scaling experiments and see the differences Not Required Web Service API and Client (nt version 0.6) [Not Required] [APIROUTES]Go back to the beginning Design external API urls. Implement them as further Sinatra routes. [CLIENTLIB]Write client libraries for your APIs. [CLIENTLIBTEST]Write a complete set of tests for them ", "tags": "", "loc": "/content/nt/03_nt_outline.md/" },

        {"title": "Aggregated Twitter Bibliography", "text": "Twitter’s Architecture Twitter: From Ruby on Rails to the JVM Real Time Delivery Architecture at Twitter Timelines at Scale Scaling Rare peek into the massive scale of AWS ", "tags": "", "loc": "/content/nt/04_references.md/" },

        {"title": "Data Modeling", "text": "Data Modeling Background What does the term ‘Data Modeling’ mean? How Relational Databases work Tables, Columns, Databases, Joins  3d Normal Form  Different approaches Key question is how you correlate the tables in a database with the attributes of a class Data Modeling Crucial step in design SQL vs. NOSQL databases SQL Databases Schema Tables Fields Joins Relationships One to One (Student <-> Transcript) One to Many (Student -> Car) Many to Many (Student <-> Courses) Careful analysis of the product requirements Exercise Team up with one other person Design the data model for a music library management application like iTunes 15 Minutes, ask questions Steps What are the entities? Is something contained in something else? How many X’s are there for each Y? What kinds of facts do we need to know about each entity? What are the datatypes of those facts? Are there any ‘arrays’? Possibly identify other entities Repeat until done ", "tags": "", "loc": "/content/topics/arch/data_modeling.md/" },

        {"title": "Database Migration", "text": "  If you don’t know the schema of your app, you don’t know your app  - Said one of our outside reviewers over lunch today ORM means we have to keep the database and the Objects  in sync  What happens if in release 2 I have to modify the database? Migration When you discover you need a new column or table, you can modify the database E.g.break the  name  field into a  first name  and  last name  Data Migration How do I move over all the user records that were already there? Logic Migration What has to change in the server code to accomodate this change? Does this mean that migration is bad? It’s not good nor bad: it’s unavoidable It’s much more painful when you are ‘in production’ ", "tags": "", "loc": "/content/topics/arch/database_migration.md/" },

        {"title": "The classic Duck Typing Example", "text": " 1class Duck 2 def talk 3 'Quack!' 4 end 5 6 def swim 7 'Paddle paddle paddle...' 8 end 9end 10 11class Goose 12 def talk 13 'Honk!' 14 end 15 def swim 16 'Splash splash splash...' 17 end 18end 19 20class Student 21 def talk 22  Hello!  23 end 24 25 def walk 26 'Step, Step, Step' 27 end 28end 29 30 31s = Student.new 32g = Goose.new 33d = Duck.new 34 35def make_it_talk(x) 36 x.talk 37end 38 39make_it_talk(s) 40make_it_talk(g) 41make_it_talk(d) 42 ", "tags": "", "loc": "/content/topics/arch/duck_typing.md/" },

        {"title": "Four Rules of Simple Design", "text": "Four Rules of Simple Design What are rules like this good for? They condense highly abstract ideas into easier to follow and remember rules of thumb Why do we care about  simple design ? What’s the driving force? Context matters: Are you writing throwaway code or software that someone will rely on? What is  good design ? It’s an aesthetic judgement, in a way According to Sandi Metz, good design is: T.R.U.E. Transparent: The opposite of  clever . Is it easy to understand? Can a programmer anticipate the consquences of a change? Reasonable: How easy is it to make a simple change? Do you have to rewrite a whole class? Simple changes should be simple, and deeper changes should be possible. Usable: One sign of good design is if it shows itself to be usable in new ways for new purposes that were not necessarily apparent originally. Exemplary: Are you proud to show it off? Would you want someone to use your code as an example? Four Rules of Simple Design Tests Pass! Yes, you have to learn how to write tests and make it part of your practice Expresses Intent: Yes, naming matters a lot. Often as or more important than documentation No Duplication (DRY) In the simplest sense, no textual duplication of lines of code More important: No duplication of concepts or knowledge Small Partly YAGNI But also: code paths, classes, test data, examples, abstractions that are no longer used. Reference: Understanding the four rules of Simple Design Book Review Understanding the 4 Rules of Simple Design ", "tags": "", "loc": "/content/topics/arch/four_rules_simple_design.md/" },

        {"title": "How web servers work", "text": "How a web server works Review of some basic concepts Client and Server Client asks for a page; server sends a page Web server receives the request and creates the page and sends it back A level deeper: Server (usually) looks inside a database for information And runs an algorithm on that to create the output And that’s what gets sent back. ", "tags": "", "loc": "/content/topics/arch/how_web_servers_work.md/" },

        {"title": "Internet Technology Basics", "text": "Clients and Servers Both are computers, depends on their purpose Networking’s purpose is to get ‘data’ from one to the other …. even when they are on the other side of the world Take a look at $ ping salas.com $ traceroute salas.com $ open http://map-on-net.com Basic Terms MAC address: Media Access Controll address IP Address: Internet Protocol Address Domain name: brandeis.edu DNS: DOmain Name System MAC addresses, IP addresses and DNS User types in a domain name Target computer is identified by a MAC address So: Need a phonebook of some kind DNS: distributed name service Also take a look at $ open http://map-o-net.com/ $ open http://icicle.dylex.net/~ipmap/ More about IP So the IP address is for 1 specific ‘host’ or server (as usual there are exceptions :) IP is the way servers talk ‘to each other’ to get a packet of bits between them Conceptually, ‘send these bits to this ip address’ What’s a port number TCP/IP: what it means ", "tags": "", "loc": "/content/topics/arch/internet_basics.md/" },

        {"title": "intro_auth", "text": " Beware: this is hairy Authentication: As an app runs, need to know  who is logged in  Authorization: For anyone who is logged in: What is s/he allowed to do Key Concepts True of more or less any approach to authorization and authentication User record There is some kind of User record corresponding to User is designated internally by a User (or Account, or similar concept) A globally accessible method  current_user  Can be called anywhere to see who is logged in Decide what it returns if no-one is logged in For Authorization, some choices: Access control lists: List of people who are allowed to do operation X User Capabilities: Each user has a series of CAN_xxx flags in the user database User Types: Admin, Operator, Guest, etc. Complications that have to be considered What does the product do when user is not logged in? Sometimes you have an artificial ( seed ) user to be the non-logged-in user How to store the password Never ever in free text At minimum hashed Dealing with Social Media log in Facebook Google What to use for user id A made up id (pitosalas) or just an email (pitosalas@gmail.com) Mechanics Authentication support has to: Present a log in page Present a account creation page Check the  credentials  Make the identity of the logged in user ‘globally available’ within your app What is the ‘identify of the logged in user?’, it’s just a method called ‘logged_in_user’ that when called returns an instance of the User model. But should not: Decide what operations that user may do or not. Conceptually and architecturally, should be kept separately Store the user’s password in a database. How do you authenticate then? Authorization Can  the currently logged in user  do this operation? Often implemented with a list of  user types  (e.g. admin, professor, student) And with a list of  operation types  (e.g.  administration ,  read-write ,  read-only ) Guard code in each controller/action ", "tags": "", "loc": "/content/topics/arch/intro_auth.md/" },

        {"title": "Mobile - architectural considerations", "text": "##### Mobile Architectures Most of the concerns we talked about for web and cloud apply almost equally for mobile, with the major addition of communications: * What kind of information needs to be sent between mobile app and server? * Characteristics: * How much of it is there? * How fast does it have to go? * What is acceptable latency? * Firewalls * Are there likely to be firewalls in the way? * Does the client have to reach the server, or vice versa or both? * Protocols * Commonplace today is  REST  over  HTTP . * But all is changing all the time! * Security * Authentication * Authorization ", "tags": "", "loc": "" },

        {"title": "Mobile Architectures", "text": "Taxonomy of mobile applications Depending on need, mobile apps can be structured quite differently Untethered App Example: Angry Birds game Server: never or rarely requires one UI paradigm: must be a Local App Difficulty: Can be the easiest, although there are super complex and rich games Mobile Only App Example: Instagram Server: requires your own server, with intermittent or constant connection UI paradigm: local App by definition. There is no user interface for the ‘server’ or ‘service’ Difficulty: Significant challenge to provide all the functionality over limited device. Pure web-ui Example: GMail application on iPhone Server: requires your own server, and connected all the time UI paradigm: web based UI, by definition Difficulty: You save a lot of trouble by not having to develop local app. Much less mobile platform dependence Mobile front end to rich web app Example: Facebook app on iPhone and Android Server: your own server, providing it’s own user experience, plus a connection to the mobile app UI paradigm: Looks like a native app, often is a hybrid Difficulty: One of the most difficult. You need to design two separate and complete user experiences n.b. there other permutations but this scheme catches most of the major cases. n.b 2. the acceptable and popular approaches are constantly evolving based on user expectation and available tools and platforms ", "tags": "", "loc": "/content/topics/arch/mobile_architectures.md/" },

        {"title": "Models", "text": "Models Term comes from  MVC  - model, view, controller Model is a concept describing a subsystem or part of your overall application Often it is a collection of Classes (ruby or otherwise) What does the Model do? It encapsulates the application state It responds to queries about the state and requests to update the state It validates those requests to keep the state consistent It contains (almost) no  business logic  It doesn’t interact directly with the user or the outside world Where does the model keep the state Most often in a database but not always ", "tags": "", "loc": "/content/topics/arch/models.md/" },

        {"title": "Model View Controller - review", "text": "Model-View-Controller Review http://www.brandeis.edu/index.html Reminder: Basic Client <-> Server structure MVC is a general pattern Here we are applying it to a web (http) server The Models: contains the application ‘state’ Think of it as what you want preserved if your app (i.e. the server in our case) has to be restarted Think of your user’s reasonable expectations Discussion The Controllers: master control switch Sees requests from the outside world Asks the models for data, sometimes updates the data Asks the views for new pages or results Responds to the request (Note: this parallels the HTTP protocol exactly!) The Views Use data (given by the controller) To create and assemble responses to be sent Responses are html, but may be other formats too ", "tags": "", "loc": "/content/topics/arch/mvc_review.md/" },

        {"title": "NoSql and MongoDB", "text": "Definitions NoSQL databases: Don’t have tables, columns, or SQL Don’t have records and views! NoSQL databases Have documents Notes: SQL database world is far more mature: reliable, scalable, deployable NoSQL database is still quite young Terminology is still in flux Traditional databases, e.g. Postgress, are starting to build in nosql-like features Future is not totally clear When to consider NoSQL databases When the rigid schema becomes a problem Classic example: When a user profile has a multitude of optional collection of properties. Terminology (MongdoDB) Collection: A collection in mongodb is same as a table in mysql or oracle. Document: A document in mongodb is same as a row or record in any rdbms. JSON: Javascript Object Notation is a data-interchange format. It is easy for humans to read/write and also for machines to parse/generate. Key/value pair: ex:  name  :  nosql  :Here  name  is the key and  nosql  is the value. References Linkedin Data Infrastructure The State of NoSQL in 2012 Ruby Mongodb Tutorial Mongo GUI Tool Mongo Demo Ruby Code ", "tags": "", "loc": "/content/topics/arch/nosql_mongodb.md/" },

        {"title": "Object Oriented Concepts", "text": "What is software design? In software,  arranging code in a particular way  YAGNI principle vs. BDOF Finding the balance: effort and care proportional to cost over time! Patterns Patterns in software (inspired by:A Pattern Language, by Christopher Alexander) Where do these ideas come from? Classes Classes: How do you decide what a class is and what it is not? What is the domain or the problem space or the problem domain? Look for Nouns Use  CRC Cards  Note: SRP: Single Responsibility Principle Ask yourself:  What does this class represemt/do  Objects Classes and objects are different! Instance variables Constructor (no destructor in Ruby!) Methods: private/public Polymorphism When the same interface can be used with objects of different classes Example: In ruby, message #to_s can be sent to objects of different classes Why is it useful? Ways to achieve this: Inheritance  Duck  Typing  Duck  typing. Don’t rely on the class/type of a thing to know what it can do Reverse it: based on what it can do, you can tell the type of a thing. How is duck typing is an alternative/complement to inheritence? And what about Java interfaces? Consider a method like #talk in a gaming application Here’s The classic Duck Typing Example Inheritance inheritence: rarely is this the best solution composition and delegation: a better solution ", "tags": "", "loc": "/content/topics/arch/oo_design.md/" },

        {"title": "Refactoring", "text": " Look at this article: Refactoring Techiniques ", "tags": "", "loc": "/content/topics/arch/refactoring.md/" },

        {"title": "Regular Expressions", "text": " Regexp Cheatsheat Text pattern matching Used many places Ruby: (1.methods.map(&:to_s).grep(/.*sp.*/)) Shell: (find . -regex .*st\[^/\]*) … all over the place Rubular. See: Puzzle – Write a regex that will match: pit, spot, spate, slap two, respite but reject: pt, Pot, peat, part Puzzle – Write a single regex that matches all of these <xml> <opentag> <closetag> </closetag> <with attribute= 77 > Regexp for a valid email address is: \b\[A-Z0-9._%+-\]+@\[A-Z0-9.-\]+\.\[A-Z\]{2,4}\b Let’s try and test it and find flaws in it And interpret it Ref: All about email regex ", "tags": "", "loc": "/content/topics/arch/regexp.md/" },

        {"title": "Sesions", "text": " Web Server is stateless Discussion: What does that mean exactly? Sessions: a general concept tying ‘state’ from one request to the next Examples: who is logged in, what is in their cart, what product they want, etc. A set of name-value pairs, whatever you need them to be Where is session stored? Cookies Fast and simple Limit on size On server Still requires a ‘session_id’ of some kind Indexed into a database of session state What should be stored in a session? Anything. But remember it’s just a bit of text! Don’t store objects. Store ids. Security Session hijack attack Decrypting cookies Rails options session_store = :cookie_store session_store = :active_record_store session_store = :mem_cache_store Formdemo, again! add gem 'activerecord-session_store' to gemfile $ rails generate active_record:session_migration $ rake db:migrate In initializers/session_store.rb: Rails.application.config.session_store :active_record_store ", "tags": "", "loc": "/content/topics/arch/sessions.md/" },

        {"title": "World Wide Web", "text": "The World Wide Web Understanding this is critical! Use Telnet to experiment with TCP/IP TCP/IP sends and receives ‘text’ protocols Telnet utility command line indicates the target host and port Then you can type in the messages What happens if I don’t specify port 80? telnet example.com 80 GET /index.html HTTP/1.1 Host: www.example.com Use an app to visualize HTTP Mac only: Rested Other platforms: rest-client Mac version of rest-client Review: What does TCP/IP do? Sends a ‘message’ from one computer to another (often message is text) Destination computer is designated by a host or domain name Destination within the computer is designated by a port number The format or Interpretation of the ‘message’ is determined by the port Usually port 80 messages are interpreted as HTTP Review: What does HTTP do? Expects a  request  message which is answered by a  response  Request message Defines a  method  Defines the  path  Supplies information about the format and lots of other stuff Response message Defines a status code Defines format of the response Defines the response body Review: How is the URL processed? URL: http://www.salas.com:80/toplevel?catalog=cosi goes: http -> use http protocol :80 -> over port 80 -> method is implictly GET www.salas.com -> host www.salas.com /toplevel -> the path Params -> catalog =  cosi  ", "tags": "", "loc": "/content/topics/arch/www.md/" },

        {"title": "Web Formats and Protocols", "text": "", "tags": "", "loc": "/content/topics/arch/www_formats_protocols.md/" },

        {"title": "Obamacare Website disaster", "text": " ", "tags": "", "loc": "/content/topics/cases/insurance_website_fail.md/" },

        {"title": "Cosi 105 Final Deliverables", "text": "Final Deliverables Individual final programming assignment: Elevator Simulation Assignment is detailed here: Elevator Assignment Team nanoTwitter deliverables nanoTwitter Github Repo nanoTwitter Scalability Tests nanoTwitter Portfolio page Due on  day of the final  How nanoTwitter will be evaluated Quality of the engineering. How is the design, is it broken down into some classes? Is there attention to single responsibility principle and other good design practices? Are the classes and methods reasonably brief. How does the code look? Are there tests and are they being run automatically? Quality of the Scalability. How well does the nT perform under load from loader.io using the specific testing rules that we described. What steps did you take to help it scale better? And what is final result? Fit and Finish. Does the final product look professional and clean? Did you read the requirements (from me) broadly and go beyond the very minimum? Or did you just barely get it to work? Does it look good and show pride of work? Github You will be submitting the github directory with the code in it Include a readme file that documents your design as far as you need to. Make sure to include a  CodeClimate  badge in your readme. How nanoTwitter Scalability will be tested We will be looking at how well your server stands the load There is not a magic number to beat Preparation for testing: Build in a special test user called  test_user  Create a path (/test_reset) which deletes all tweets by test_user and has test_user unfollow all users. This is used between tests to reset. Create a path (/test_tweet) which when visited causes test_user to post a random tweet (use faker or a set string + a timestamp to generate unique tweets). Create a path (/test_follow) which when visited selects a random user and has test_user follow that user or unfollow that user (if test_user currently follows that user, unfollow. If test user_does not follow that user, follow). Create a path (/test_user) that displays test_user’s logged in state page. To be clear, this is not actually logging in, it’s just displaying the page that would happen if test_user was logged in. Test Protocol Show the homepage with 100 most recent tweets Test tweeting Use loader.io to run against /test_tweet and the home page. Test following Use loader.io to run against /test_follow and test_user’s profile page. The profile page should show the 100 most recent tweets only by people test_user follows Porfolio Page Google Sites (or other) Make it look pretty! 2 page web site An  e-brochure  for your project Containing info such as: Summary statement of assignment (1-2 paragraphs) Screenshots Technology Description Interesting Engineering Result of scalability work, timings etc. Team members Dates ", "tags": "", "loc": "/content/topics/courses/cs105/final_105_deliverables.md/" },

        {"title": "Founding a company", "text": "Homework due for today Talking to real life entrepreneurs. I would like you to interview a real entrepreneur that founded a company. Not just anyone who says that they are an entrepreneur but who actually is in the founding team. I prefer it to be face to face, but telephone or email is also acceptable. Many of you might know family members or aquantances who are founders or know people who know. You can also ask me and/or use LinkedIn. Try to get answers to questions such as these(use your own words): What was your first job after your education, and at what point did you know that you wanted to be an entrepreneur? Also, how did you go from wanting to be an entrepreneur to actually starting the company? How did the company develop? How was it successful, how was it not successful? What did you personally do in each scenario? Have you started other companies, and how did they go in comparison? What are some of the personal traits, talents, skills or knowledge, that have served you well as a founder? What is the mistake you feel is made often in founding a company? Deliverable: Write a 1-2 page report on your interview. Try to distill out some lessons. Include a section with your own personal reflection on what it means to be an entrepreneur, and how you yourself see your entrepreneurship. Financing scenarios Feb 2013: Chris is a senior in college, and has a great idea for a product, and spends senior year (spring term) working many hours refining the idea into a mockup. Senioritis, you know? Many discussions with other students improves and refines the idea. May 2013: Chris’ friend Dana is interested in helping on the product. It turns out that Dana has experience from courses and also hacking on the side, and knows just how to build a working prototype. It becomes a practically full time obsession for the two of them, and together Chris and Dana continue to refine the project and get feedback. During the summer and fall, Dana writes a lot of software, which is a central part of the project. Jan 2014: Dana and Chris realize that they have a knowledge gap. Chris is the product visionary with strong technical chops. Dana is the hands-on coder and has developed a majority of the code. However to be able to pay the bills they decide that they need to raise money and to have more business expertise. They have no clue how to do this, but a friend of a friend introduces them to Alex. They really hit it off with Alex, who is very experienced, has been involved in a startup before and knows several angels very well. Questions to discuss. There are no correct answers. Imagine yourself in the actual situation and ask yourself what your position would be and how you would defend it: When do you think is the right time to start thinking about incorporating, realistically, and why? When do you think the three individuals should assign a ‘title’ to themselves, 1. what titles would you suggest, and why? Who do you think may legitimately call themselves a  founder , a  co-founder , or just an  early member of the team  and why? What is a fair way to allot ‘ownership’ to the three individuals and why? Company Founding Incorporation When is it a good idea What are the key reasons forcing the decision? Types of corporations Founding team What is a founder and why does it matter?  Can I be a founder too?  Equity How to divide up the pie Stock options and the option pool Why it exists and how it works Vesting Percentages Building a company Hiring Who should be on the founding team? interviewing How fast do you hire? What do you look for? How do you decide? Company Culture Titles Salaries - how much? Giving feedback Fairness Benefits Offices, office space, remote work, dogs Secrecy/Confidentiality When things go wrong Firing Layoffs Legal issues Lawsuits ", "tags": "", "loc": "/content/topics/courses/cs165/lectures/cosi165/04_founding_company.md/" },

        {"title": "Getting Funding", "text": "Homework due for today Teams, work on your final deliverables! Story How I came to found eRoom Technology Funding Models Different Funding Models Friends and Family Consulting/Work on the side Angels - Individuals or in groups (e.g. Walnut or Common Angels) Venture Capital - Organized as funds - two sided (e.g. North Bridge or NEA) Incubators/Seed funding companies (e.g. Y-Combinator or TechStars) Crowdfunding (Banks) Reference: Different Kinds of Investors Venture Capital What is the process Rounds of investment How valuation changes Term sheets Liquidation preferences will turn your hair grey. Ideal First Round Funding Terms Sequence of events Founders have an idea - investors have money It’s a contract between founders and investors Result is a new corporation owned partially by founder and partially by investors Look at eRoom term sheet. Rounds of financing What is a round How does it end? Liquidity Event Seed/Angel, A-Round, B-Round, … IPO or Acquisition* Let’s work an example on the whiteboard What you negotiate over Valuation and Investment amount are the key parameters How term sheets turn into  deals  What’s a seed deal? Should you or shouldn’t you? What are VC firms really? General and Limited Partners Why do people love/hate vcs? ", "tags": "", "loc": "/content/topics/courses/cs165/lectures/cosi165/05_vc_angels_crowdfunding.md/" },

        {"title": "Cosi 166 Final Deliverables", "text": "General This is not a marketing or selling course. In each of the deliverables, make sure there’s a dose of technical info about: The architecture The key technologies used The interesting technical parts of the product Examples: background processing, two factor authentication, using of web services, real time processing, complicated or hairy databases, use of mapping or GPS, use of voice, using packages outside of the usuall ruby on rails universe, interesting computer science algorithms, etc… Logistics of Product Showcase Date: Wed May 6 at 1:30pm There will be 6 Product Reviewers Each team will have 15 minutes, 10 for presentation, 5 for questions Demo This is part of the presentation, near the beginning. So do the demo around the 2nd or 3d slide. Then after the demo do the rest of the presentation. Take around 5-7 minutes to demo your product. By now, you should be able to demonstrate your product! Yes there may be bugs and uglyness which you will have a week to fix You do need to work on a demo ‘script’ The best demo scripts tell a bit of a story where you try to ‘hook’ the listener with a scenario that they recognize Presentation Logistics Should be Powerpoint, Google Presentation or whatever you prefer. (Prezo sometimes makes people dizzy) All members of the team will be part of the presentation. Not all students need to talk equal amounts. You should practice it at least once Demo is part of the presentation, but very close to the start Ideas on what to cover - no need to cover each and every one What does the product do What’s interesting technically What interesting Cosi concepts or algorithms? What specific problem does it solve, for who? Where can it be improved or expanded? How would a customer deploy or adopt it? Preliminary ideas on how it might make money Conclusion Project Portfolio Page A single page web site, using Google Sites or something else you prefer. Objective is to showcase the results of your project You might cover What the purpose of the product is, what kind of user would want it, and what it’s functionality is. Technologies used, beyond just RoR. What new and unusual tools, services, languages, and so on. Interesting Engineering, how did you go beyond a vanilla web app and have to confront some engineering challenges Iclude at least one screenshot and also a diagram of the architecture Include names and emails of the team members ", "tags": "", "loc": "/content/topics/courses/cs166/cs_166_final_deliverables.md/" },

        {"title": "PR Meeting Preparation", "text": "Preparation You are the hosts. I will be teaching Don’t make the invited guests wait! Decide between the teams the order of the meetings This is a review meeting not a presentation or pitch Team should decide how the meeting is run Make notes and especially action items from PR Think through Meeting agenda What do you want to present? What questions and advice you would like from your reviewer? Things to bring to the meeting Whatever the PR has asked you to prepare (if anything.) New and improved one page summary of the product Your github repo with what you have so far Should have at least SOME unit tests Should have the full schema represented You should have it deployed to Heroku Final diagram of db schema Make sure one of youcan explain it and answer any and all questions about it. Use any format or tool you like Paper Prototype Include multiple single screens Include a UX Flow map Trello list of stories, prioritized Running the meeting Look at this as a  product review meeting  you might have with the CEO or CTO of your company. See also BillG Review The meeting will go around 45 minutes. Make the most of it. The team should lead the discussion to decide what to cover next. It’s kind of like when you go to the doctor, they ask you,  So what brings you here.  You decide how to use the time. ", "tags": "", "loc": "/content/topics/courses/cs166/logistics/pr_meeting_org.md/" },

        {"title": "Rails Activerecord Queries", "text": " 1# Simple queries return collections of instances 2 Article.find(3) # id=3 3 Article.w­her­e(a­uthor: 'admin') 4 Article.where( likes_count = ? , value_for_count) 5 Article.f­ind­_by­(title: 'Rails 4', author: 'admin') 6 Article.find_or_create_by(title: 'Beatles') 7 8# Working with collections 9 Article.where(author: 'pito').last # choosing 10 Article.where(author: 'pito').order(created_at: :desc) # sorting 11 12# Working with associated Models 13article = Article.comments.where(author: 'georg') 14 ", "tags": "", "loc": "/content/topics/cribsheets/activerecord_queries.md/" },

        {"title": "Automatic Code Reviews", "text": "Background Automatic feedback on your code quality is a very nice thing. It can take the place of perhaps, but certainly supplement programmer to programmer code reviews. They produce useful insights, but you will often disagree with their claim. Don’t fall into the trap of believing that you have to keep struggling until you get all A’s from any of these tools. Form your own opinion and realize that it’s ok to vehemently disagree with their reports! Nice Code Analyzers Code Climate - A web site that constantly monitors your github repository and tells you in nice graphical reports how your code is. It even gives you a fun grade. Free for public repositories. Sandi Meter - Install locally as a gem. Performs a very limited (but quite revealing) check against the Sandi Metz 4 rules. I like this one because its very focused and with a simle check will catch many ugly programming habits. Reek - Install locally as a gem. Focused more on the so-called code smells. Now other than a handfull there’s no universally agreed upon smells. Here is the List of Smells that this package picks up. Here is an Exhausive List of Smell Related Links RuboCop - Install locally as a gem. Will analyze your code with a long, somewhat exessive list of  cops  and makes reports in different ways. ", "tags": "", "loc": "/content/topics/cribsheets/code_analysis.md/" },

        {"title": "DB datatypes for Rails 4", "text": " binary boolean date datetime decimal float integer primary_key references string text time timestamp ", "tags": "", "loc": "/content/topics/cribsheets/db_types.md/" },

        {"title": "ERB Cribsheet", "text": "Intro to ERB  Embedded Ruby  One of a class of ‘template languages’ There are many They do a simple job (used to be called  mail merge ) What it does Erb file without any `` blocks remains unchanged `` must contain legal ruby code Let’s look at ErbDemo The code between the angle brackets is evaluated. *And only in the case of `` it’s inserted into the resulting text ", "tags": "", "loc": "/content/topics/cribsheets/erb_crib.md/" },

        {"title": "Git and Github", "text": "What is git? Git is a version control system that keeps track of changes to files, so that you can have a history of all the changes made to a file and you can revert to a specific version later on. Here are some features of Git: Keep separate branches of development Rollback to a previous version if a bug was found Different versions for development and deployment; the deployment version should be a stable one Merging branches into one branch … Recommended local directory structure: ~/mydev /pa1 /pa2 /project1 /etc. ... Top 5 commands Commands done only from your top level  mydev  directory git clone (create a new directory from a repo on github) Commands done from inside an individual repos local directory git add –all (add all changed files to staging) git commit -m  message  (create a  commit  with all staged files) git push (push all local commits up to github) git pull (pull any changes made from github to look at it locally) git status (see where things stand) NB: Don’t do a git clone from ‘inside’ a local repo directory Resources There are tons of online resources available for learning git. Below is a list of some that you may find useful: The Git Book Easy Git Github’s own Help to Set up Git is quite good. Also good is: Easy Git Understanding Git Conceptually (intermediate) And maybe: A practical Git introduction A practical Git introduction* try.github.com (beginner) Git Tutorial (beginner) Git Ready (from beginner to advanced) Learn Git Branching (beginner/intermediate) What is Github? Github is a web application that provides hosted version control services using Git. You can sign up and create public repositories for free, but you should pay to create private repositories. There are other similiar services among which are BitBucket and Gitent. Discussion points What are the main benefits of using GIT when developing a project by yourself? What are the main benefits of using GIT when developing a project with a team of coders? What are the reasons to create a branch? When several team members commit different changes on their local repositories, how do the reconcile their different changes in the main github repository? What are the advantages to having a staging area? After discussing these  big picture  ideas, we’ll look at the internals to see what Git is actually doing when you branch, commit, etc. Some of the basic skills you’ll need are create a local repository (git init) create a github repository and push your local repo to github clone a github repository create a temporary branch, make some edits, do some tests, merge it into your main branch, merge it into the team main branch interrupt the work flow above to fix a critical bug by stashing your current work, checking out the main branch, creating a temp branch with the fix, merging it into main, switching back to your branch and applying your stashed work to get you back to where you were pulling down someone else’s committed changes and resolving the inevitable conflicts that have arisen (by deleting theirs and using yours!) then pushing making a temporary extension, and rebasing several times as other people are committing their changes to the main branch on the shared server viewing your current status checking out another branch tagging the current version (e.g. v1.0 or v1.3 or v1.3.7) cloning a tagged version ", "tags": "", "loc": "/content/topics/cribsheets/git.md/" },

        {"title": "Heroku", "text": "Heroku is a cloud platform as a service which offers a solution based on Amazon AWS to deploy your applications. It supports many programming languages and frameworks and you can easily deploy your application using Git. It helps you focus more on the functionality of the application rather than infrastructure. Heroku also offers a command line tool that makes it easier for you to manage your applications. ", "tags": "", "loc": "/content/topics/cribsheets/heroku.md/" },

        {"title": "Minitest and Minitest/Spec", "text": "Content Credit: Minitest Cheatsheet test capture_io flunk msg = nil pass msg = nil skip msg = nil, bt = caller assert test, msg = nil assert_block msg = nil assert_empty obj, msg = nil assert_equal exp, act, msg = nil assert_in_delta exp, act, delta = 0.001, msg = nil assert_in_epsilon a, b, epsilon = 0.001, msg = nil assert_includes collection, obj, msg = nil assert_instance_of cls, obj, msg = nil assert_kind_of cls, obj, msg = nil assert_match exp, act, msg = nil assert_nil obj, msg = nil assert_operator o1, op, o2, msg = nil assert_output stdout = nil, stderr = nil assert_raises *exp assert_respond_to obj, meth, msg = nil assert_same exp, act, msg = nil assert_send send_ary, m = nil assert_silent assert_throws sym, msg = nil refute test, msg = nil refute_empty obj, msg = nil refute_equal exp, act, msg = nil refute_in_delta exp, act, delta = 0.001, msg = nil refute_in_epsilon a, b, epsilon = 0.001, msg = nil refute_includes collection, obj, msg = nil refute_instance_of cls, obj, msg = nil refute_kind_of cls, obj, msg = nil refute_match exp, act, msg = nil refute_nil obj, msg = nil refute_operator o1, op, o2, msg = nil refute_respond_to obj, meth, msg = nil refute_same exp, act, msg = nil spec must_be -> assert_operator must_be_close_to -> assert_in_delta must_be_empty -> assert_empty must_be_instance_of -> assert_instance_of must_be_kind_of -> assert_kind_of must_be_nil -> assert_nil must_be_same_as -> assert_same must_be_silent -> assert_silent must_be_within_delta -> assert_in_delta must_be_within_epsilon -> assert_in_epsilon must_equal -> assert_equal must_include -> assert_includes must_match -> assert_match must_output -> assert_output must_raise -> assert_raises must_respond_to -> assert_respond_to must_send -> assert_send must_throw -> assert_throws wont_be -> refute_operator wont_be_close_to -> refute_in_delta wont_be_empty -> refute_empty wont_be_instance_of -> refute_instance_of wont_be_kind_of -> refute_kind_of wont_be_nil -> refute_nil wont_be_same_as -> refute_same wont_be_within_delta -> refute_in_delta wont_be_within_epsilon -> refute_in_epsilon wont_equal -> refute_equal wont_include -> refute_includes wont_match -> refute_match wont_respond_to -> refute_respond_to mock expect(name, retval, args=\[\]) verify ", "tags": "", "loc": "/content/topics/cribsheets/minitest.md/" },

        {"title": "Postgres", "text": " On Mac, installing Postgres is easiest with Homebrew https://www.codefellows.org/blog/three-battle-tested-ways-to-install-postgresql http://www.gotealeaf.com/blog/how-to-install-postgresql-on-a-mac To have launchd start postgresql at login: ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents Then to load postgresql now: launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist ", "tags": "", "loc": "/content/topics/cribsheets/postgres.md/" },

        {"title": "Rails Activerecord Queries", "text": " 1# Simple queries return collections of instances 2 Article.find(3) # id=3 3 Article.w­her­e(a­uthor: 'admin') 4 Article.where( likes_count = ? , value_for_count) 5 Article.f­ind­_by­(title: 'Rails 4', author: 'admin') 6 Article.find_or_create_by(title: 'Beatles') 7 8# Working with collections 9 Article.where(author: 'pito').last # choosing 10 Article.where(author: 'pito').order(created_at: :desc) # sorting 11 12# Working with associated Models 13article = Article.comments.where(author: 'georg') 14 ", "tags": "", "loc": "/content/topics/cribsheets/rails_activerecord_queries.md/" },

        {"title": "Rails and Ruby Resources", "text": "Getting answers Stack Overflow: You may or may not have heard of Stack Overflow, but have you really used it? Have you looked for answers - probably yes, but have you posted questions? You will be doing both extensively during the course, so you might as well get used to it! Google Google is your friend. You know this of course. Almost any technical problem you encounter has been solved and written up by someone. Google it. Ask Mother Google. Ask The Google! Best of Rails Help Rails Guides Highly readable and concise (yet comprehensive :) guides to the most important parts of Rails. Often better than any book or manual. Rails Casts This web site contains hundreds of free screen casts that give step by step explanations on all sorts of use cases of rails. As the series has been going on for years, and has been in suspended animation since this June, you will see videos that talk about old versions of Rails and obsolete techniques. So, your mileage may vary but it’s still a great resource. Rails for Zombies The RailsApp project has a great book introducing Ruby and Rails: Learn Ruby on Rails (Ask me for the code) Best of Ruby Help Ruby the hard way is great if you are stuck getting going with Ruby Ruby on Rails Tutorial - Another excellent Rails tutorial ", "tags": "", "loc": "/content/topics/cribsheets/rails_links.md/" },

        {"title": "Best Rails and Ruby Resources", "text": "Getting answers Stack Overflow: You may or may not have heard of Stack Overflow, but have you really used it? Have you looked for answers - probably yes, but have you posted questions? You will be doing both extensively during the course, so you might as well get used to it! Google Google is your friend. You know this of course. Almost any technical problem you encounter has been solved and written up by someone. Google it. Ask Mother Google. Ask The Google! Best of Rails Help Rails Guides Highly readable and concise (yet comprehensive :) guides to the most important parts of Rails. Often better than any book or manual. Rails Casts This web site contains hundreds of free screen casts that give step by step explanations on all sorts of use cases of rails. As the series has been going on for years, and has been in suspended animation since this June, you will see videos that talk about old versions of Rails and obsolete techniques. So, your mileage may vary but it’s still a great resource. Rails for Zombies The RailsApp project has a great book introducing Ruby and Rails: Learn Ruby on Rails (Ask me for the code) Best of Ruby Help Ruby the hard way is great if you are stuck getting going with Ruby Ruby on Rails Tutorial - Another excellent Rails tutorial ", "tags": "", "loc": "/content/topics/cribsheets/rails_resources.md/" },

        {"title": "Rails Validations", "text": "Details can be found here: Rails Guides on Validations 1validates :content, :length => { 2 :minimum => 300, 3 :maximum => 400, 4 :tokenizer => lambda { |str| str.scan(/\w+/) }, 5 :too_short =>  must have at least %{count} words , 6 :too_long =>  must have at most %{count} words  7} 8 9validates :name, 10 :presence => true, 11 :length => { :within => 1..255, :allow_blank => true } 12 13# format 14validates :legacy_code, :format => 15 { :with => /\A\[a-zA-Z\]+\z/, 16 :message =>  Only letters allowed  } 17 18# in 19validates :size, 20 :inclusion => { :in => %w(small medium large), 21 :message =>  %{value} is not a valid size  } 22 23# numericality 24validates :points, :numericality => true 25validates :games_played, :numericality => 26 { :only_integer => true } # Uses regex /\A\[+-\]?\d+\Z/ 27 28# presence 29validates :order_id, :presence => true 30 31# uniqueness 32validates :email, :uniqueness => true 33validates :name, :uniqueness => 34 { :scope => :year, :message =>  should happen once per year  } 35validates :name, :uniqueness => { :case_sensitive => false } 36 37# allow_blank 38validates :title, :length => { :is => 5 }, :allow_blank => true 39 40# allow_nil 41validates :size, :inclusion => 42 { :in => %w(small medium large), 43 :message =>  %{value} is not a valid size  }, 44 :allow_nil => true 45 46# on 47validates :email, :uniqueness => true, :on => :create 48 49# conditionals 50validates :card_number, :presence => true, :if => :paid_with_card? ", "tags": "", "loc": "/content/topics/cribsheets/rails_validations.md/" },

        {"title": "Rake  tasks  (commands)", "text": "Reminder: rake is a command line utility that is used to automate a variety of small tasks that ruby and rails developers have to do all the time. (For your history buff, the name is derived from the old C utility called  make  –  ruby make  ->  rake ) Getting a list of Rake  tasks  rake -T # to get a list of all the more typical rake tasks rake -T -A # show every single task Primary db related tasks db:migrate runs migrations for the current env that have not run yet db:create creates the database for the current env db:seed (only) runs the db/seed.rb file db:setup runs db:schema:load, db:seed db:reset runs db:drop db:setup db:migrate:reset runs db:drop db:create db:migrate Secondary db related tasks db:create:all creates the databases for all envs db:drop drops the database for the current env db:drop:all drops the databases for all envs db:migrate:up runs one specific migration db:migrate:down rolls back one specific migration db:migrate:status shows current migration status db:migrate:rollback rolls back the last migration db:forward advances the current schema version to the next one db:schema:load loads the schema into the current env’s database db:schema:dump dumps the current env’s schema (and seems to create the db as well) ", "tags": "", "loc": "/content/topics/cribsheets/rake_commands.md/" },

        {"title": "Regexp Cheatsheat", "text": "Online experimenting Here is an amazingly useful online tool to experiment with Regexps: Rubular Top Regexp expressions \[abc\] A single character of: a, b, or c \[^abc\] Any single character except: a, b, or c \[a-z\] Any single character in the range a-z \[a-zA-Z\] Any single character in the range a-z or A-Z ^ Start of line $ End of line \A Start of string \z End of string . Any single character \s Any whitespace character \S Any non-whitespace character \d Any digit \D Any non-digit \w Any word character (letter, number, underscore) \W Any non-word character \b Any word boundary (...) Capture everything enclosed (a|b) a or b a? Zero or one of a a* Zero or more of a a+ One or more of a a{3} Exactly 3 of a a{3,} 3 or more of a a{3,6} Between 3 and 6 of a ", "tags": "", "loc": "/content/topics/cribsheets/regexp_crib.md/" },

        {"title": "Ruby Gems", "text": "RubyGems is a package manager framework for Ruby that you may use to install different Ruby libraries and programs. For example, we can install rails by running gem install rails and we can uninstall it by running gem uninstall rails. To learn more about RubyGems check out RubyGems guide. Cool Ruby Gems Jazz Hands: enable pry and some other gems for great rails debugging ", "tags": "", "loc": "/content/topics/cribsheets/ruby_gems.md/" },

        {"title": "Ruby Highly Specific Set Up Instructions", "text": "Ruby is a big magical world with tons of tools, libraries, successfull instructions, and dead-end tutorials. That’s why I will give you highly specific instructions. Please follow them to the letter. Why? Because I’ve been down the road and I can avoid you pain and help you live longer. MS Windows If you have a windows computer, I strongly urge you to find out how to create a second Linux boot partition. Many students have traveled this road before you and while (using Turing-complete kind of logic) you can technically do everything with Windows, the road is absolutely full of potholes and pain. Setting up a Linux partition is easy and very cheap. You need about 14Gig free. You will find the user interface fairly familiar. Overall things will go easier. Mac and Linux These are the preferred platforms. They both come with Ruby preinstalled and you can lead a happy life without changing anything. Other required tools on Mac Do not install RVM or RbEnv. These two tools are to allow a proficient programmer to change what version of Ruby they are using. You will not need them and they will make your life more difficult. Do install Homebrew It’s the easiest tool to allow you to install other utilities with the least amount of fuss Do install Sublime Text 2. You will need a simple text editor to do this work. If you already have a favorite, fine. But if you don’t Sublime Text 2 is what many people use, and it’s nice and easy Other required tools on Linux TBD If you didn’t follow my advice and still end up on Windows Reconsider! You should go back and install Linux. Do not use NOTEPAD. On Windows, Notepad is very weak and will cause you headaches. Of course if you followed my advice above you are not using Windows. ", "tags": "", "loc": "/content/topics/cribsheets/ruby_setup.md/" },

        {"title": "Bootstrap", "text": " Bootstrap is an open source front-end framework It came from Twitter, and used to be caleld  Twitter Bootstrap  but now it is its own open source project, and is called just  Bootstrap  It consists solely of css, javascript, some images, and some fonts Look at code for Bootstrap Look at Bootstrap Look at Bootstrap Demo Github Not using any gems for now!! Why is most of the Bootstrap setup in application.html.erb? Where else do we see bootstrap? ", "tags": "", "loc": "/content/topics/cribsheets/twitter_bootstrap.md/" },

        {"title": "Unix Shell", "text": "What is Unix Shell? Unix shell is a command-line interface (shell) for Unix-like operating systems through which user enters commands as text. The command-line interpreter then executes the command and returns the results. The most common shells in Unix were Bourne shell and C shell, and then Bash (Bourne-Again Shell) was developed as the original Unix shell. We will talk about most useful Bash commands but here are some very good free resources for you to learn more about shell and command line: Learning the Shell: an introduction to shell and basic commands The Command Line Crash Course: a super fast course in using command line for FREE BashGuide: a Bash guide for learning more about commands and writing shell scripts Bash Reference Manual: Bash reference manual And here are some great books: A Practical Guide to Linux Commands, Editors, and Shell Programming UNIX and Linux System Administration Handbook: a comprehensive book for anyone who wants to know about Linux system administration Unix File System File system is an essential part of every operating system, and Unix is no exception. Unix file system is a tree like structure that supports three kinds of files: regular files, directories and special files that are files like Unix sockets and symbolic links. Everything in Unix is considered a file if is not a process. Even physical drives are considered as files, which should be mounted by the operating system for read/write access. The root of this structure is ‘/’, and each file under the root is identified by its path, name and a unique identifier (inode). Unix support file extensions (e.g. .txt or .png) and also hidden files as other operating systems. The difference is that names of the hidden files start with ‘.’ and most of the times is used for configurations. For example, if you use git and you add global configurations, it will create a file named ‘.gitconfig’ in your home directory, which is hidden and is used by git to store the user’s configurations. Shell Commands and Streams Shell commands in Unix-like operating systems are executable through a command-line interface. They accept arguments and options, and the most obvious difference between them is that options start with ‘-‘. For example, many commands has a help option which gives information about the command and its arguments and options, and is specified by ‘-h’ or ‘–help’. There are three kinds of streams that Bash commands work with: STDIN, STDOUT and STDERR. STDIN stands for ‘standard input’ and is the stream that a command accept to get input. It can be binary, text or even keyboard input. A command can write its outputs to STDOUT (standard output) which is the default stream that is printed out to the screen or STDERR (standard error), the error stream which is also printed to the screen by default. Most Useful Commands List files: ls ls #lists files in the current directory (same as 'ls .') ls -l #lists files in the current directory with details ls -la #lists all the files (even hidden files) in the current directory ls --help #prints help information about ls command Change directory: cd cd ~ #go to home directory (same as 'cd' without arguments) cd ../ #go to the parent directory Copy files: cp cp source.txt dest.txt cp -r mydir ~/ #copy the directory 'mydir' recursively to my home directory cd -i source.txt dest.txt #prompt before overwritting Move files: mv mv source.txt dest.txt mv mydir ~/ #move the directory 'mydir' recursively to my home directory mv -i source.txt dest.txt #prompt before overwritting Remove files: rm rm source.txt rm -r mydir #remove directory 'mydir' recursively rm -i *.txt #remove all files with .txt extension but ask before removing Symbolic link: ln ln -s /directory/foo.txt #make a symbolic link with the same name in the current directory ln -s /directory/foo.txt myfile.txt #make a symbolic link with another name (myfile.txt) Current directory: pwd pwd #prints the current working directory Create a directory: mkdir mkdir mydir #create a directory named  mydir  in the current working directory Manual: man man ls #show manual page for ls command Run a command as the root: sudo sudo rm -rf /tmp/foo.txt #execute the rm command as the root user ", "tags": "", "loc": "/content/topics/cribsheets/unix_shell.md/" },

        {"title": "Vagrant Setup", "text": "Vagrant is a software that acts as a wrapper around virtualization software like VirtualBox and VMWare, and provides a more convenient approach to setup reproducible and portable work environments and an efficient and flexible workflow. It can easily be integrated with provisioning tools like Chef and Puppet, and there are many useful plugins that can be installed to add optional features. How to setup Vagrant Before installing Vagrant you should have one provider installed. For this course we recommend you to use VirtualBox. After VirtualBox is installed (if you are using Windows make sure that you restart after installation completes), download the provided Vagrant box Download Vagrant from here Install it and make sure that you can run vagrant from your terminal (on windows run it in command prompt, and on OS X run it in Terminal app) If you are using Windows, restart your computer after Vagrant installation completes. Create a new directory anywhere you prefer. (This directory will contain Vagrant config file and all your projects’ files) Open your terminal Go to the directory you created in step 3 by running cd <path to your directory> Run vagrant box add <box name> <path to the .box file> (e.g. vagrant box add ubuntu13.10 ubuntu-13.10-i386.box) Run vagrant init <box name>. Note: <box name> should be the same as the one you entered in step 6. (e.g. vagrant init ubuntu13.10) Run vagrant up If the last command works fine, you can connect to your box by running vagrant ssh. Development Environment You may put your projects’ files in the directory that you created during Vagrant setup so you would have access to it from your virual machine instance in /vagrant directory. You have two options to edit and run your codes: You can install Sublime Text on your host machine and write your codes there and then run them on your virtual machine instance. This way you can interact with your vm instance via ssh. You can interact with your vm instance via GUI, and write your codes and run them on your vm instance. If you choose this option you have to enable vm GUI in your Vagrant config file by editing Vagrantfile that has been generated in the directory you created while setting up Vagrant and writing/uncommenting the following lines: config.vm.provider :virtualbox do |vb| vb.gui = true end Note: make sure you relaunch your vm instance after the changes by running vagrant halt and then vagrant up. ", "tags": "", "loc": "/content/topics/cribsheets/vagrant_setup.md/" },

        {"title": "Agile Software Development", "text": "Agile Software Development How software engineering works (in my experience) How a software company is organized What is a software company nowadays anyway? Classic roles and how they apply in a software company Marketing Sales Engineering+Quality Assurance Finance Business Development The role of a ‘schedule’ Why is it important? How is it used? Discussion: When things change…. How are some of the ways that things can change? What can cause those changes Agile Project management/Software engineering Methodology? Many variants. Not a survey; just learning how to use a particular tool Agile => Extreme Programming, Scrum, and many other variants. Other methodologies: waterfall.  BDUF . Scrum Our preferred variant of agile Scrum Principles: Change is expected and embraced Time-boxing: work in fixed units of time (sprints) Describe what is to be built in small bite-size pieces (stories) Small, empowered, cross functional teams (scrum teams) Rapid Iteration with continues customer input (product owner) Don’t estimate – measure Concepts from Scrum: Stories Standup meetings Backlog Product Owner Scrum Master Sprints (for us, 1 week sprints) Velocity Pair Programming Continual Integration Test Driven Development ", "tags": "", "loc": "/content/topics/engineering/agile_development.md/" },

        {"title": "Intro to project tracking", "text": "MVP Minimum Viable Product Get to that as soon as you possibly can! It has almost no features  Walking Skeleton  Stories bite sized ‘tasks’ which are kept in priority order called stories because they typically describe a story about a user Work proceeds in cycles or iterations or sprints Can be between 1 and 4 weeks each Between sprints, story ordering can change to reflect latest view of priority Most important story to do NOW is on top Trello Tools for tracking projects Free for small, public projects Good for Agile and Scrum and even Kanban, specifically There are lots of other free and not-free tools which could be used as an alternative. Ask me if you want. ", "tags": "", "loc": "/content/topics/engineering/agile_projects_intro.md/" },

        {"title": "Cloud Deployment", "text": "Classification of Cloud Software as a Service (SaaS): Delivers an application through a web site or app. Examples: Google Docs, Basecamp, etc. Differentiated by what the app is Platform as a Service (Paas): Deploy your apps to the cloud, based on their platform. Examples: Heroku, Some AWS offerings, Google App Engine, Pusher.com Differentiated by what the platform is, e.g. Node.js, Rails, Go, etc. Infrastructure as a Service (IaaS): Delivers some part of infrastructure through the cloud. Infrastructure might be CPU, Disk, Queueing service etc. Examples: Amazon EC2, S3, Google Compute Engine, Linode, etc. Differentiated by what part(s) of infrastructure are offered. Pricing These services usually have a free tier, but for ‘serious’ use you need to pay Some examples: Heroku: free for ‘open source’ (which I think means Public Github Repos) Pusher: free for up to 20 simultanuous connections. (what is the lifecycle of a connection?) S3 (AWS Storage Server): 5 GB of Amazon S3 standard storage free (see further details on their site.) CodeClimate: Free for public repos Github: Free for public Repos loader.io: Simulated load to test scalability Notice that the terms are not settled yet. XaaS sometimes is defined differently. New Deployment Tools to look at Flynn - Heroku in a box - Flynn Docker - Package the whole stack into a single module that can be deployed on any number of cloud services Docker Reference Heroku: Getting Started With Rails Classification of Cloud Services ", "tags": "", "loc": "/content/topics/engineering/cloud_deployment.md/" },

        {"title": "Continuous Integration and Deployment", "text": "Continuous Integration and Deployment Objective 1: Make sure that bugs are detected as early as possible Make sure that your source code is consistent, and integrates How? Have as much testing as you can Push all code to your source code repository Automatically triggers a pull/run all tests Ideally: report to team and to individual developer Objective 2: Make sure users can start playing with new product asap Once integration works, push it out to a server Often there’s a test or staging server Historically: Release every year, 6 months, month, week. Now: Serious standard is release multiple times a day! Automatic and continuous deployment Let’s take a look at my Codeship.io and Heroku.com installations and review how they work Reference Rails Integration Testing Deploy from Codeship.io to Heroku ", "tags": "", "loc": "/content/topics/engineering/continuous_integ_deployment.md/" },

        {"title": "Programming made easy", "text": "http://blog.codinghorror.com/why-cant-programmers-program/ Also: Ruby the hard way ", "tags": "", "loc": "/content/topics/engineering/easy_programming.md/" },

        {"title": "Feature Switches", "text": " A direct result of engaging in continuous integration How it works: Usually the toggling happens in the UI. Defines a sybol list of features that you may want to hide, e.g.  petSurvey ,  profileUpload ,  FacebookIntegration  And then  guard  the corresponding html, making sure user cannot get to that feature Site Administrator is able to turn on and off features without re-deploying <toggle name= petSurvey > <p>Take our new <a href = 'petSurvey'>pet survey</a></p> </toggle> Reasons Hide a feature that is not done yet Hide a feature that you discovered is broken Hide a feature that is killing performance Split testing Reference Marin Fowler on Feature Toggle Fearure Switches at Flickr ", "tags": "", "loc": "/content/topics/engineering/feature_switches.md/" },

        {"title": "Pivotal Tracker", "text": "Pivotal Tracker Very superficial description Tool for tracking projects Free Good for Agile and Scrum, specifically Stories bite sized ‘tasks’ which are kept in priority order called stories because they typically describe a story about a user Developers work in cycles or iterations or sprints Can be between 1 and 4 weeks each Between sprints, story ordering can change to reflect latest view of priority Most important story to do NOW is on top ", "tags": "", "loc": "/content/topics/engineering/pivotal_tracker.md/" },

        {"title": "Sofware Engineering Rules of Thumb", "text": "Programming Rules of Thumb When coding, never go beyond the immediate requirement. Write only the code you need to solve the problem RIGHT now. You might think that this class clearly will need all this methods even though no one is calling them yet. This almost never works out. Don’t spend time to set things up for what you’ll need in a month. You’re usually wrong. When coding, always wait to optimize until later. Optimizing too early is one of the cardinal sins of programming. You never know where the bottleneck will be, The thing you think will be slow, will be fast, and vice-versa. Actually you might end up ripping it out anyway! Conversely, when coding always keep a list of ‘technical debt’ items These are coding chores, cleanups, fill ins, removal of dead wood, that you purposely put off, even though you know you will have to come back to them. Later, when you want a change of pace in your coding, you can look at that list for some easy pickings! When your own code mystifies or surprises you never accept that. Dig deeper. Catch yourself engaging in magical thinking. If it worked yesterday, and not today, then something changed. Similar story as  It worked on my machine, why doestn’t it work in production?  Both of these are a symptom of magical engineering thinking. It’s just a computer. If the behavior changed, then something cause that change in the behavior. Methodically go through each thing that might be different and, like a scientist (or Sherlock) figure out what it was. Don’t be satisfied with blind luck Copying some code without knowing what is going on is not a good idea. Eventually it will come back to haunt you. Be really curious!. If a certain change fixed the problem, investigate until you understand how it fixed the problem. Learn to Debug Debugging is a craft in itself. Approach it like a scientist. Don’t poke blindly at the code, or solve the problem just by thinking about it. Have hypotheses to test. Do experiments. When your program blows up always stop and read the error messages. Catch yourself jumpint to conclusions or seeing what’s not there. Fight the impulse that you know what must have failed. Often the right answer is right there in the error message. It might be buried in the middle of a lot of noisy trace output, but discipline yourself to actually read it. If you think you spot a code smell always come back and eradicate it Train yourself to recognize (and HATE) code smells. Like nails on a blackboard, badly designed code should make your stomach turn or your skin crawl. Never, Ever Cut and Paste code. DRY is a law. If you see any duplicated code it is almost always a bad thing. Look for it and kill it. Learn how to Refactor This is a fundamental coding skill. When you see non-dry code or other violations, refactor ruthlessly. Never leave dead code behind** Delete it. Always keep your files, methods and functions short** Depending on the language and the program, the right number may vary. But a method that has more than 20 lines is almost always a serious code smell. A guideline would be 10 lines. When programming always use a source control system. It’s your safety net. This is especially true when working with other programmers. Learn your SCS tool so you are never reluctant to use it. When designing software, always keep concerns as separate as possible. Design for loose coupling. Pay attention to the Single Responsibility principle. Whether it’s a single class or function, a subsystem or module, or a whole system, minimize dependencies. Learn about dependency injection and other techniques for decoupling. When doing object oriented programming always avoid using class inheritence While tempting, it is almost always better to avoid using inheritence in your class design. It brings undesireable coupling with little benefit that could be had in a simpler way. When programming always use ‘intention revealing names’ Chosing the right names for classes, variables, methods is one of the best ways to ‘document’ your code. Follow your language’s naming conventions closely and then create names that reveal your intention. Name things after what they do, not after how they work! Also make sure names are internally consistent. (Ref: Intention Revealing Names) When programming, always comment your code, but not too much. The exact line is a matter of (fervent) debate but it is almost universally accepted that having no comments is a bad idea and that its easy to have too many comments. Keep your comments at the start of each source file, and at the start of each method. Occasionally you might want to put a few lines of comments inline. But that desire often alerts you to a refactoring opportunity. When learning new things never fall in love with the shiny toys It’s ok to be proud in your expertise and trying to perfect your craft. But platforms and languages come and go, and you must remain alert to newer and better ways to solve problems as they are invented. Don’t fall in love with a language or platform. It will change and the specific details you memorized will eventually become useless. Personal Effectiveness Rules of Thumb When you have your best idea ever, always remember that the idea is just 1% of the journey Yes, ideas are cheap. At least in the world of software engineering and product development, everyone and their grandfather have ideas that may be great. The distance between the idea and the reality is great. Here’s Steve Jobs about ideas When your project is late, never ADD people Most of the time this will slow you down. The reason is that with each additional person you add to a project you’ve created that many more paths of communication. If a project is late, adding people to it will make it later. See * The Mythical Man Month by Fred Brooks. Things change fast. You need to always be learning. Software engineering, programming languages, libraries, platforms, hardware and software are constantly changing. It take a real sustained effort to keep yourself up to date. Don’t be too proud that you know all the details of node.js or ruby on rails. That knowledge evaporates. The big, fundamental concepts, theories, philosopies, patterns change far more slowly. You need ot keep up your game. When arguing about a design or a feature, always stop and go ask a user. Good products don’t come from debate around a table, they come from discussion with the actual users. Don’t guess, don’t argue, go ask! This is known as  getting out of the building . When planning a project, always work in short increments. Follow Agile practices, whatever your favorite flavor is, scrum, XP, Kanban, it doesn’t matter. Different teams and people like different approaches. And they change and evolve all the time. But there are eternal truths there. Work in small chunks. Even smaller. Even smaller. Don’t change many things at once because when your code invariably breaks, you won’t be able to tell why. When you are spinning your wheels, always stop, think, and only then act. Google It! The amount of knowledge and down and dirty solutions that you can find on google is infinite. See a strange error message? Google it! And learn how to edit the error message, removing the parts that are specific to you so that you get matches. Or ask on the right forum or mailing list. You need to learn how to ask a question in a way that it will be answered. Make it as easy as possible on the answerer. When you are posting on a technical forum, always formulate the question carefully. Here are the best practices: Explain precisely what you are trying to accomplish Give a step by step explanation of what you’ve tried and the result. Give code samples, links to github accounts, and so on. If the code samples are not brief, create a gist and put the link in the post. Include listings of the relevant data, file names, console logs, and versions of various software you use. When you are writing a ‘business’ email, always follow best-practices If you expect action, have a single person in the to: Know the difference between reply and reply all. Usually don’t reply all The first sentence should state what action you are looking for Keep it short and sweet. Make it  skimmable . Know your audience and write appropriately. Get to the point. Be polite. When you have to write up a design or a spec, always keep it to a few pages. Prefer writing short ‘stories’ over writing long ‘specifications. There is no requirements ‘phase’ to a project any more. Write many short stories and prioritize them relentlessly. If the story is more effort to write than the code, you should be writing the code!. Credits Many of these are from books, blogs and my own experience. I will list all the credits that I can identify but I think in some cases these rules are so deeply embedded that I cannot recall where I got them from. If you see sonething that you think you came up with, I appologize! Practices of a Professional Developer by Klaus Hebsgaard Practical Object Oriented Design in Ruby by Sandy Metz The Mythical Man Month by Fred Brooks The Pragmatic Programmer by David Thomas Debugging: The Science of Deduction Rob Pike’s Rules ", "tags": "", "loc": "/content/topics/engineering/se_rules_of_thumb.md/" },

        {"title": "Software Engineering", "text": "goals: - what is software engineering? - how is it different from computer science? - why does it matter in general - how to excel as a software engineer Making distinctions From  Can practitioners neglect theory and theoreticians neglect practice?  ]) Craft Applies traditional techniques to produce goods and provide services Examples: Cabinet making, Sewing, Teaching? Science Aims to gather, verify and document knowledge and insight through research Examples: Physics, Biology, Computer Science? Engineering Applies both knowledge and scientifically analyzed and justified methods to develop and produce technical products There has always been creative tension between theory and practice:  Well, it may be all right in practice, but it will never work in theory.  – Warren Buffett on how the academic community regards his investment approach  In theory, there is no difference between theory and practice. But, in practice, there is.  – Jan L.A. van de Snepscheut and/or Yogi Berra  In theory, the difference between theory and practice is small. In practice, the difference between theory and practice is large.   Beware of bugs in the above code; I have only proved it correct, not tried it.  – Donald Knuth What is Software Engineering? Engineering (from ) The creative application of scientific principles to design or develop structures, machines To construct or operate the same with full cognizance of their design; To forecast their behavior under specific operating conditions; Respecting an intended function, economics of operation or safety to life and property Software Engineering People processes required to build working, deployed, software based systems Development methodology to deal with extreme complexity Primacy of deployed systems, used in the world, having real impact on people Triad of Money, Time and Quality How is it different from Computer Science? Science (from Is Mathematics a Science?): Evidence gathered in experiments and observations. Theories about the evidence, theories that move from the particular to the general. The requirement that contradicting evidence falsify a theory. Discussion: Imagine what  Experimental Computer Science  might mean? Why does Software Engineering matter in general Is it fundamentally different from  programming ? How? Do you want to be a Computer Scientist or a Software Engineer? Ok, but what is my degree in? Three legs of the stool Craft or Art: applies traditional techniques to produce goods and provide services Science: Aims to gather, verify and document knowledge and insight through research Engineering: Applies both knowledge and scientifically analyzed and justified methods to develop and produce technical products Things I look for in a  software engineer  Focus on design not just  coding  Focus on longevity, maintainability, reusability, sharing (repositories, version management) Focus on quality, fit and finish, and testing of all kinds at all levels Focus on cost, time, schedule, delivery See my own Sofware Engineering Rules of Thumb References [1]  Software Engineering: An Idea whose time has come and gone? [2]  Can practitioners neglect theory and theoreticians neglect practice?  [3] Sofware Engineering Rules of Thumb [4] What is Computer Science? [5] Is Computer Science Sience? [6] Is Mathematics a Science? ", "tags": "", "loc": "/content/topics/engineering/softw_engineering_brief.md/" },

        {"title": "Software Engineering", "text": "Software Engineering Definitions (from: [reference]) Craft Applies traditional techniques to produce goods and provide services Examples: Cabinet making, Sewing, Teaching? Science Aims to gather, verify and document knowledge and insight through research Examples: Physics, Biology, Computer Science? Engineering Applies both knowledge and scientifically analyzed and justified methods to develop and produce technical products Examples: Electrical Engineering, Biomedical Engineering, Software Engineering? Creative tension  Well, it may be all right in practice, but it will never work in theory.  – Warren Buffett on how the academic community regards his investment approach  In theory, there is no difference between theory and practice. But, in practice, there is.  – Jan L.A. van de Snepscheut and/or Yogi Berra  In theory, the difference between theory and practice is small. In practice, the difference between theory and practice is large.   Beware of bugs in the above code; I have only proved it correct, not tried it.  – Donald Knuth What is Software Engineering? Engineering (from [reference]) The creative application of scientific principles to design or develop structures, machines To construct or operate the same with full cognizance of their design; To forecast their behavior under specific operating conditions; Respecting an intended function, economics of operation or safety to life and property Software Engineering (from me) People processes required to build working, deployed, software based systems Development methodology to deal with extreme complexity Primacy of deployed systems, used in the world, having real impact on people Triad of Money, Time and Quality How is it different from Computer Science? Science (from Is Mathematics a Science?): Evidence gathered in experiments and observations. Theories about the evidence, theories that move from the particular to the general. The requirement that contradicting evidence falsify a theory. Discussion: Imagine what  Experimental Computer Science  might mean? Why does Software Engineering matter in general Is it fundamentally different from  programming ? How? Do you want to be a Computer Scientist or a Software Engineer? Ok, but what is my degree in? Things I look for in a  software engineer  Talent at design, architecture, coding Prioritizes longevity, maintainability, reusability, sharing (repositories, version management) Follows throough on quality, fit and finish, and testing of all kinds at all levels Understands the eternal tradeoff: cost, time, schedule, delivery See my own Sofware Engineering Rules of Thumb References [1]  Software Engineering: An Idea whose time has come and gone? [2]  Can practitioners neglect theory and theoreticians neglect practice?  [3] Sofware Engineering Rules of Thumb [4] What is Computer Science? [5] Is Computer Science Sience? [6] Is Mathematics a Science? ", "tags": "", "loc": "/content/topics/engineering/software_engineering.md/" },

        {"title": "Big Data (http://bit.ly/bigdataslides)", "text": "Target Stores Problem: Get customers to do all their shopping at Target People shop for different things in different places However new parents have no time to shop and can be convinced Birth records are public. Baraged with promotion at that point. Goal: find out and start marketing before baby is born! Statistical analysis detected among shoppers who had signed up for the  Baby Register  bought: More lotion More calcium supplements More cotton balls and soap etc. So: Begin marketing to them early. However: Unintended side effects What is  Big Data  As usual, a new term has many varied definitions Huge amounts of data being collected because of advances in technology Online transactions Electronic Records Online behavior Instrumentation and automatic intake Advances in Computation and Statistics Process the data in real time New kinds of databases (beyond tabular  SQL  databases) Sources of the big data Science (Genomics, Weather, …) Business (Amazon, Google, …) Government (Medicare, Obamacare, …) Key Technology Trends Databases: Column databases, No SQL Databases MapReduce: Computational architecture for mass scaling Cloud Computing Challenges  Big Data Hubris  - Just because you have a lot of data  Bad Data  - Google Flu badly failed to predict. Search for Flu Remedy  does not mean I have flu  Correlation vs. Causation  - Deep statistical insight and humility required  Gaming the System  - Grading or student performance based on analysis of essays Links Google NGram Viewer Google flu How Target Figured Out… How Companies Learn Your Secrets Big Data Under Attack Eight Proglems with Big Data ", "tags": "", "loc": "/content/topics/entrep/big_data.md/" },

        {"title": "Company Founding Scenario", "text": "Feb 2013: Chris is a senior in college, and has a great idea for a product, and spends senior year (spring term) working many hours refining the idea into a mockup. Senioritis, you know? Many discussions with other students improves and refines the idea. May 2013: Chris’ friend Dana is interested in helping on the product. It turns out that Dana has experience from courses and also hacking on the side, and knows just how to build a working prototype. It becomes a practically full time obsession for the two of them, and together Chris and Dana continue to refine the project and get feedback. During the summer and fall, Dana writes a lot of software, which is a central part of the project. Jan 2014: Dana and Chris realize that they have a knowledge gap. Chris is the product visionary with strong technical chops. Dana is the hands-on coder and has developed a majority of the code. However to be able to pay the bills they decide that they need to raise money and to have more business expertise. They have no clue how to do this, but a friend of a friend introduces them to Alex. They really hit it off with Alex, who is very experienced, has been involved in a startup before and knows several angels very well. Questions to discuss. There are no correct answers. Imagine yourself in the actual situation and ask yourself what your position would be and how you would defend it: When do you think is the right time to start thinking about incorporating, realistically, and why? When do you think the three individuals should assign a ‘title’ to themselves, 1. what titles would you suggest, and why? Who do you think may legitimately call themselves a  founder , a  co-founder , or just an  early member of the team  and why? What is a fair way to allot ‘ownership’ to the three individuals and why? ", "tags": "", "loc": "/content/topics/entrep/company_founding_scenario.md/" },

        {"title": "eRoom Story", "text": "The eRoom Story Story of eRoom’s entry into the market Pito and Jeffrey in 1995: Home delivery of groceries The importance of domain expertise The case we made to the VC about our competitive advantage: Internet + Desktop software + groupware How to position it? Groupware, Collaboration, Teamware: all were dirty words Customers (early adopters) really liked our value proposition  We are constantly reinventing the wheel   there’s too much email   we should be sharing better   we are inefficient  How to sell: Download vs. Corporate sales team Direct sales: selling an alpha and beta test At first it went well but then it didn’t We needed to get more specific Go beyond  nice to have  to  must have  Vitamin vs. Aspirin What happened next Horizontal/Vertical/Horizontical The importance of real domain expertise Why vertical (IMHO) is easier place to start Exercise Look to your  extended  team: what do you know better than eanyone else? ", "tags": "", "loc": "/content/topics/entrep/eroom_story.md/" },

        {"title": "Innovators Dilemma", "text": "Disruptive Innovation:  The Innovators Dilemma  When an innovation in technology changes it in a way that takes it from a specialized, expensive, niche market applicability, to a price and performance point where it can be broadly applied The Innovators Dilemma: Should you embrace or ignore a new technology to address your existing business? # Some History Web based applications MSFT vs. Google eRoom -> Hotmail -> Google Docs Ms Office# -> Live Office How about, these, are they examples? Segway Keurig Coffee Innovator’s Dilemma Scenario A new technology comes around which solves an existing ‘problem’ in a way that is not advantageous to the existing major users/customers/revenue providers Established players are not in a position to capitalize on them because this is not what their existing customers are demanding. In fact it would be negative. A new player may be able to identify a market in which the new technology’s drawbacks are actually somehow advantages. It goes after that market, all the while perfecting the technology getting it more and more ready for the larger market When the time is right, the new player if they bet right may be able to go after the larger market, but the established player finds itself behind in the new technology and is blown out of the water. Example Performance can be: MPG of a car, or Power of a handheld vacuum cleaner. Other examples? References The Innovators Solution, Clay Christensen The Innovators Dilemma, Clay Christensen ", "tags": "", "loc": "/content/topics/entrep/innovators_dilemma.md/" },

        {"title": "Markets and Segments", "text": "What is a ‘market’ in this context? How do you think about the market size? Look at segments, value proposition and market entry Segments: For your market or customer hypothesis, you need to understand the market(s) and segment(s) you are serving. Notice that these are not black and white, they can be continuums or multi-faceted. Types Mass Market: Huge and undifferentiated. Horizontal, e.g. consumers age 12 to 18. Niche: Highly specific: Vertical, e.g. Bicyclists Segmented: your product serves more than one segment. Apple serves the consumer and education market segments Diversified: your product serves very different markets: Amazon serves consumers and software developer Two or multi-sided markets: brings two or more segments together: dating services, newspapers there are others… Value Proposition: For each segment you need to express what value your product or service is creating. If you cannot express it than you probably should not be trying to address that market. It’s not just that you are offering something ‘new’ to that segment. It could also be: cheaper (to buy or to use) faster more convenient better designed more customized brand safer/less risky more available (segment couldn’t get it, use it, access it before) Market Entry Existing market Your customers (kind of) understand the problem and your solution You have (kind of) competitors Your customers will have to stop using another product Sometimes your entry can grow the number of customers, sometimes you fight it out (e.g. Facebook for Seniors. Is that a new or existing market?) So you can: ENTER an existing market, e.g. Android joining iPhone and compete directly RESEGMENT an existing market - with one of value propositions above, e.g. iPhone joining Blackberry RESEGMENT a market - by going after a sub-component of it, e.g. Tesla entering automobile market New Market Your customers may not know they have the problem You have to teach/explain them why your product/service exists They will have to find budget (money) to pay for it. This is a very expensive process for you So you can: CREATE a totally new market, e.g. Palm, creating the PDA market Discussion: Let’s see what advantages and challenges each example has Exercise: Company and market Barnes and Nobel Nook Tesla Motors Olin College Apple iTunes Raspberry Pi Nest Thermostat Microsoft X-Box Makerbot Replicator Google Android Pocket Hose (google it) 5 minutes: Team up in by classroom table, pick a different product, and answer: what market(s) is this company and/or product in what segment and kind of segment does it compete in what is it’s value proposition is it offering that market how did it attack or enter the market additional observations and/or insights? Report out by table ", "tags": "", "loc": "/content/topics/entrep/markets.md/" },

        {"title": "Presentation Hints and Tips", "text": "Presentation Hints and tips Content of slides Each presentation needs to be self-contained, in other words, you need to make sure it tells a story. This includes an opening slide or two to set the context And a closing slide or two drawing some comclusions. Without that the presentation is not meaningful on its own. Any diagrams, paper prototypes, and other illustrations need to be presented and explained so that the audience can understand and be engaged. Style Rehearse/Practice! A presentation is a kind of performance. Be familiar with the material so you don’t umm and mumm as if you are seeing the material for the first time. Watch your pacing. Speak clearly and in complete sentences. Keep to the time limit. Keep questions to the end. Work on the handoffs between the speakers to make them as smooth as possible. Make sure your equipment works. Bring any connectors or other gadgets you will need. Keep in mind that no one has seen this presentation before, and at least one person in the audience has never heard of your project. Watch your body language! Are you energetic, engaged? If you don’t care, your listener will not either! ", "tags": "", "loc": "/content/topics/entrep/presentation_hints_tips.md/" },

        {"title": "Real World Survival Kit", "text": "Real World Tips: Cliff Notes LinkedIn. How it works. Why to Join Please join now and connect to me. Lets look someone up. Designing your profile People Networking. How to do it. Why it’s important Karma. What you sow is what you reap The  System . 6 months. Keep a list. Know why you want to talk; know why you’d be worth talking to Resumes. Some tips Who looks at them, for how long How does hiring process work Type, color, pages, appearance Career goal; Special qualifications Interviews. Shome tips. Enthusiasm Dress, demeanor: Not what they can do for you; what can you do for them Trick questions: What salary are you looking for and other trick questions Companies Key functions. Titles. Risk factors. Runway. Layoffs. Big vs. Small company Real World Survival Kit. Details and Old ", "tags": "", "loc": "/content/topics/entrep/real_world.md/" },

        {"title": "Real World Survival Kit Mob Notes", "text": " Resumes No need for permanent address Leadership and Activities is good, but try and have a special qualifications section, put that at very top! Why is that special? competitive advantage/ What makes you special? (professionally) How will you benefit the Company? Put details about activities/accomplishments, not just a title add more detail about more important sections of resume Have dates People read resumes in  two seconds ; think of yourself as a product. Put skills etc. in priority order (what you know best goes first) make sure skills good and important One page resume rule Older things generally less important Personalize resume based on job/job type (within reason) It is an ongoing process Education section not necessary espec. high school Color is OK! make sure black and white version of your colored resume looks just as good Show, don’t tell. Don’t try and spend a whole page writing out your personality. You won’t have any room for other things and it will be dificult to read Career Objective First sentence of resume state what you want from the job (Written in the frame of the reader) Should be in cover letter as well Make it consistent and relatively specific Phone Screens Skill Based pick out parts of resume, more description and detail about what you did Know background of the company have a question or two ready about the company Try to be positive about the company, even if you have doubts, at least until you get a job offer Make sure they are relevant Know everything on your resume review older projects Followups Short thank you - sneek in something about wanting to talk more Send a link or potentially more information that came up in your conversation If you don’t have the interviewer’s contact info, email it to the contact you have and ask them to forward it Feel free to followup on your followup After two emails, don’t continue Don’t expect a response from just a resume or even a phone screen. There should be one from an interview Portfolio Showcases particular pieces of work you are proud of. Pictures, schematics, essays, videos, etc. Have a project that you released into the  real  world Something you had a major role in (can say it is your work) Types of Companies Large company fewer interactions outside of department (less personal) more formality takes longer to get things done Laden with process/politics/paperwork etc. Offers a ton of projects; Variety of passions/projects, more opportunities can get laid off out of nowhere - less connection between you and your job security Less scrutiny on each individual employee Structure Small companies Get involved in a lot of projects very easily = more impact No process, take initiative to get things done (fix your own problems) very focused; Lives & breathes the one project - not good if you want to experience more than one type of thing Earlier in your life, it is easier to take risk No room/limited room for mistakes (Spotlight) Easy access to higher-ups Company depends more on you A whole buncha fun, all of the time Conversely, a whole buncha work, all of the time  How funded are you guys?  or CrunchBase (http://www.crunchbase.com/) Differences: more beaurocracy and processes in large companies, whereas small companies demand more self-reliance and are more focused Don’t assume that any job will be secure/last forever Can be a financial issue but also means that you aren’t stuck in a job for life find out about the runway for startups May be easier to get a job if willing to move to an area with fewer people with your skill set Lifestyle Business Doesn’t grow (not designed to grow exponentially) Gives a decent, liveable salary–supports the lifestyle its employees want to maintain The lack of prospective growth can hurt the attitude of employees (cause lack of motivation) Contractor vs. Consultant Mostly the same, self employed and not working directly as an employee; more of how you want to position yourself Implication of contractor - do a lot of work quickly for the compnay Consultant- more of an advising position Consultant would work with the company, contractor for it. Taxes and Benefits Some companies withhold taxes automatically 401K- deposits are not taxed Some companies match a portion of salary 5% match - they will match up to 5% of your income Stock purchase plan vesting - you can buy stock but you cannot get it unless you work at the company for x amount of time Significance of each benefit depends on person ", "tags": "", "loc": "/content/topics/entrep/real_world_details.md/" },

        {"title": "Real World Survival Kit. Details and Old", "text": " Everyone join LinkedIn right now while I wait Everyone connect to me, at least The personal network you start building now is more powerful than anything else I say Pito’s patented networking technique When you meet someone interesting, make effort to make a connection. Get contact info. Use spreadsheet (people, names, email, date of last convo, interest) personal details as well - not just contact info, why and how you met them Contact every 6 months. Remind the person where they know you from. Objective of conversation - have a purpose Give them something of interest to them. Assume that you have something interesting to say. Linkedin easier to get in touch with people in specific areas (Connect with friends of friends) Put updated information on Linkedin, which has ability to export a resume like PDF Resumes Who looks at Resumes How do they do it When does a resume turn into an interview Who does the next interview? Resume content No need for permanent address Leadership and Activities is good, but try and have a special qualifications section, put that at very top! Why is that special? competitive advantage/ What makes you special? (professionally) How will you benefit the Company? Put details about activities/accomplishments, not just a title add more detail about more important sections of resume Have dates People read resumes in  two seconds ; think of yourself as a product. Put skills etc. in priority order (what you know best goes first) make sure skills good and important One page resume rule Older things generally less important Personalize resume based on job/job type (within reason) It is an ongoing process Education section not necessary espec. high school Color is OK! make sure black and white version of your colored resume looks just as good Show, don’t tell. Don’t try and spend a whole page writing out your personality. You won’t have any room for other things and it will be dificult to read Career Objective First sentence of resume state what you want from the job (Written in the frame of the reader) Should be in cover letter as well Make it consistent and relatively specific Portfolio Showcases particular pieces of work you are proud of. Pictures, schematics, essays, videos, etc. Have a project that you released into the  real  world Something you had a major role in (can say it is your work) Interviews / Phone screens Phone screens Preparing Doing well or not well during a screen Skill Based They might pick out parts of resume, more description and detail about what you did Know background of the company Gave a question or two ready about the company Try to be positive about the company, even if you have doubts, at least until you get a job offer Make sure they are relevant Know everything on your resume; review older projects Interviews How to dress and behave How to play up your strengths when you have little to no technical experience in an internship you’re interested in. How to sell yourself What if you’re not confident in my past experiences. When finding yourself out of your depth skill set wise, how can you emphasize your other strong qualities for a position? Classic Interview Gambits Difficult questions What salary do you want? When can you start? Followups Best way to follow up after a career fair or after a meeting: Follow up email When to call to ask status Short thank you - sneak in something about wanting to talk more Send a link or potentially more information that came up in your conversation If you don’t have the interviewer’s contact info, email it to the contact you have and ask them to forward it Feel free to followup on your followup After two emails, don’t continue Don’t expect a response from just a resume or even a phone screen. There should be one from an interview Jobs Jobs Companies: Big and small Whats a lifestyle business? Geographic considerations Becoming a contractor or consultant What does a consultant really do? Taxes and benefits Internships etc. Some companies do internships Some try to do internship to hire Types of Companies Large company fewer interactions outside of department (less personal) more formality takes longer to get things done Laden with process/politics/paperwork etc. Offers a ton of projects; Variety of passions/projects, more opportunities can get laid off out of nowhere - less connection between you and your job security Less scrutiny on each individual employee Structure Small companies Get involved in a lot of projects very easily = more impact No process, take initiative to get things done (fix your own problems) very focused; Lives & breathes the one project - not good if you want to experience more than one type of thing Earlier in your life, it is easier to take risk No room/limited room for mistakes (Spotlight) Easy access to higher-ups Company depends more on you A whole buncha fun, all of the time Conversely, a whole buncha work, all of the time  How funded are you guys?  or CrunchBase (http://www.crunchbase.com/) Differences Differences: more beaurocracy and processes in large companies, whereas small companies demand more self-reliance and are more focused Don’t assume that any job will be secure/last forever Can be a financial issue but also means that you aren’t stuck in a job for life find out about the runway for startups May be easier to get a job if willing to move to an area with fewer people with your skill set What’s a  Lifestyle Business  Doesn’t grow (not designed to grow exponentially) Gives a decent, liveable salary–supports the lifestyle its employees want to maintain The lack of prospective growth can hurt the attitude of employees (cause lack of motivation) Contractor vs. Consultant Mostly the same, self employed and not working directly as an employee; more of how you want to position yourself Implication of contractor - do a lot of work quickly for the compnay Consultant- more of an advising position Consultant would work with the company, contractor for it. Taxes and Benefits Some companies withhold taxes automatically 401K- deposits are not taxed Some companies match a portion of salary 5% match - they will match up to 5% of your income Stock purchase plan vesting - you can buy stock but you cannot get it unless you work at the company for x amount of time Significance of each benefit depends on person ", "tags": "", "loc": "/content/topics/entrep/real_world_kit_notes.md/" },

        {"title": "Starting a company", "text": "Company Founding Incorporation When is it a good idea What are the key reasons forcing the decision? Types of corporations Founding team What is a founder and why does it matter?  Can I be a founder too?  Equity How to divide up the pie Stock options and the option pool Why it exists and how it works Vesting Percentages Building a company Hiring Who should be on the founding team? interviewing How fast do you hire? What do you look for? How do you decide? Company Culture Titles Salaries - how much? Giving feedback Fairness Benefits Offices, office space, remote work, dogs Secrecy/Confidentiality When things go wrong Firing Layoffs Legal issues Lawsuits ", "tags": "", "loc": "/content/topics/entrep/starting_company.md/" },

        {"title": "Startup Funding", "text": "Funding Models Different Funding Models Friends and Family Consulting/Work on the side Angels - Individuals or in groups (e.g. Walnut or Common Angels) Venture Capital - Organized as funds - two sided (e.g. North Bridge or NEA) Incubators/Seed funding companies (e.g. Y-Combinator or TechStars) Crowdfunding (Banks) Reference: Different Kinds of Investors Venture Capital What is the process Rounds of investment How valuation changes Term sheets Liquidation preferences will turn your hair grey. Ideal First Round Funding Terms Sequence of events Founders have an idea - investors have money It’s a contract between founders and investors Result is a new corporation owned partially by founder and partially by investors Look at eRoom term sheet. Rounds of financing What is a round How does it end? Liquidity Event Seed/Angel, A-Round, B-Round, … IPO or Acquisition* Let’s work an example on the whiteboard What you negotiate over Valuation and Investment amount are the key parameters How term sheets turn into  deals  What’s a seed deal? Should you or shouldn’t you? What are VC firms really? General and Limited Partners Why do people love/hate vcs? ", "tags": "", "loc": "/content/topics/entrep/startup_funding.md/" },

        {"title": "Working in teams", "text": "These notes are based on experience with student run teams. I have seen them succeed and have seen them struggle. Remember, you are not trying to become best friends with your teammates. You are trying to get something done! Norms One of the big challenges is to find time to meet, so try to be flexible. As a team, choose a fixed time and place to meet every week. Be flexible. Your first meeting is very important. Each member honestly say what your personal goals are for this course: This course is my most important, I really care and will do anything to be successful Or, I have a heavy courseload, I will do what I can but I have to balance Or, I am perfectly happy with a  B , don’t expect intensity from me. If everyone knows each other’s perspective this will set expectations Each member of the team is responsible for their own work and for the welbeing of the team Talk about how you will make decisions: Democratic vote Decide or chose a leader to have final say Divide up the domain (front end/back end/ etc) and assign it to people. Technical Create a github repository for all your code from the very start Create a Trello project to keep track of tasks and assignments Create a Google Drive for documents (specs etc.) Partition the work as much as you can to allow each person a bit of independence Conflict Working in teams can suddenly become CHALLENGING There is a non-zero probability that you will not get along with someone in your team Be ready for this and take it in stride.  Whoops, there it is!  You are not married, you are not best friends, you are just working on this project, now Don’t try to resolve the conflict in email, it never works! ", "tags": "", "loc": "/content/topics/entrep/working_in_teams.md/" },

        {"title": "Elevator Pitch exercise", "text": " We are going to try our hand at designing an elevator pitch for a product or service that you know well. Think about the purposes of an elevator pitch like we discussed in class, or any references you can find on the web. You can also refer to Elevator Pitch Break into teams of 3 (different from the Term Project teams) and discuss the problem. Come up with the best elevator pitch for one of these products would be. While you don’t want a fixed script you do want to make sure you write down all the key points or phrases to make sure you don’t leave anything out. Meet with your sister team and compare what you came up with and then refine to produce one unified result. Prepare to deliver the pitch and also give an explanation of what you are trying to achieve with each piece of it. Here’s the list Team 1 and 2: Harley Davidson Team 3 and 4: Godiva Chocolates Team 5 and 6: Brandeis University Team 7 and 8: Amazon Team 9 and 10: NEST Thermostat Time: 10 + 10 minutes ", "tags": "", "loc": "/content/topics/exercises/elevator_pitch_exercise.md/" },

        {"title": "Peer Feedback Session", "text": " Read the other team’s Draft 0.3 of Frame 1 Report Have a discussion and constructive criticism Be open minded! Be honest! Reviewee and reviewer teams: Listen carefully and take notes Consider: Effort/Seriousness of purpose. How well is the team thinking in a Lean Startup way. Are they going to be able to develop the idea to a real business plan? Can you see the effort put into it? How well is their presentation in the actual document> Product How carefully is the team thinking about the product? How can their product be improved? How plausible is the concept? Try not to focus only on little details. Is there a pivot, scale up or down or any other kind of pivot? Prospects: How realistic is this product. Can you see an angel investor putting in $100K to fund it’s initial development and prototype? How would it do on Kickstarter? Can you imagine a persuasive video for it? How would it do on Sharktank? Take 30 minutes; Feel free to leave the room for your meetings. Make sure you capture a response to each of the 3 considerations above and include a grade with it. Homework for next class will be: A write up of how you assessed the three considerations of the other team’s product. A write up summarizing what the other team and you heard in terms of feedback about your product. ", "tags": "", "loc": "/content/topics/exercises/frame_1_report_peer_review.md/" },

        {"title": "IP Scenarios", "text": "Patent: Wikipedia:  A patent (/ˈpætənt/ or /ˈpeɪtənt/) is a set of exclusive rights granted by a sovereign state to an inventor or their assignee for a limited period of time, in exchange for the public disclosure of the invention. An invention is a solution to a specific technological problem, and may be a product or a process.[1]:17 Patents are a form of intellectual property.  A patent: is expensive to prepare needs lawyers may or may not be granted will be expensive to ‘defend’ Trade Secret Wikipedia: The precise language by which a trade secret is defined varies by jurisdiction (as do the particular types of information that are subject to trade secret protection). However, there are three factors that, although subject to differing interpretations, are common to all such definitions. a trade secret is information that: is not generally known to the public; confers some sort of economic benefit on its holder (where this benefit must derive specifically from its not being generally known, not just from the value of the information itself); is the subject of reasonable efforts to maintain its secrecy. A trade secret: is inherently present, simply by keeping a secret secret has to be truly unique not common sense or widely known needs to be managed with appropriate  NDA  is more defensible if properly kept secret Copyright: Wikipedia: Copyright is a legal concept, enacted by most governments, giving the creator of an original work exclusive rights to it, usually for a limited time. Generally, it is  the right to copy , but also gives the copyright holder the right to be credited for the work, to determine who may adapt the work to other forms, who may perform the work, who may financially benefit from it, and other related rights. It is a form of intellectual property (like the patent, the trademark, and the trade secret) applicable to any expressible form of an idea or information that is substantive and discrete.[clarification needed][1] A Copyright is: again is inherently present, by being the author of something can apply to many kinds of ‘work’, text, images, videos, user interfaces more difficult to defend as you go down the list Examples to think about: The Nest industrial design The clicking sound a Nest makes when you rotate it The use of two motion detectors inside the Nest Pito’s course curriculum documents (like this paper) Technique that Waze App uses to correctly predict my arrival time Coca Cola secret recipe Technique that Waze uses to collect and share individual cars’ position and velocity Protocols that Waze uses to communicate between smartphone and server HTTP Protocol specification The  aeron  chair Pivot Table feature in excel. The particular physical design of a USB-3 plug and jack The particulars of the USB-3 electrical interface and signal protocol The particular design of the new iPhone 5  Lightning  connector The signals and protocols for each of the pinouts on the Lightning connector Bittorrent ", "tags": "", "loc": "/content/topics/exercises/ip_exercise.md/" },

        {"title": "NEST thermostat - UX", "text": " Nest Thremostat Technical Architecture Break into 3 teams randomly and work on this for 10 minutes Discuss and come up with a block diagram which reflects all the major elements of the architecture of the whole NEST system, not just the thermostat alone, and not just what is installed in the owner’s home. Also draw lines between the elements that indicate how they talk to each other. Present your findings to the class (3 minutes each team.) ", "tags": "", "loc": "/content/topics/exercises/nest_ux_exercise.md/" },

        {"title": "(Offline) Smell Exercise", "text": "What are smells? Summary of Code Smells Feel free to google for code smells, you will find lots of information. Preparation On your own, take a look at the code below. You can copy it into your own text editor Get it to run, and understand what it does. You might have to experiment a little and learn some new Ruby. Study the code. Concentrate on two code smells: The unusual way that params.each works (line 3). Try to figure out what exactly that line is doing. Yes it’s pretty clever but why did I write it that way, and what are some problems with that? The convoluted way that price is computed (line 27+). Generally when you have a nested calculation like that, and secondly when a class has some kind of  code  to distinguish types, this is a code smell and tells us that there’s room for improvement. And of course, this method is much longer than it should be. Instructions On your own, try to come up with how to improve the code. You will be doing some  refactoring  which is a fancy way to say changing the code that is written without changing it’s functionality in any way. Take 30 minutes or less doing this. Find 1 or 2 other students in our class to work with. This can be in person or over email. Discuss each person’s views on the smells. Why are they a problem? How could they be improved? Together write the best improved version of this program using your best ideas. Write up a joint summary (PDF) of your work (remember to include your names!). Discuss: The problems you all saw with the original code What new Ruby you had to learn to accomplish this What does your improved code looks like? In what ways do you feel it’s a solution? Here’s the code: 1class MountainBike 2 3 TIRE_WIDTH_FACTOR = 250 4 FRONT_SUSPENSION_FACTOR = 100 5 REAR_SUSPENSION_FACTOR = 150 6 7 def initialize(params) 8 params.each { |key, value| instance_variable_set  @#{key} , value } 9 10 @commission = 0.25 11 @front_suspension_price = 95.0 12 @rear_suspension_price = 67.0 13 @base_price = 490.00 14 end 15 16 def off_road_ability 17 result = @tire_width * TIRE_WIDTH_FACTOR 18 if @type_code == :front_suspension || @type_code == :full_suspension 19 result += @front_fork_travel * FRONT_SUSPENSION_FACTOR 20 end 21 if @type_code == :full_suspension 22 result += @rear_fork_travel * REAR_SUSPENSION_FACTOR 23 end 24 result 25 end 26 def price 27 case @type_code 28 when :rigid 29 (1 + @commission) * @base_price 30 when :front_suspension 31 (1 + @commission) * @base_price + @front_suspension_price 32 when :full_suspension 33 (1 + @commission) * @base_price + @front_suspension_price + 34 @rear_suspension_price 35 end 36 end 37 38 def owner 39 @owner 40 end 41 42 def to_s 43  Mountain bike - owner: #{owner}, off road ability: #{off_road_ability()}, price: #{price}  44 end 45 46end 47 48pitos_bike = MountainBike.new(:owner =>  Pito , :type_code => :rigid, :tire_width => 2.5) 49puts pitos_bike 50 51ricks_bike = MountainBike.new(:owner =>  Rick , :type_code => :front_suspension, :tire_width => 2, :front_fork_travel => 3) 52puts ricks_bike 53 54 55 56 ", "tags": "", "loc": "/content/topics/exercises/offline_smell.md/" },

        {"title": "Object Oriented Design Exercise 1", "text": "Team practice 5 minutes: Work on writing the code by yourself 10 minutes: Get together with 2-4 people nearby to come up with a refined combined best of breed solution. 10 minutes: We have a class discussion about some of the solutions Problem Garagage, Levels, Vehicles Vehicle Types vs. Vehicle instances Vehicles Check in - is there free space - what time - Park the car Vehicles Leave - may need to be charged ", "tags": "", "loc": "/content/topics/exercises/oo_design_exercise_1.md/" },

        {"title": "Pricing Model Exercise", "text": "Excercise 4 groups, random, 20 minutes You are a 10 year old entrepreneur running a neighborhood lemonade stand. You want to make some money doing this. What are some models that you could put in place? Charge 50 cents per glass of lemonade Chare 25 cents for a small, and $1.00 for a large lemonade There are many other possibilities Work with your team on the following Come up with many variants of pricing models as you can Try to come up with a classification of those models, in other words look for the patterns, for example: what is being charged for, what is free? who is paying, who is getting something for free, what costs are fixed and which ones are variable, and so on. Prepare to present the results using the whiteboard if necessary. Discuss What are some principles we learn from this exercise? ", "tags": "", "loc": "/content/topics/exercises/pricing_model_exercise.md/" },

        {"title": "Refactoring and Smell Exercise", "text": "Your assignment On your own Clone this repository to your portfolio so you can work on it: https://github.com/pitosalas/refactor_first.git Run the rental_test.rb unit test. Each  dot  is a passing test Read it and understand all the files. See the Tour of the Code below. Read my description of the Smells In The Code below. Read this detailed chapter about the  Compose Method refactoring  from a famous book: Compose Method Refactor the program to make it better Use the unit test to make sure that your program continues to work whenever you make a change. Find one or two other students to work with (total of 3 students max per group) On your own, try to come up with how to improve the code. You will be doing some  refactoring  which is a fancy way to say changing the code that is written without changing it’s functionality in any way. Take 30 minutes or less doing this. Find 1 or 2 other students in our class to work with. This can be in person or over email. Please keep it honest and make sure the other students did the  on your own  part also and really worked on the code. Discuss each person’s views on the smells. Why are they a problem? How could they be improved? Together write the best improved version of this program using your best ideas. Write up a joint summary of your work (remember to include your names!). Discuss: What new Ruby you had to learn to accomplish this Explain each change you made an why you made it To give me useful feedback How much time did you work by yourself (each name) How much time did you work as a group What do you think of this assignment? Combine the PDF of the summary and all the new .rb files into a .zip file and submit that Tour of the code: a simple movie rental store rental_test.rb I am using a simple testing framework called  minitest . This is your first exposure to unit testing, a topic we are going to go much deeper into. It is all just regular ruby Line 6: a set of tests is given a name with a describe block line 7: Each time a test is run, the setup block is called to prepare variables line 17: Each individual test may start with an it block line 19: A must_equal method can be called on anything to check that the value is what is expected. You can have many it blocks for many individual tests If any of the must equal blocks fail that is displayed for you. You can run the test simply by doing ruby rental_test.rb because it is a regular ruby file movie.rb Movies have a title and a price code Movies can have one of three price codes rental.rb One act of renting a movie Captures what movie is rented, and for how many days Line 6: Notice the parallel assignment, equivalent to two statements, @movie = movie; @days_rented = days_rented customer.rb One customer, tracks the customer’s name and rental history The key method is statement. It returns a statement of the customers rental history for the customer, what movies were rented, how much each cost, and also accounts for their accumulated frequent renter points Line 11: @rentals << arg means to add a new element at the end of the array @rentals Line 22: the format Movie::REGULAR means to look inside the Movie class for a constant called REGULAR Smells in this code I see several smells in this code. Do you? The statement method is way too long. Also it has a case statement based on a kind of a type_code. And definitely it has multiple responsibilities. There are other smells also. We are going to approach fixing the long statement method by appliying a refactoring called  Compose Method . There are lots of links about Compose method that you can read up on. My summary of it is: Transform a long method so that you can readily understand it’s logic Do this by identifying groups of lines which can be grouped logically Move each of those lines into a separate method. It’s a good sign if you have a meaningful, intention revealing name for that method In the end, transform the original method’s logic into a small number of intention-revealing steps at the same level of detail. Notice again the use of a  type_code  to distinguish the three kinds of movie. Like I said in the last exercise, this is a likely code smell and ought to be eliminated. ", "tags": "", "loc": "/content/topics/exercises/refactor_ex.md/" },

        {"title": "Smell Exercise", "text": " Take a look at the code below. You can copy it into your own text editor Run it and understand what it does Concentrate on two code smells: The unusual way that params.each works (line 3). Try to figure out what exactly that line is doing. Yes it’s pretty clever but why did I write it that way, and what are some problems with that? The convoluted way that price is computed (line 21). Generally when you have a nested calculation like that, and secondly when a class has some kind of  code  to distinguish types, this is a code smell and tells us that there’s room for improvement. And of course, this method is much longer than it should be. Exercise: Think: For 5-10 minutes, try to come up with how to improve the code. You will be doing some  refactoring  which is a fancy way to say changing the code that is written without changing it’s functionality in any way. Pair: For 5-15 minutes, discuss your solutions or ideas or questions with one or two other students sitting near you. Write an improved version of this program using the best ideas from all of you. Share: I will invite various groups to talk about their solutions and proposals and bring you up to the board to present. Discussion What new Ruby did you have to learn to solve this? Is the new code shorter or longer than the old one? In what ways do you think it’s an improvement? Do you want to see my solution? Here’s the code: 1class MountainBike 2 3 TIRE_WIDTH_FACTOR = 250 4 FRONT_SUSPENSION_FACTOR = 100 5 REAR_SUSPENSION_FACTOR = 150 6 7 def initialize(params) 8 params.each { |key, value| instance_variable_set  @#{key} , value } 9 10 @commission = 0.25 11 @front_suspension_price = 95.0 12 @rear_suspension_price = 67.0 13 @base_price = 490.00 14 end 15 16 def off_road_ability 17 result = @tire_width * TIRE_WIDTH_FACTOR 18 if @type_code == :front_suspension || @type_code == :full_suspension 19 result += @front_fork_travel * FRONT_SUSPENSION_FACTOR 20 end 21 if @type_code == :full_suspension 22 result += @rear_fork_travel * REAR_SUSPENSION_FACTOR 23 end 24 result 25 end 26 def price 27 case @type_code 28 when :rigid 29 (1 + @commission) * @base_price 30 when :front_suspension 31 (1 + @commission) * @base_price + @front_suspension_price 32 when :full_suspension 33 (1 + @commission) * @base_price + @front_suspension_price + 34 @rear_suspension_price 35 end 36 end 37 38 def owner 39 @owner 40 end 41 42 def to_s 43  Mountain bike - owner: #{owner}, off road ability: #{off_road_ability()}, price: #{price}  44 end 45 46end 47 48pitos_bike = MountainBike.new(:owner =>  Pito , :type_code => :rigid, :tire_width => 2.5) 49puts pitos_bike 50 51ricks_bike = MountainBike.new(:owner =>  Rick , :type_code => :front_suspension, :tire_width => 2, :front_fork_travel => 3) 52puts ricks_bike 53 54 55 56 ", "tags": "", "loc": "/content/topics/exercises/smell_exercise.md/" },

        {"title": "User Experience Site Review", "text": "Applying this to real sites Let’s look at these sites Heroku. Lets look around it purely from a UX perspective and see what we like and don’t like about. Can you see principles that it satisfies and that it contradicts? Noteflight - Can you or can’t you assume that the user is a musician, or knows music notation? Split into groups of 2 Split into groups of 2, each pick a different one from below without checking what it is. Make notes about what’s good and/or bad about each one? And, specifically refer to one of the principles we have discussed Site 1 Site 2 Site 3 Site 4 Site 5 Site 6 Site 7 ", "tags": "", "loc": "/content/topics/exercises/ux_review_exercise.md/" },

        {"title": "CSS (the good stuff)", "text": "Intro CSS stands for Cascading Style Sheets Key word there is  Style  as in  what things look like  HTML by itself, when rendered in a browser, shows everything in a vanilla  black and white  style HTML file linked to a corresponding CSS with a link tag in the head section of the html file: <link href= css/bootstrap.min.css  rel= stylesheet  type= text/css > You can have multiple <link>s to css files, and they act as one big file The following are NOT RECOMMENDED You can have css statements directly inside the <head> section of an html file You can even have css statements attached directly to an html tag, e.g. <p style= font-size:200%; > Purpose CSS sole purpose is to add ‘styling’ to html pages Styling: color, typography, spacing, positioning, animation, and so on However it can sometimes look like it’s adding major new functionality Discussion: CSS experts: are these statements 100% true? Can you find exceptions? Syntax, in general Syntax of css is very simple, yet very powerful. Behavior can be confusing. How powerful: Look at CSS Zen Garden Example p { color:red; text-align:center; } p is the selector. Indicates what tag(s) we want to add the style to {} enumerates the styles color: red; parsed as property : value Don’t forget the semicolon after the property:value (but not after the {}) Note: There are huge numbers of properties and values: CSS Reference CSS Selectors Could write a whole course just on them (exagerating) Building blocks: tag itself, e.g. p, or li, or body etc. (see html doc) class which is decorated with a period, so, for examle, .chapter id which is decorated with a # sing, so, for example, #error The important selectors are just tag, class and id. The challenge is in how they are combined. Selector combinations CSS Element ul { font-size: 12px; } Class .front-page { font-size: 125%; } ID #remark { font-style: italic; } Compound ul#remark.front-page { display: none; } Compound .front-page.headline { background: light-blue; } Simple grouping h1, h2, h3 { color: red; } Descendant .front-page p { font-style: bold; }   …there are more subtler cases. Example CSS: p.warning { color: red; } HTML: <p class= warning > It's important to remember to test the brakes! <p> Notice that it’s really hard to tell what CSS does without looking at the related html Box Model Crucial to understand when working with spacing See Box Bodel Tools  Web Inspector  in your browser (Chrome, Safari, Firefox) Reference: W3CSchools CSS Intro Experiment: CSS Desk ", "tags": "", "loc": "/content/topics/formats/css.md/" },

        {"title": "ERB (with Rails)", "text": "Intro to ERB  Embedded Ruby  One of a class of ‘template languages’ There are many They do a simple job (used to be called  mail merge ) What it does Erb file without any `` blocks remains unchanged `` must contain legal ruby code Let’s look at ErbDemo The code between the angle brackets is evaluated. *And only in the case of `` it’s inserted into the resulting text How it works with Rails ERBs are used primarily in views (also known as view templates in rails) Rails has numerous  helper  methods that work very nicely with erb In  routes.rb : resource or get or path or other command  automatically  defines one or more helpers. In the example below,  sessions_path  was generated by the resources :sessions line in routes.rb ** Reference:** Rails Form Helpers Example <% form_for(:sessions, url: sessions_path) do |f| %> <div> email: <%= f.text_field :email %> </div> <div> password: <%= f.password_field :password %> </div> <%= f.submit  Sign in  %> <% end %> ", "tags": "", "loc": "/content/topics/formats/erb.md/" },

        {"title": "HTML - Hypertext Markup Language", "text": "Introduction Remember HTML is one of the core standards of the www: html, http, uri HTML is a variant of XML. Many versions. Current/latest is html5 Minimum Example General structure of all html files. They all have this. <!DOCTYPE html> <html> <head> </head> <body> </body> </html> Tags Very common tags <h1>Largest header</h1> <a href= http://www.google.com >Link tag</a> <p>A paragraph of text</p> <ul>A bulleted (unordered) list</ul> <ol>A numbered (ordered) list</ol> <li>An item in either kind of list</li> <span>a named selection of text or other info</span> <div>a named block of text or other in a new rectangular block</div> <html>...</html> <head>...</head> <body>...</body> Discussion: What other tags would you say are ‘very common’? More about tags There are a lot lot lot of tags: WWWSchools Tags Expect to look up the not so common ones. Or Play with them online There are many tools for ‘experimenting’: Online Playgrounds for html css and js Like in xml, html tags can and often do have attributes Most common attributes class= and id= In the language of xml and html, these are attributes e.g. <h1 class= chapter >Chapter 1</h1> e.g. <div class= subchapter supplement >Supplementary</div> e.g. <p id= error >Please check the ignition</p> Important! These don’t do anything in html. («- notice I said  IN HTML ) They just create names for elements of the page Names are used in other contexts: css and javascript They can be combined, e.g. <p id= error urgent  class= homework >Please check the ignition</p> Links and Forms and http Remember the HTTP verbs: GET, PUT, POST and DELETE (there are a few more) When I type a URL into the browser, it generates an HTTP GET with that URL When I click on a link (<a href= http://varperrater.com/configuration/23-12-933 >show config</a>) the browser also generates an HTTP GET to that URL. Look at the form code below. When I press  Sign In! , it generates a  POST  to relative url /sessions, with two parameters with these names:  sessions[email]  and  sessions[password]  <h3>Please Log In!</h3> <form action= /sessions  method= post > <div> email: <input id= sessions_email  name= sessions\[email\]  type= text  /> </div> <div> password: <input id= sessions_password  name= sessions\[password\]  type= password  /> </div> <input name= commit  type= submit  value= Sign in  /> </form> ", "tags": "", "loc": "/content/topics/formats/html.md/" },

        {"title": "HTTP - Hypertext Transfer Protocol", "text": "HTTP is a network protocol Mental model: calling a function across a network Client is the caller Server is where the function exists Client receives the result Let’s use telnet to make such a ‘call’ $ telnet example.com 80 $ GET / HTTP/1.1 $ Host: example.com Deconstructing the call  Call  includes: target host (example.com) target port on the host (80) HTTP verb:  GET  (a.k.a. method) (ref: HTTP Method Definitions) address: (the path or  / ) Version of HTTP protocol (1.1) There are lots of other  parameters  that are allowed in this call Deconstructing the returned data from that call (Reference: HTTP Response Fields)  Response  includes: Status code: 200 (see [HTTP Status Codes(http://httpstatus.es)]) Accept-Ranges: bytes (lets the server tell the caller that it has that capability) Cache-Control: max-age=604800, how long this response may be cached) Content-Type: text/html Tells recipient how to parse the result) Date: Thu, 27 Feb 2014 00:33:26 GMT The current date time on the server) Etag:  359670651  kind of a unique-id for caching purposes) Expires: Thu, 06 Mar 2014 00:33:26 GMT (says when the page is required to expire) Last-Modified: Fri, 09 Aug 2013 23:54:35 GMT (When this page was edited) Server: ECS (ewr/1584) (Software running the server) X-Cache: HIT (Page came out of a cache) x-ec-custom-error: 1 (There was no error in the cache) Content-Length: 1270 (Content following this is 1270 bytes) All this is followed by text that we know should be interpretted as text/html What are the HTTP Methods GET, PUT, POST, DELETE Think of them like a reguired first argument to the call The interpretation of the Simplified view of the world Think of the relationship between the client (the user in a browser) and the server (the rails server) as a program calling a function! Call: CallUsingHTTP( GET ,  www.brandeis.edu ,  /index.html ) Returns: Status code, Content type, Content, and potentially more ", "tags": "", "loc": "/content/topics/formats/http.md/" },

        {"title": "JSON (and JSON)", "text": "Introduction Very very similar (see this and this) JSON stands for  javascript object notation  and YAML stands for  yet another markup language  Used in similar applications as xml. Were born because XML was considered too verbose or rich for many more limited applications. Json is much better known at this point. Example  menu : {  id :  file ,  value :  File ,  popup : {  menuitem : [ { value :  New ,  onclick :  CreateNewDoc() }, { value :  Open ,  onclick :  OpenDoc() }, { value :  Close ,  onclick :  CloseDoc() } ] } } The same text expressed as XML: <menu id= file  value= File > <popup> <menuitem value= New  onclick= CreateNewDoc()  /> <menuitem value= Open  onclick= OpenDoc()  /> <menuitem value= Close  onclick= CloseDoc()  /> </popup> </menu> Live coding 1require 'json' 2 3puts  Convert from an array to Json:  4puts [1,2,3].to_json 5 6puts  \nConvert from a hash to json:  7puts ({ name:  Jonathan , birthday:  Dec 1, 1991  }.to_json) 8 9puts  \nConvert from an arbitrary class:  10class Car 11 def initialize make, model 12 @make = make 13 @model = model 14 end 15 16 def to_json 17 {'make' => @make, 'model' => @model}.to_json 18 end 19end 20 21c = Car.new( Toyota ,  Corlla ) 22puts c.to_json 23 24puts  \nAnd the other way around  25name_hash = '{ name :  Pito ,  town :  Arlington }' 26puts JSON.parse(name_hash) 27 28name_list_hash = '[{ name :  Pito ,  town :  Arlington }, 29 { name :  Chris ,  town :  Willemstad }, 30 { name :  Amin ,  town :  Lafayette }]' 31puts JSON.parse(name_list_hash) 32 33puts  \n*** How about converting from XML to JSON?  34require 'xmlsimple' 35 36xml = <<EOS 37<?xml version= 1.0  encoding= UTF-8 ?> 38<student> 39 <name> 40 Pito Salas 41 </name> 42 <gender> 43 male 44 </gender> 45</student> 46EOS 47 48xml_clean = xml.gsub(/\s/, '') 49xml_hash = XmlSimple.xml_in(xml_clean , { 'ForceArray' => false }) 50xml_json = xml_hash.to_json 51 52puts  Input xml string: , xml_clean 53puts  \nConverted to a hash: , xml_hash 54puts  \nConverted to a json string: , xml_json 55 ", "tags": "", "loc": "/content/topics/formats/json.md/" },

        {"title": "URL - Uniform Resource Locator", "text": "Fundamental importance of the URI/URL URI =  Uniform Resource Identifier  Used to be called  Universal Resource Locator  (URL) Because the resources were files on the disk of the server And the URL’s path was really a path! Focus now on the ‘path’ part of the URI e.g. some ugly examples http://roomscheduler.com/reserve/room/3 http://bookstore/gonewiththewind/order/3 http://nyt.com/latest-updates?year=2014 e.g. some good examples http://roomscheduler.com/room/3/request http://bookstore.com/book/412/price http://tourmanager.com/city/boston/tour/tuesday/new There are many ways to structure a url RESTful style of URI design  Representational State Transfer  (See Original REST Paper) Each URI denotes a specific ‘resource’ ‘room 3’ or ‘book 412’ or ‘tuesday tours IN Boston city’ It is usually not a file but something generated ‘on the fly’ Still the same URI should yield the same resource every time (handwave) Each URI is used in combination with an HTTP  method  Get: retrieve the indicated  resource  Put: update value of the indicated resource Delete: delete the indicated resource Post: Create a new instance of indicated resource (some other, less important ones) One of the earliest design questions What do the URLs for my app look like? Conceptually, they are  directory structure-like  URLs There is a coherent  syntax  about them, e.g. http://www.myservice.org/discussion/topics/{topic} http://www.myservice.org/discussion/2008/12/10/{topic} http://www.myservice.org/discussion/{year}/{day}/{month}/{topic} ", "tags": "", "loc": "/content/topics/formats/url.md/" },

        {"title": "XML - Extensible Markup Language", "text": "Background Extremely commonly used. Graddaddy of them all. Totally abstract. Self-describing, cross platform format for hierarchical data Especially in cross-platform/cross-architecture applications Very good support for different character sets Basis for a lot of  open data  Example <?xml version= 1.0  encoding= UTF-8 ?> <student> <name> Pito Salas </name> <gender> male </gender> </student> Characteristics Precise nesting with and (case sensitive) Attributes embedded in tags go to google More info Here’s an example of a really big xml file: Voting Data File An excellent viewer and editor for XML is Xmplify Read more about XML tags at XML TUtorial Discussion: When would you use XML? If you didn’t have XML what would you use? ", "tags": "", "loc": "/content/topics/formats/xml.md/" },

        {"title": "app", "text": "require 'sinatra' # This web server accepts exactly three urls: # example.com/ -> form where the user can add a record # example.com/submit (POST) -> where the form contents is accepted a # new record is creatred # example.com/models -> where the list of models is displayed get '/' do erb :index end post '/submit' do @model = Model.new(params[:model]) if @model.save redirect '/models' else  Sorry, there was an error!  end end get '/models' do @models = Model.all erb :models end ", "tags": "", "loc": "/content/topics/homeworks/app/" },

        {"title": "Affordances", "text": " An affordance is some characteristic of an object that communicates how it is to be operated. A keyhole in a lock tells me that I need a key and where to insert it. A handle on a fridge tells me how to pull it. A bottlecap on a bottle of beer tells me something. But does it tell me to use a bottle opener or just unscrew it? With this context, look around your daily world (room, office, campus) for affordances everywere. Find and photograph a few examples where (visible) affordances were absent, or communicated the wrong thing. Deliverable: Post your photos to Piazza with commentary. ", "tags": "", "loc": "/content/topics/homeworks/hw_affordances.md/" },

        {"title": "Active Record and ORMs", "text": " Do research on the  Active Record Pattern . A pattern is simply a way of arranging code, a common way of solving a design problem derived from research as well as real world practice. This particular pattern has to do with ways of tying databases into object oriented programs in a rich and convenient way. Read Active Record Pattern and also ORM Hate, both articles by a famous OO designer Martin Fowler. ", "tags": "", "loc": "/content/topics/homeworks/hw_orm.md/" },

        {"title": "Paper Prototyping homework", "text": " Practice Paper Prototyping and developing a user experience flow chart: Read: Paper Prototyping, 7 Myths about Paper Prototyping, How to create a UX flow chart With your team, develop a set of single screen paper prototypes connected by arrows that indicate when a user action or event leas to another screen or page. I refer to this as your application process flow. Focus more on the connections between the screens than making super detailed screens. Use separate sheets of paper/images, one for each screen with indications of how you get to another screen. I discourage you from using html or other tools because you are always better off doing a sketch on paper before going to any tools. Team Deliverable: Submit one or more ‘legible’ images. Be prepared to share them in class. ", "tags": "", "loc": "/content/topics/homeworks/hw_paper_prototyping.md/" },

        {"title": "POODR 3", "text": " Read (POODR) Chapter 3. Points to understand: Gear and Wheel have several kinds of dependencies. What are they? Why are dependencies bad? How are things improved when (on page 41) wheel becomes an input to the initializer? Why does she keep using the term  messages ? What is dependency direction, how can it be changed, and how do you know which is preferred? *You are required to do all the examples, by typing them in yourself and getting them to work. Remember that your work should be happening inside your Throughout this course there will be many programming homeworks. You will be organizing them into a coursework portfolio directory with a very specific structure on your computer. That directory will be shared (automatically) with the TAs and Professor/ IMPORTANT You are required to organize your portfolio in a very specific way so that we can automatically review your work. Look way below for the specifics for this particular course. Why In addition to formally grading an assignment that spans multiple classes, in some cases it is very useful to receive help or feedback along the way. By working in your portfolio we will be able to pay attention to your work in progress. Secondly, at the end of the course you will have a nicely organized set of code that you wrote that you will be able to use for your own portfolio as you go out into the world. Grading Every Monday TA will look at your portfolio directory and give it a progress score based on: 1. How current you are with the assignment 1. How well you are applying learnings so far This grade is not meant to assess your work but to give you useful feedback and possibly help to ensure that your actual submission will get a good grade. It counts very little towards your final grade, as part of class participation. The progress score will simply be: 100: You’ve made reasonable progress 90: You seem to be behind or stuck or otherwise having challenges 80: You have not submitted anything Submitting the actual deliverable There will be a specific date by which the assignment should be completed, just like any other homework. After that date, the assignment will be scored in the usual way according to a rubric. Hypothetical Example On Jan 1 the homework is  Begin working on movies-3  On Jan 5 the homework is  Continue working on movies-3  On Jan 8 the homework is  Complete and submit movies-3 for grading  What is in your movies-3 portfolio directory on Jan 5 will be scored for progress. And what is in your movies-3 portfolio directory on Jan 8 will be scored as a formally homework submitted. Directory structure These rules are very specific because we use an automated grading tool (RoboGrade) to do a first pass on your work. Your portfolio directory is called <coursenumber>_<yourbrandeisid>. So for example, it might be cosi166b_cburkh/. Note that the <coursenumber> is complete and all lower case and your <brandeisid> is the part of your brandeis email before the @brandeis.edu Inside the portfolio directory there will be folders with very specific names that will be indicated as part of the homework. So for example, ./movies-1. Dropbox for sharing the directories with us Download and install the Dropbox Desktop application from https://www.dropbox.com/install This will create a Dropbox folder on your local machine. Within this folder, create a folder named <coursenumber>_<yourbrandeisid>. This will serve as the top-level portfolio directory. Using the Dropbox web interface, share this folder with the TAs and instructor. To do this, select the folder, press the Share dropdown, select invite people to collaborate, and add their emails. ", "tags": "", "loc": "/content/topics/homeworks/hw_poodr_3.md/" },

        {"title": "Toy Form Rails Example", "text": "Part 1: Step by Step Create a new rails app (called lostandfound): rails new lostandfound Create a scaffold for the one and only model: rails generate scaffold Item title:string description:text type:string Don’t forget to rake db:migrate Run the server to make sure that you can list, create, change, delete items Add a route to allow the following url: /items/search. It should go to a controller action item#search. Refer to Rails Routing from the Outside In: hint: you will be adding a  Collection Route  (section 2.10.2) Use rake routes to see that this route in fact now exists Add an action to the ItemController called  search  Add a view to views/items that will contain the search form, and define a form in that new view that 1.ill be the search form, using what you learned reading Rails Guide on Form Helpers. For now only worry about displaying the form including the fields for title, description and type, and also have a submit box. You don’t need to actually make it search. Optional: If you want to be fancy – instead of using a text box for the  type  of item, make it a drop down box allowing a specified options such as  book ,  clothing ,  cellphone ,  computer  Make the form actually search. You will have to add an additional controller action to take the info from the form and perform an actual search. Part 2 - Expand the example Update Database Modify the migration for item so that the item database has the following fields: title:string description: text, owner: text, type_id: integer Add a new table called  types  with the following fields: title: string, description: string You should have two files in db/migrations (not three!) Use rake db:migrate:reset to force the database to be deleted and recreated and both migrations reapplied. Add seed data for 20 lost and found items Create an appropriate 1-many relationship between them Test what you have so far to make sure it works. Update UI Add Bootstrap css files Make the form you created in Part 1  Pretty  Add drop down menu to the search form for the  type  and populate it from the second table you created Make the search actually work and generate an attractive list of matching lost and found items Allow user to pick AND and OR Add an additional drop down at the top of the search field that says, Serch for  Any of these conditions (OR)  vs.  All of these conditions (AND)  Update the back end (the controller action) to distinguish those two cases. ", "tags": "", "loc": "/content/topics/homeworks/hw_railsform.md/" },

        {"title": "Reflection on Computer Science", "text": " I would like you to think back about your expectations and hopes about this course before you took it and what you know now. Write up a retrospective blog post thinking about questions such as: To what extent has it lived up to them? How have I changed my views on computer science and software engineers, and what it takes to be one? Do I see a role for myself as an computer scientis, software engineer or entrepreneur in the future? What have I learned about myself as a computer scientist? How have I grown? In what way do I feel better prepared now? In what way have I clarified what I want to do when I graduate? Deliverable: Write up your reflection as a post. ", "tags": "", "loc": "/content/topics/homeworks/hw_reflection_cosi.md/" },

        {"title": "Reflection on Entrepreneurship", "text": "I would like you to think back about your expectations and hopes about this course before you took it and what you know now. Write up a retrospective blog post thinking about questions such as: To what extent has it lived up to them? How do you feel you’ve changed your views on entrepreneurship and what it takes to be one? Do you see a role for yourself as an entrepreneur in the future? How has your thinking and approach about starting something brand new changed? What have I learned about myself as an entrepreneur? How have I grown? In what way do I feel better prepared now? In what way have I clarified what I want to do when I graduate? Deliverable: Write up your reflection as a post. ", "tags": "", "loc": "/content/topics/homeworks/hw_reflection_entrepreneurship.md/" },

        {"title": "Reflection on Presentations", "text": " You’ve now prepared and delivered one or more presentations. I’d like you to reflect on that process. How did you approach the preperation? Why did you decide to include what you did, how did you think about that? How did you feel just before you went on? Did you feel well prepared, were you nervous? If you’ve done more than one for this class, how was the second one different from the one before it? Did the presentation go as you hoped? Did anything surprise you? In retrospect, do you feel that it went as well as it could? What do you think you would do differently next time? What would you keep the same? What is the importance of giving presentations to an entrepreneur? Deliverable: Write up your reflection as a post. ", "tags": "", "loc": "/content/topics/homeworks/hw_reflection_presentations.md/" },

        {"title": "Project Team Self and Peer Assessment", "text": " Project Team Self and Peer Assessment You have been working as a member of a small team. I would like you to reflect on that experience in writing. Here are some questions to stimulate your thought, you don’t need to answer each and every one! How effective were you as a team member? Did you enjoy it? Sometimes people on a team take on different roles by virtue simply of their personality and talents. What role did you take on? Often in teams conflicts arise despite everyone’s best intentions. Did any conflict arise in your team? Were you part of the problem or part of the solution? What did you learn about yourself as part of working on this team? Briefly assess yourself and each of your teammates on contribution to team organization, leadership, followthrough, and atmosphere. Give a grade and explain your assessment. Deliverable: Write up your personal reflection and self and peer assessment and submit it to latte. ", "tags": "", "loc": "/content/topics/homeworks/hw_reflection_teamwork.md/" },

        {"title": "REST Origins", "text": " Roy Fielding’s dissertation has been quite influential in the way systems are built. The term REST has really caught on but more than that, he identified an architectural pattern and was able to articulate where it fits into a broad architectural scheme. Now, read: Chapter 5 of Roy Fielding’s Dissertation. And as you read, reflect on how academic research and dissertations like this one can affect, and be affected by, the engineering work done at places like Google and Apple. Think for example about the HTTP verbs and explain how Fielding uses them to expand on the conventional model of web interaction with static pages (GET) and/or forms (POST)Deliverable: Write a blog post contianing your reflection on this ", "tags": "", "loc": "/content/topics/homeworks/hw_rest.md/" },

        {"title": "RTHW 45", "text": " Continue with Learn Ruby The Hard Way. You should be at least up to Lesson 45. You will learn about the wonders of arrays and hashes. Also one of the more advanced ruby features, modules. And now you start getting into somewhat more abstract stuff, object oriented analysis and design.. Remember that your work should be happening inside your Throughout this course there will be many programming homeworks. You will be organizing them into a coursework portfolio directory with a very specific structure on your computer. That directory will be shared (automatically) with the TAs and Professor/ IMPORTANT You are required to organize your portfolio in a very specific way so that we can automatically review your work. Look way below for the specifics for this particular course. Why In addition to formally grading an assignment that spans multiple classes, in some cases it is very useful to receive help or feedback along the way. By working in your portfolio we will be able to pay attention to your work in progress. Secondly, at the end of the course you will have a nicely organized set of code that you wrote that you will be able to use for your own portfolio as you go out into the world. Grading Every Monday TA will look at your portfolio directory and give it a progress score based on: 1. How current you are with the assignment 1. How well you are applying learnings so far This grade is not meant to assess your work but to give you useful feedback and possibly help to ensure that your actual submission will get a good grade. It counts very little towards your final grade, as part of class participation. The progress score will simply be: 100: You’ve made reasonable progress 90: You seem to be behind or stuck or otherwise having challenges 80: You have not submitted anything Submitting the actual deliverable There will be a specific date by which the assignment should be completed, just like any other homework. After that date, the assignment will be scored in the usual way according to a rubric. Hypothetical Example On Jan 1 the homework is  Begin working on movies-3  On Jan 5 the homework is  Continue working on movies-3  On Jan 8 the homework is  Complete and submit movies-3 for grading  What is in your movies-3 portfolio directory on Jan 5 will be scored for progress. And what is in your movies-3 portfolio directory on Jan 8 will be scored as a formally homework submitted. Directory structure These rules are very specific because we use an automated grading tool (RoboGrade) to do a first pass on your work. Your portfolio directory is called <coursenumber>_<yourbrandeisid>. So for example, it might be cosi166b_cburkh/. Note that the <coursenumber> is complete and all lower case and your <brandeisid> is the part of your brandeis email before the @brandeis.edu Inside the portfolio directory there will be folders with very specific names that will be indicated as part of the homework. So for example, ./movies-1. Dropbox for sharing the directories with us Download and install the Dropbox Desktop application from https://www.dropbox.com/install This will create a Dropbox folder on your local machine. Within this folder, create a folder named <coursenumber>_<yourbrandeisid>. This will serve as the top-level portfolio directory. Using the Dropbox web interface, share this folder with the TAs and instructor. To do this, select the folder, press the Share dropdown, select invite people to collaborate, and add their emails. . ", "tags": "", "loc": "/content/topics/homeworks/hw_rthw_45.md/" },

        {"title": "Schema Design Exercises", "text": "Introduction This exercise lets you practice how to design a database. You’ve been introduced to this in preceding homeworks and classes, and this homework is a chance to rehearse the techniques of data modeling again. To review some of the material take a look at: The basics of good database design in web development Data Modeling ActiveRecord Mechanics Notation Use this notation for this work. It contains exactly the same information that you’ve presented before, but in all text It is designed to correspond more closely to what you will be doing in your code Notation  syntax  table name - the name of the individual relational table attribute_name: datatype - an individual column of a table table1 has_many table2 - One to many relationship table3 belongs_to table4 - Many to one relationship Example table users id: integer first_name: text last_name: text dob: date department_id: integer table departments id: integer name: text budget: float departments has_many users Assignment Design as many of these as you can Use the notation above (not a diagram or other fancy thing) Department and employees an employee has a name and a birthday a department has a name, a code, and a budget an employee works in exactly one department Recipes A recipe has one or more ingredients, one or more steps and an author An ingredient has a name, an amount, and an optional sentence of instruction A step has a name, a number and a sentence of text University A student has a first and last name, and a date of birth A university has a name A university has multiple departments A student belongs to exactly one university A student can have zero or more majors (departments) A course has a number and is taught in a department A student is enrolled in 0 or more courses, for which they can have a grade Store A store has a name and a url (e.g. amazon.com) A store has many departments and many products Products are in one or more categories, have a name and a price A customer has a name and a credit limit The customer can place an order An order has one or more products, and a quantity ordered for each An order also has a ship date, a tax amount, and a shipping charge ", "tags": "", "loc": "/content/topics/homeworks/hw_schema_design.md/" },

        {"title": "Sinatra Horoscope Fortune", "text": " Write a very simple Sinatra Horoscope app Implements a server that gives fortunes. The idea is that the server has a way to generate a fortune on command (like a horoscope) and returns it as data for someone else to incorporate in their application. So your server accepts a URL and returns a fortune. Here are the patterns: /fortunes/:n should return fortune #n /fortunes/random should return a random fortune /fortunes/ should returnn a list of all the fortunes What does the server return? NOT HTML! The server returns  data  in the form of JSON. JSON is a textual representation of hierarchical data designed specifically for this purpose. You have already used it in previous homeworks. In Ruby, any Hash can be turned into JSON by doing .to_json Where do the fortunes come from? You need to have some kind of database. That database could be on disk (i.e. using Mysql or Sqllite) or you could just represnet them in an array: ```FORTUNES = [ You will win the lottery ,  You will make an important discovery ,  You will loose your mind ] Feel free to add features to make it more interesting! Work in your Throughout this course there will be many programming homeworks. You will be organizing them into a coursework portfolio directory with a very specific structure on your computer. That directory will be shared (automatically) with the TAs and Professor/ IMPORTANT You are required to organize your portfolio in a very specific way so that we can automatically review your work. Look way below for the specifics for this particular course. Why In addition to formally grading an assignment that spans multiple classes, in some cases it is very useful to receive help or feedback along the way. By working in your portfolio we will be able to pay attention to your work in progress. Secondly, at the end of the course you will have a nicely organized set of code that you wrote that you will be able to use for your own portfolio as you go out into the world. Grading Every Monday TA will look at your portfolio directory and give it a progress score based on: 1. How current you are with the assignment 1. How well you are applying learnings so far This grade is not meant to assess your work but to give you useful feedback and possibly help to ensure that your actual submission will get a good grade. It counts very little towards your final grade, as part of class participation. The progress score will simply be: 100: You’ve made reasonable progress 90: You seem to be behind or stuck or otherwise having challenges 80: You have not submitted anything Submitting the actual deliverable There will be a specific date by which the assignment should be completed, just like any other homework. After that date, the assignment will be scored in the usual way according to a rubric. Hypothetical Example On Jan 1 the homework is  Begin working on movies-3  On Jan 5 the homework is  Continue working on movies-3  On Jan 8 the homework is  Complete and submit movies-3 for grading  What is in your movies-3 portfolio directory on Jan 5 will be scored for progress. And what is in your movies-3 portfolio directory on Jan 8 will be scored as a formally homework submitted. Directory structure These rules are very specific because we use an automated grading tool (RoboGrade) to do a first pass on your work. Your portfolio directory is called <coursenumber>_<yourbrandeisid>. So for example, it might be cosi166b_cburkh/. Note that the <coursenumber> is complete and all lower case and your <brandeisid> is the part of your brandeis email before the @brandeis.edu Inside the portfolio directory there will be folders with very specific names that will be indicated as part of the homework. So for example, ./movies-1. Dropbox for sharing the directories with us Download and install the Dropbox Desktop application from https://www.dropbox.com/install This will create a Dropbox folder on your local machine. Within this folder, create a folder named <coursenumber>_<yourbrandeisid>. This will serve as the top-level portfolio directory. Using the Dropbox web interface, share this folder with the TAs and instructor. To do this, select the folder, press the Share dropdown, select invite people to collaborate, and add their emails. in a new sub directory called  fortunes  * Deliverable: A brief screencast demonstrating that your code works. (see Screencast ) ", "tags": "", "loc": "/content/topics/homeworks/hw_sinatra_fortune.md/" },

        {"title": "(HW) Talking to a real life entrepreneur", "text": " Talking to real life entrepreneurs. I would like you to interview a real entrepreneur that founded a company. Not just anyone who says that they are an entrepreneur but who actually is in the founding team. I prefer it to be face to face, but telephone or email is also acceptable. Many of you might know family members or aquantances who are founders or know people who know. You can also ask me and/or use LinkedIn. Try to get answers to questions such as these(use your own words): What was your first job after your education, and at what point did you know that you wanted to be an entrepreneur? Also, how did you go from wanting to be an entrepreneur to actually starting the company? How did the company develop? How was it successful, how was it not successful? What did you personally do in each scenario? Have you started other companies, and how did they go in comparison? What are some of the personal traits, talents, skills or knowledge, that have served you well as a founder? What is the mistake you feel is made often in founding a company? Deliverable: Write a 1-2 page report on your interview. Try to distill out some lessons. Include a section with your own personal reflection on: what it means to be an entrepreneur, and how you yourself see your entrepreneurship, and what you personally learned and got out of the interview. ", "tags": "", "loc": "/content/topics/homeworks/hw_talk_to_entrepreneur.md/" },

        {"title": "TDD homework", "text": "General Don’t use inheritance! Test ALL the methods (including initialize if applicable) Here’s an example that gives the whole thing away: TDD demo NB: The concepts are the same, but the syntax of minitest, minitest/spec and rspec are a little differenbt. I recommned minitest/spec Instructions Develop the following simple program using Test Driven Development Meaning, write the tests FIRST and then write the classes You may use minitest, minitest/spec or rspec. I recommend minitest/spec. Specifics - what you will need A class called Point to represent a point on a plane (i.e. x and y coordinates, floats, representing meters from the origin) A class called Rectangle that represents a rectangle with two points Rectangle#area (in square meters) A class called Trangle that represents a triange with three points. Triangle#area (in square meters) A class called Circle that represents a circle by a point and a radius (float) Circle#area (in square meters) A class called Scene that represents a scene consisting of one or more rectangles, circles and triangles. Scene#shape_count (how many shapes there are) Scene#total_area (sum of all the areas even if they overlap; don’t worry about computing intersections.) Scene#add_shape (adds a shape to the scene) Scene#remove_shape (removes a shape from the scene) If you want to go further If you want to push yourself add some more methods by writing a test, and then implementing them. For example, Scene#copy_shape, Shape#resize_rectangle, Shape#is_square?, Line.new(point, point), Rectangle(point, point), Line#paralel(Line), are possible ways to go further. ", "tags": "", "loc": "/content/topics/homeworks/hw_tdd.md/" },

        {"title": "What happens to a url", "text": "How does a browser process a URL? When I type http://www.salas.com:8080/toplevel?p=1 what happens inside the browser, what actions does it take, what messages does it send out, what messages does it receive? Deliverable: Research this on the web or in books and come up with a numbered list of actions, with each step in the list being a link to a source on the web that you used to figure that out. ", "tags": "", "loc": "/content/topics/homeworks/hw_what_happens_url.md/" },

        {"title": "Build Measure Learn", "text": " Startup needs to: Decide what your goals are right now (they change over time!) Analyze them to determine metrics for growth and success Loop to tune the engine of growth: Measure current metrics Conduct Experiments to try and move reality towards Rinse and repeat until you have tuned your engine AKA:  Iterating  Put in different terms: Are you making your product better? How do you know? Are the changes you are making affecting the measures you care about? How do you decide what measures you care about? Back to first principle:  Is this a business or a hobby?  Basic pattern: Use an MVP to get real data to test a belief Make a series of micro changes (parallel or serial) Measure whether metrics are better or worse When you feel like you are not making real progress Perhaps pivot if micro changes are not moving the needle in the right direction Start with the highest return (cost/risk/reward) assumption Illustration ", "tags": "", "loc": "/content/topics/leanstartup/build_measure_learn.md/" },

        {"title": "Business Model Canvas", "text": "Background of the Business Model Canvas One way to sructure strategic planning, analysis Checklist helps cover all the bases when designing a business model Handy if have one of several possibilities that you are examining Note that a single business might operate based on two different models (but it’s more complex to do that and usually not the right way to go.) Building Blocks of a business model (From book: Business Model Generation) Value Proposition (the offer) What problem do we solve for the customer? What product/service do we deliver to the customer? How do we do that compared to what they do today? There’s more than  solving a totally new problem/needs  Examples: performance, customization, convenience, price, etc. Customer Segments What customer or groups of customers? And who are the most important ones? What makes a distinct segment? If a set of customers require: A different offer, different channels, different types of relationships, different payment models, etc Examples: Mass market? Niche market? Segment of larger market? Two sided market? Note that you might be going after more than one! Revenue Streams (or pricing model) Per customer segment/offer, who pays and what do they pay for? Examples: simple purchase; usage fee ( pay by the drink ); subscription; licensing; in- game -purchases Channels How do you reach a customer? How do they want to be reached? Are you able to reach them in that way? You need to figure out how to: generate awareness, allow evaluation, enable purchase, deliver the product, provide after sales follow up Examples: Web site, Direct Sales, Reseller web site (e.g. Amazon), Stores, Wholesaler. Customer Relationships What kind of ongoing relationship does your customer want with you? Examples: personal email; self-service support site; face-to-face; online community; co-creation (Key) Resources Go a level deeper than just  money . Identify all the things you will need For example: expertise (we need a bigdata person), IP (we need to license music), physical (we will need a shop floor to do assembly.) (Key) Activities This might seem obvious but it’s worth calling out, because it’s so ‘obvious’ Examples: software development; packaging and shipping; manufacturing; support; marketing; manufacturing; licensing; etc. (Key) Partnerships What outside entities do you have to establish trust with for your model to work? Suppliers? Resellers? Distributors? Maybe a web distributor like Amazon? Maybe Apple, because they have to approve your app. Are you licensing something from a partner? Cost Structure ‘Simply’ all the costs needed to run the businss model Fixed costs, per-unit variable costs, per-employee variable costs Based on Key resources, key activities and key partnerships ", "tags": "", "loc": "/content/topics/leanstartup/business_model_canvas.md/" },

        {"title": "Business Model Intro", "text": "Business Model Term’s definition is not set in concrete (as usual) Blueprint for how a business will function Describe how a business will creates, delivers and captures value Incorporates the value proposition, the pricing, the growth model and more In a way this is the final deliverable for the term project :) Business Model Canvas Pro Tip As you watch this very brief video, keep your term project's business in mind! What is its value proposition? Customer Segments? etc. etc. References Book: Business Model Generation Poster: Business Model Canvas Another methodology with book and poster and if you want, paid courses ", "tags": "", "loc": "/content/topics/leanstartup/business_model_intro.md/" },

        {"title": "Cohort Analysis", "text": "What is Cohort Analysis? A metrics analysis technique Look of metrics of separate groups of users or customers Surgically measure the impact of changes, pivots, and experiments Role in a startup Just another tool Key to avoiding vanity metrics and devloping actionable metrics Look at the lifetime a customer and identify key stages Make sure the stages can be measured and are associated with a specific user Make sure that they are meaninful to the business and the engine of growth Measure a baseline with current product Changes can now be measured to see if they had desired impact Step-by-step: Identify key stages of relatioship with customer, e.g. Register, Activate, Retain, Refer, Pay, Cancel Measure customers at each stage Analyze impact on financial model Simple example (on whiteboard) Micro-Instagram Install app Create an account Activate account Post a photo More detailed example Review Engine of Growth Example ", "tags": "", "loc": "/content/topics/leanstartup/cohort_analysis.md/" },

        {"title": "Crossing the Chasm", "text": "Crossing the Chasm A concept that reminds us that the way we ‘approach’ a market changes depending on the maturity of the market From a a famous book: Crossing the Chasm, by Michael Moore, considered a seminal work. Key Lessons Realize where you are in the adoption cycle. Each stage calls for a different approach Realize that each stage gets information from fans in the previous stage so you need to really make sure They are fans They communicate with the next stage Growth can easily stall when going from Early Adopters to Early Majority Innovators and Early adopters (Earlyvangelists) Seek out new technology to solve their (or their companies’) problems, not just for the sake of owning the newest technology. Don’t rely on references from others to make buying decisions. While they are in- fluenced by other early adopters, their main concern is solving a known problem. Eric Ries and Steve Blank call Early Adopters  Earlyvangelists  to reflect that they are your biggest evangelists. Earlyvangelist Other reading Rethinking Crossing the Chasm Book Summary of Crossing the Chasm ", "tags": "", "loc": "/content/topics/leanstartup/crossing_chasm.md/" },

        {"title": "Elevator Pitch", "text": "Elevator Pitches Here’s an example, please critique it:  Do you know how when someone is new to a city or visiting it, it's hard to know the hotspots and the fun places to go? Or say you have 2 hours to kill while you wait for your flight? We're building a smartphone app which will give you a few focused recommendations based on where you are, what you want to do and how much time you have. We'll crowdsource recommendations, and have game mechanics to make it fun. We're not sure yet how we'll make money but we're thinking along the lines of coupons or sponsored recommendations. It will be designed as a platform so we can easily release it for other cities. Tips for Elevator Pitches You should have it at the tip of your tounge so when you run into the president you can answer the question:  So, what’s your business do?  in a clear, interesting, catchy, provocative manner. Purpose of an elevator pitch is to sell. To get the listener to say,  hmm, let’s sit down so you can tell me more.  An elevator pitch is meant to be spoken or read to a potential investor or board member Put yourself in the listeners shoes, really! Imagine that they say,  So What?  in response to each of your lines If there’s a very obvious objection, respond to it right away. Hook them with the first words out of your mouth. Your goal is that they say,  Tell me more! , or  Please show it to me! , or best,  I need one of those, I will pay anything for it!  ", "tags": "", "loc": "/content/topics/leanstartup/elevator_pitch.md/" },

        {"title": "Engine of Growth", "text": " Some basic questions to ponder Is it a business or a hobby? What is the objective? Is it sustainable? How much investment does it need? How do YOU define success? Revenue Where does the revenue come from? When does it arrive? What metrics drive it? (revenue drivers) Non-revenue goals It’s not always about money Number of people vaccinated Number of students who get an internship Number of voters who vote Some models of growth Sticky Engine of Growth (subscription) Viral (users invite other users) Paid (simple purchase, one shot) Accessory (in product purchases) ", "tags": "", "loc": "/content/topics/leanstartup/engine_of_growth_intro/" },

        {"title": "Four Questions Every Entrepreneur Should ask", "text": "Four Questions Every Entrepreneur Should Ask Do consumers recognize that they have the problem you are trying to solve? If there was a solution, would they buy it? Would they buy it from us? Can we build a solution for that problem? The tendency of all computer science, IT, entrepreneurs, everywhere, always is to start with question 4. ", "tags": "", "loc": "/content/topics/leanstartup/entrepreneur_four_questions.md/" },

        {"title": "Conversions", "text": " When you design your web presence, you need to decide clearly what action you want the visitor to take when they get there. How do you decide that? Well ask yourself, why do I need this web site? Do you want the user, e.g. to register? to place an order? to like you on facebook to download your app? When the user does the action, we call that ‘a conversion’ This is a term-of-art A web site can have more than one conversion. Excercise: Break up into teams and pick one of the following sites and determine what their desired action is: twitter.com, facebook.com, amazon.com, brandeis.edu, whitehose.gov, salas.com  A Good User Interface has high conversion rates and is easy to use. In other words, it’s nice to both the business side as well as the people using it.  Read this: A good UI ", "tags": "", "loc": "/content/topics/leanstartup/getting_conversions/" },

        {"title": "Scaling techniques", "text": "Article by Jason Calacanis about Scaling It’s much easier to sit in a room and dream about the killer feature that will save your startup. I’m going through this right now with Inside.com, and I see my other startups work on this as well. It’s fine to explore new features, test things, and even  build for yourself.  In fact, one of the best things to do is  build for yourself.  However, there is a point in time where you’ve created 5, 6, 7, or 10 features for your product and it’s time to say  enough  and start studying the metrics, doing user interviews, and testing. As far as I’m concerned this happens at 1,000 daily users for a consumer product and 250 daily users for an enterprise product. At that point you have enough users to solicit feedback and break people into two groups to do A/B tests. We are getting thousands of daily users at Inside.com and we are very focused on two things: a) figuring out what behaviors increase people’s time in the App and b) figuring out how to get new people into the product. Founders don’t invest in metrics & community In order to really grow a startup you need to increase your knowledge of how your product is being used. There are two basic ways to do this: study people’s behavior and talk to your users. In terms of metrics you need to figure out how people are using your product with analytics packages like Localytics (mobile), Google Analytics (web), Chartbeat (live web; disclosure, I’m an investor) and Mailchimp/Sendgrid/Dyn (mail open rates, conversions, etc.). In terms of talking to users I created three groups for Inside (alpha, beta, and delta) in the early months using a Google Group for each. I solicited members for these groups from inside the Inside.com app (literally said  email us to join our beta group to talk about new features! ). Everyone on our team joined these lists and listened. It was eye-opening: our users were wildly more sophisticated than we thought! They were really interested in very, very specific features and they were super loyal to us. Huge win. Founders don’t budget properly I don’t know what the proper budget is for startups, but I actually think growth should be at least 25% of your budget after the product is completed – perhaps 50%. The problem is that you need this huge group of people to launch a product, and after the product is done you need half that amount to maintain it. Of course, hiring 15 people for six months of building the 1.0 and then shifting gears and firing five in order to put that money to work on buying installs, ads, and doing marketing is really not practical – it’s mercenary and would kill your culture. So what most folks do is they burn $150k a month on 15 team members and an office, and once the product is in market they say  we have no budget left for marketing this awesome product!  Then they look at their resources, the team they do have, and they default back to the  feature race,  adding more features. A startup should basically fund itself with an expectation that they will spend 2/3rds of the eventual monthly budget building (say $100k) and then pop in the $50k a month in marketing in month seven when they launch and learn how to spend it effectively (or if they even should market the product – they might not want to if it’s a dog!). Founder paralysis: search for a pulse Founders get really scared right after their products launch because of the very typical  launch bump  and the eventual  pit of despair  when the press and social media stop caring about you. You have to fight the urge to be paralyzed and  search for a pulse.  Is there a  sign of life  in your product? Do folks like it enough that they can’t live without it? There is an easy way to find out: ask them. One way to phrase it is:  how much would it cost to replace my product – in time or money – if we didn’t exist ? Another way is to say  What would you replace us with?  or  How did you solve this before you found us?  If the product was, say, Thumbtack.com (I’m an investor) it would be something like,  Well, I would have to spend five hours: first calling 10 house painters, then getting five to call me back, three to visit and two to give me quotes.  That answer means,  f@#k, life without Thumbtack.com would really suck.  With a consumer product, this can be hard to judge sometimes: questions like  what would life be like without Calm.com or Vine.com?  might elicit the answers:  Well, I wouldn’t meditate regularly, if at all, without my Calm.com App,  or,  I wouldn’t laugh as much without Vine – I would miss it!  Those are valid answers, but it’s sometimes hard to put a cost on something that is just delightful. What’s the cost of losing the funniest guy at your poker game? Well, you have a boring game and folks say  I wish Pollak were here!  No dedicated growth positions Sure, everyone should be thinking about growth, but do you need a specific person in each company focused on this? When I have a growth person at one of my companies, they are solely responsible for seeking the truth around the brutal inevitabilities all founders face:  why are we not growing?  or  why is growth slowing?  or  why are we shrinking?  In order to plan for growth you need to have someone build that plan, execute that plan and study the results so the next plan can be 20% better. You need someone obsessed with this. Worse than this is a startup that does have growth positions, or positions with growth responsibility, but they are not given the authority to  grow.  Second guessing folks who you’ve hired to grow the product is worse than not having growth people – because you’re getting all of the costs and none of the benefits. Listening to the growth team is as critical as having them. What techniques are there to scale? See More Scaling Ideas How can I increase email open rates? How do I select my startup’s next market? How do I handle traffic spikes after media exposure? How do I keep my architecture stable at scale? How do I simplify my API? How do I create a brand voice for my startup? How do I attract service professionals to my marketplace? How can I increase month-to-month retention for my app? Which press outlets drive downloads? Are byline articles in Pando, Business Insider, TechCrunch, and LinkedIn worth my time? What do I do when a customer is unhappy? How do I recruit senior designers and developers with limited funding? How do I speed up my release cycle? How do I price my product for maximum growth? How do I know when to pivot my business model? How do I reduce customer churn for my SaaS company? How do I make my hardware and software work seamlessly? How do I build a push notification CMS? How do I market to a younger demographic? How can I quickly build an effective referral program? How can I scale my user acquisition with FB ads? How do I maintain a sense of community with my users while scaling? How do I get my crowdfunding campaign featured? Are infographics expensive to build? Do they drive business & how do I measure their * effectiveness ? How do I incr ease my rank in the app store? How do I write tweets that increase app installs? How can I identify new sales people that fit my culture – and won’t quit in 6 months? How do I reduce churn in my sales team? How do I streamline my manufacturing? How do I avoid liability and lawsuits? How do I onboard independent contractors? How do I test marketing techniques with a small user base? How do I best use remote workers? How do I train my devs on both ios and android? How do I recruit senior designers and devs with limited funding? Do I need to hire a growth team? How do I get actionable feedback from my users? How do I manage beta groups to test new features? How do I teach new users how to use my app? When do I censor my startup’s community? How do I take market share from a bigger competitor? Should every part of my team grow equally when scaling? When’s the right time to get acquired? How much should user feedback change my product? Where can I find testers in the very early stages of a minimum viable product? How do I get featured by Apple and Google in the App and Play stores? Should I focus my limited resources on pleasing existing customers or gaining new ones? Who should my first hire be when scaling? Should new hires have experience scaling? How quickly can I scale from one new market to the next? How do I develop strategic relationships in new markets? How do I find mentors for my startup? How do I source leads on Linkedin? How do I source candidates on Linkedin? How can I create tweets that convert to sales? How do I create brand loyalty through email? How do I acquire users in a new market? How can I prepare for seasonal spikes in traffic? How do I partition services to limit risk of a security breach? How do I transition new features from test to production environments? How do I develop strategic relationships in new markets? How do I hire a city manager capable of running a new market? How should I organize my engineering team? How do I prevent my website from crashing from too much traffic? How do I maximize my marketing budget? How can I use data as marketing material? How can I increase month to month retention for my app? How do I push notifications to millions of users? How can I increase high quality influencers on my twitter handle? How do I use AdWords to market my startup? What are the most scalable channels for customer acquisition? How do I find early customers that could become champions of my product? How do I make an awesome product video? How do I get good Yelp reviews for my startup? How do I train my devs on both ios and android? How do I limit excess inventory in manufacturing? How do I manage a remote team? How do I quickly implement user feedback into my next release? How do I develop a windows app? How do I create new apps while maintaining the quality of my core app? How do I get my revenue model right? How do I expand internationally? How transparent should I make reviews of my users? How do I take advantage of the economic environment? Should I scale on multiple platforms at once, or focus solely on my strongest? Should I try to scale as quickly as possible? How do I monetize free users? How do I get press for my app in a crowded market? Should new hires have experience scaling? How do I keep users’ credit card info private? How do I prevent DDoS attacks? How do I market to the college demographic? How do I build an effective street team? How do I get people to comment on my pins? How do I email users content they actually want? How do I get users to stay on my site longer? What percentage of my marketing budget should go towards advertising? How do I get a celebrity to talk about my product on Twitter or YouTube? How do I leverage Vine, Instagram and other short video apps to scale my products? How can I reduce the number of 1 star reviews for my app? ", "tags": "", "loc": "/content/topics/leanstartup/growth.md/" },

        {"title": "Growth Models", "text": "Four example growth models (there are probably more) Sticky Engine of Growth Comes from retention of existing custmers Subscription model Attrition, retention or churn rate: fraction of customers in period n who don’t renew in period n+1 New customers in period(n+1) must exceed number who dropped it Focus on either attracting more or getting the ones you have to renew Viral Engine of Growth When your growth comes when simple normal use of the product inherently leads to new signups  Viral Coefficient  - how many new customers a single customer brings in, and over what period Viral coefficient should be > 1 to get exponential growth Paid Engine of Growth When your growth depends on the simple ratio of customer acquisition cost vs. per customer earnings Simply add more money to customer acquisition and you get a predictable amount of earnings from that. LTV of a customer rells you how much you can spendn on customer acquisition. Discussion: what are examples of customer aquisition costs? Accessory Model of Growth Core product is cheap or free User is enticed somehow to buy accessories which produce revenue  Razorblade/Razer  Discussion: what are some examples of ‘accessory revenue? ", "tags": "", "loc": "/content/topics/leanstartup/growth_models.md/" },

        {"title": "Startup Finances from 10000 feet", "text": "Terminology Runway: How many months till there is no more money Burn (rate): How many dollars are used each month Cash: How much cash is in the bank account Financing: Where money comes from and goes to Pro Tip The Gazintas must always exceed the Gazoutas. Building the model Revenues: where do they come from? Pricing: per unit? per user? per partner? Costs: where do they come from? Cost Drivers: what variables have an effect on costs? Growth: What parameters in the model change over time Growth: What is your objective? What you can learn from the model When are you going to run out of money? What is the sensitivity to changing parameters? When will your business become sustainable? How much money should you raise? Where is your money coming from Where is it going? ", "tags": "", "loc": "/content/topics/leanstartup/highlevel_financial_view.md/" },

        {"title": "Hypotheses", "text": "The Lean Startup notion of hypotheses Also ‘assumptions’, but I like the term hypothesis better because it emphasizes that we don’t take a side as to whether it is true or not. We specifically want to generate evidence that will either prove or disprove it. Testable: You need to know how you would test it Explicit: You need to be able to state it succinctly (on a post-it note) Types of Hypothesis - there are lots Customer: Who is the customer? Where would you find them? Problem: What is their pain? What is the ‘job’ they are ‘hiring’ a product to do? Solution: What kind of solution are they seeking? What features do they need? Will this solution actually address their problem? Growth Hypothesis - Use will grow over time. Value Hypothesis - Like Solution Hypothesis The point is, don’t get too hung up on classifications What is important is the idea of formulating testable hypotheses, running experiments, and updating your plans accordingly. Reference:  Why do research when you can fail fast and pivot?  ", "tags": "", "loc": "/content/topics/leanstartup/hypotheses/" },

        {"title": "Testing Hypotheses -- Get Out of the Building!", "text": " You conduct experiments, right? You don’t know anything! Show and Tell as appropriate Do you need an MVP yet? What’s an MVP? Not just product questions: pricing naming problem statement technology habits ( they do … ) Some techniques Google form/survey LinkedIn groups Find out who you know and who they know Email to ask for a 20 minute phone call Think about: where do they congregate? Who are they? Find a way to observe them Target varies depending on the type of question! ", "tags": "", "loc": "/content/topics/leanstartup/hypothesis_test/" },

        {"title": "Types of hypotheses", "text": "Hypothesis examples for discussion Customer Hypothesis, examples: Young american tourists visiting europe Schoolchildren Asian business travelers in the US for the first time Have smart phone Spend less than 1 day Problem Hypotheses, examples: No professional guides available Professional guides are too expensive Can’t find someone with the point of view I am looking for Blind, so can’t read guide books Solution Hypotheses, examples: Two sided web site allowing tour leaders to find visitors Service offered to travel agents as a value added option B2B Service allowing a local agency to create a directory of tour guides Location Aware Smartphone app with peer to peer Leap of faith hypothesis: Part of your vision and hard to test If this kind of hypothesis turns out to be false then you will certainly need to pivot These are also the riskiest assumptions ", "tags": "", "loc": "/content/topics/leanstartup/hypothesis_types/" },

        {"title": "Ideas are cheap", "text": " Everyone has a million ideas Few know how to turn the idea into a successful product or service Discussion: What is your definition of ‘successful?’ So: Don’t be so secretive! You (almost) always gain more from sharing your idea and getting feedback Keeping it secret usually only provides an imaginary competitive advantage Good article: Inventor who gave his idea away NB If your idea is so simple that a 10 minute description is enough to allow someone else to beat you.... then your idea wasn't really worth that much anyway! ", "tags": "", "loc": "/content/topics/leanstartup/ideas_are_cheap.md/" },

        {"title": "Lean Startup Overview", "text": "Thoughts about Lean Startup  Lean  term stolen from  Lean Manufacturing  (Toyota et al) Some key characteristics: Small Batches vs. Large Batches Minimize WIP Changes in plan are expected and embraced  Pull  vs. Push Small self-managed teams Agile Software Development (next term :) Also based on the same principles And with the same objectives Lean Startup Yes, just another buzzword Some might say  there’s nothing new under the sun  Realize there are several ‘methodologies’ that people push The underlying principles are similar My own experience with the idea of Lean Startup Where did it come from Is it just Eric Ries self promotion? Why do I think it’s a good approach  Scientific method?  Some ideas that we’ll explore more in the next few weeks Validated Learning Build/Measure/Learn Hypotheses and assumptions Minimum Viable Product Customer Development Pivoting Lean Startup Validation Board Innovation accounting ", "tags": "", "loc": "/content/topics/leanstartup/lean_startup.md/" },

        {"title": "LSM Validation Board", "text": " Lean Startup Machine’s Validation Board LSM puts on weekend lean startup trainings Their Validation Board is one of many tools Let’s see how we can use it for tracking our assumptions Get one for yourself (Validation Board)(http://www.leanstartupmachine.com/validationboard/) ", "tags": "", "loc": "/content/topics/leanstartup/lsm_validation_board/" },

        {"title": "Product and Market Excercise", "text": " 10 minutes: Team up in by project (group), pick a different product Here are some products, companies and servives Barnes and Nobel Nook Tesla Motors Olin College Apple iTunes Raspberry Pi Nest Thermostat Microsoft X-Box Makerbot Replicator Google Android Pocket Hose (google it) Answer these questions (10 minutes) - what market(s) is this company and/or product in - what segment and kind of segment does it compete in - what is it's value proposition is it offering that market - how did it attack or enter the market - additional observations and/or insights? - 10 minutes total: Report out by table ", "tags": "", "loc": "/content/topics/leanstartup/market_product_excercise.md/" },

        {"title": "market_segments", "text": "Market Segments Why is it important to think about them? What is a ‘market’ in this context? How do you think about the market size? Look at segments, value proposition and market entry Segments: For your market or customer hypothesis, you need to understand the market(s) and segment(s) you are serving. Notice that ‘segments’ are not black and white, they can be continuums or multi-faceted. Types of segments Various ways to classify segments. Intention is to sharpen your strategic thinking Types Mass Market: Huge and undifferentiated. Horizontal, e.g. consumers age 12 to 18. Niche: Highly specific: Vertical, e.g. Bicyclists Segmented: your product serves more than one segment. Apple serves the consumer and education market segments Diversified: your product serves very different markets: Amazon serves consumers and software developer Two or multi-sided markets: brings two or more segments together: dating services, newspapers. [story of early NeXT computer and Improv] There are others. You need to understand the market you are going for People are in the same segment when: It is not about demographics or geographics A market segment is characterized as a group of people who:  Speak the same language  (e.g. CIO vs. a hacker)  Hang out  in the same  place  (e.g. College campus vs. Facebook) They are similarly passionate or experience the pain at similar levels They expect similar distribution (e.g. web vs. retail) They expect similar levels of service (e.g. email vs. housecalls) ", "tags": "", "loc": "/content/topics/leanstartup/market_segments.md/" },

        {"title": "Marketing Primer", "text": " Discussion: What’s the difference between marketing and sales? Marketing: Demand creation Sales: Demand satisfaction Grossly oversimplified ", "tags": "", "loc": "/content/topics/leanstartup/marketing_sales.md/" },

        {"title": "Metrics", "text": " You can’t manage what you don’t measure. What gets measured gets managed Discussion: What is a metric? Examples? Vanity vs. Actionable metrics The fact that I have more users today than I did last week doesn’t mean that much You need to know what you are trying to optimize for Then you need to figure out what changes improve those variables Only then can you tell if it’s a good thing that you have more users today! Discussion: What are some examples of metrics? How could we tel if they are vanity or not? Useful Metrics are Actionable: You can use them to figure out what to do, or what you did, to cause the change. Need to know what to do to get more of that result Transparent: Publish metrics to the team Accessible: Make the definition of what’s being measured clear. No made up words or jargon. Auditable: Make it easy to see the underlying raw data But, beware of ‘vanity metrics!’ More users today than yesterday? Not enough. How do I change it. What changes will affect what metrics? You can make changes, but will they matter to customers? Discussion: How do you decide what metrics matter? ", "tags": "", "loc": "/content/topics/leanstartup/metrics_intro.md/" },

        {"title": "Minimum Viable Product", "text": "The MVP or Minimum Viable Product  It’s not necessarily minimal nor a product nor viable!  MVP is not a perfectly descriptive term  An experiment is a product  (From TLS book) Smallest increment of work that will test a hypothesis What forms can it take? A static web site A video A simple free wordpress blog Pricing scheme Concierge MVP Problem description Solution description Paper mockup Actual Prototype The key is that it is MINIUM! MVP is always always related to a hypothesis (or more than one) Discussion: Does MVP mean that quality is not important? ", "tags": "", "loc": "/content/topics/leanstartup/mvp/" },

        {"title": "Naming", "text": "Naming Caution: naming can be the biggest timesync Caution: Keep your life simple and choose the same name for your product and company Tip: Initially pick a dumb codename ( Project Alpha ) that has no meaning and you know you are not going to keep At the start you don’t know yet what your product is so you really can’t pick the real right name yet, anyway. Tip: For $0 get bit.ly/project_alpha (etc). Easy to say and remember. Gives you a shortened URL to your product. Tip: For $10 get some domain name that’s available even if you know it’s not your real final name. Your goal: have a domain name that is easy for you and your listener to remember and to share over the phone. System X or Brandeis 007 are just as good as anything. ##### Handy Tools Wordoid ", "tags": "", "loc": "/content/topics/leanstartup/naming/" },

        {"title": "Measure the effect of a pivot", "text": " Identify the key ‘stages’ that users experience on site Example: create account log into account add content invite friend Discussion: What would stages be for our product? These are not arbitrary!! they figure directly into your eventual business model depending on your goals and your stage they will be different How many people responded to your email answered your survey answered a question asked a question etc. This becomes a classic  funnel  (sales, marketing etc.) Discussion: why do you think we call it a funnel? Metrics… Metrics… Metrics You also need a way to measure how many people make it to each step Without metrics your pivots are a shot in the dark Once you have a baseline Do the pivot Quickly determine if you improved where you expected to improved ", "tags": "", "loc": "/content/topics/leanstartup/pivot_measurement.md/" },

        {"title": "Types of Pivots", "text": " Why do we do a pivot? What are the signs that one should be contemplated? When is it a pivot vs. a simple change to try to respond to feedback? When it’s a change to a ‘core assumption’ ? When it’s a change to a ‘article of faith’ assumption? Depending on the reason of the pivot, you will consider ways in which to change plans Categories of Pivot Zoom in pivot - Subset of product is what matters Zoom out pivot - Product is too narrow - generalize it Customer Segment pivot - Product solves a real problem, but there’s a different market that needs it more Customer need pivot - Market we are looking at has very strong needs, but the problem we are solving is not the biggest need Platform pivot - Go from point product to a platform or vice versa Technology pivot - Change core technology Channel pivot - Change how you get the product to the customer, or change from a product to a service Value Capture pivot - A basic change in the business model or how the business is financed. Discussion: Describe each one and give an example. Are these all the kinds that exist? Illustration ", "tags": "", "loc": "/content/topics/leanstartup/pivot_types.md/" },

        {"title": "Positioning", "text": "Positioning A very brief statement that summarizes the way you want people to think about your product or service especially as compared to similar or other products Lots and lots of sample positionings: Beta List Product Hunt Tips for Positioning Meant to clearly answer a series of key strategy questions In a consise form, for internal use Not for selling. For communicating and maintaining alignment Try and be precise and clear Sometimes you have 2 seconds or 2 words! ", "tags": "", "loc": "/content/topics/leanstartup/positioning.md/" },

        {"title": "Quantitative and Qualitative Testing", "text": "  Prove  or  Disprove  a customer, problem or solution hypothesis Hypothesis should be well stated! It should be  falsifiable  Key Techniques Online Survey Person to person conversations Mailing lists, facebook friends, etc. Build a Landing Page A/B Testing Online Survey Designing a good online survey Don’t flood university community with surveys, especially non-students How many questions? Who do you send it to? How many responses would be considered good? Person to Person interview Make sure they know this is part of a course Make sure they know you care and this is important to you Be very respectful of outsiders’ time. 30 minutes. Always offer to come to them or make a phone call Stick to the time Be grateful and offer to return a favor Give them my name and email in case they have any questions Pito illustrates in Role playing Role playing in pairs Landing Page What is a Landing Page? How do you create one? Tools for building and measuring Example is Unbounce See Lots of examples on Unbounce A/B Testing Also known as  split testing  Divide your targets into two (or more sets) Show each of them an alternative version Works best with a feature description, a marketing message, a price and so on. Discussion: For each product team, what are some things that you could test using A/B? Exactly how would you go about it? ", "tags": "", "loc": "/content/topics/leanstartup/quant_testing.md/" },

        {"title": "Sustainable Growth", "text": "Discussion: Under what circumstances do we say that we have sustainable growth? Excludes one-time campaigns and actions Systematic: built into the product’s usage Comes from actions of past and existing users or customers There are many ways in which using a product can drive revenue Word Of Mouth (people recommend your product to others) Side Effect of Usage (people see you using and want to use it too. Or in order to benefit you have to invite.) In-product purchases (part of the experience of the product requires you to spend money inside it.) Subscription (or need to re-buy) (access charges, periodicals, expiration or consumption.) Funded advertising (When advertising gets more users, and is funded from revenue from users.) Discussion: More ways? Think of all the products you know and use! ", "tags": "", "loc": "/content/topics/leanstartup/sustainable_growth.md/" },

        {"title": "Tuning the Engine of Growth", "text": "Tuning the Engine of growth What is an engine of growth? It’s A metaphor and a financial model Approach Identify key stages of relationship with customer Measure customers at each stage Analyze impact on financial model Tune the engine Key stages Key stages…You don’t want all of these: Visit: users come to the site from various channels Repeat: come back to the site because they liked it. Register: request a log in or register to become a user Activate: actually activate their account (respond to an email) Retain: come back at lease X times and use the site repeatedly Refer: they refer their friends within X days Pay: Actually send you money within X days Abandon: Don’t log in aagain after X days Cancel: Actually cancel their account Measure Which stage can you actually measure in your product or service? Be very precise about the ones you decide to measure You can’t/shouldn’t measure all of them The ones that matter to you are the ones that tie in with your engine of growth Model How do you plan to make money or achieve your objectives? Remember the different types of engines of growth Stickey Engine of Growth (subscription) Viral (users invite other users) Paid (simple purchase, one shot) Accessory (in product purchases) Tune: Make changes, see the impact Now that you know what you’re optimizing for And you have a wy to see before and after You can experiment and tune your engine Let’s work through a detailed example! Download and take a look at this simple financial model spreadsheet. ", "tags": "", "loc": "/content/topics/leanstartup/tuning_engine_of_growth.md/" },

        {"title": "Value Proposition", "text": "Value Proposition Statement Example 1:  For tourists visiting a new destination, who want to supplement their experience with local knowledge, NewProd offers local and knowledgable audio guides automatically based on location  Example 2:  For local professional and non-professional guides, Newprod is a way for them to discover new paying customers by providing location based audio tour segments which produce leads and also bolster reputation.  Example 3:  To new residents of Boston, Breadcrumbs is a new kind of recommendation app that provides a focused, quick and entertaining recommendation for a destination of discovery and entertainment, because unlike Yelp and Facebook and similar sites, Breadcrumbs presents truly unique insider recommendations in a fun and focused smartphone app.  TEMPLATE For [WHO], who [PROBLEM], [SOLUTION NAME], will [DO-THIS-JOB] by [IN THIS WAY] The sentence specifically answers some key questions: WHO: Who is it for? How would you characterize them? PROBLEM: What is their problem, what is the job their looking to hire a product for? What is their pain? SOLUTION NAME: What is the proposed solution? Your product name goes here. IN THIS WAY: How does it achieve that? A very brief description of the salient characteristics of what your product or service does. Notice that this is an ‘internal’ statement, never meant to be shown to customers or even investors. ", "tags": "", "loc": "/content/topics/leanstartup/value_proposition.md/" },

        {"title": "Books for Cosi 105B", "text": " [Practical Object Oriented Design in Ruby](http://www.poodr.com). [POODR] This is one of the best books I’ve ever seen to help you learn how to good object oriented design. The principles apply to any language not just Ruby. [Service Oriented Design with Ruby on Rails](http://www.amazon.com/Service-Oriented-Design-Addison-Wesley-Professional-Series/dp/0321659368). [SODRR] This is a really great discovery of how to buildl web sites and products that will scale massively. It introduces the model of  Service Oriented Architectures , a.k.a. SOA. [Learn Ruby The Hard Way](http://learnrubythehardway.org/book/): [LRHW] A great online resource for learning to program Ruby quickly. ", "tags": "", "loc": "/content/topics/logistics/books_cosi105.md/" },

        {"title": "Books for Cosi 166b", "text": " [Agile Web Development with Rails 4](https://pragprog.com/book/rails4/agile-web-development-with-rails-4): [AWDR] There are many books out about this topic. This particular one is the most popular and best, although if you want to go deeper I can recommend some others. There will be many readings from this book. [Learn Ruby The Hard Way](http://learnrubythehardway.org/book/): [LRHW] A great online resource for learning to program Ruby quickly. ", "tags": "", "loc": "/content/topics/logistics/books_cosi166.md/" },

        {"title": "Links of interest about UI, Ux and Design", "text": "Links of interest about UI, Ux and Design Seven Guidelines for designing high performance mobile experiences How to design a user experience flow chart Effective use of white space in forms UX Crash Course: 31 Fundamentals User Experience: Stop designing screens and start designing flows Clean Up Your Visual Mess ", "tags": "", "loc": "/content/topics/logistics/design_links.md/" },

        {"title": "Entrepreneurship Links", "text": " What is Academic Engrepreneurship? Paul Graham on Want to Start a Startup? The Simple Math Behind Every Profitable Business — Customer Lifetime Value: Evergreen Business Weekly #10 ", "tags": "", "loc": "/content/topics/logistics/entrep_links.md/" },

        {"title": "Goals and Learning Objectives for Cosi 105b", "text": "Background Title:  Software Engineering and Architecture at Scale  We will look at research to compare, but primarily this course takes an applied approach to the topic What I hope you will learn: Become a more sophisticated software developer and engineer Best practices in Software Engineering Object Oriented Design Test Driven Design Refactoring What is and how to achieve scalable systems Architectural concepts for scale Caching Load testing Application performance analysis What you will be able to do Write good ruby Write and deploy a Sinatra application Deploy to the cloud (Heroku) Generate and analyze a load and monitor performance ", "tags": "", "loc": "/content/topics/logistics/goals_cosi105.md/" },

        {"title": "Goals and Learning Objectives for Cosi 166b", "text": " Summary Learn how the whole stack of a database driven web application works. Learn how to build such a product. What I hope you will learn How the full stack of internet technologies work together Internet as a system: protocols, services, formats and concepts What are parts of a web server and how does it work How databases work and fit into the architecture How build a db driven web app with on top of a framework Model/View/Controller User experience design in practices Framework such as Ruby or Rails ORM such as ActiveRecord Design of the database Basic Principles of Agile methodology Stories, backlog, iterations, velocity, pair progamming Refactoring, Test Driven Development, Automated Deployment What I hope you will be able to do Approach a large programming project without trepidation Know how to design and develop a new database backed web application (given requirements) Do this with Ruby, Rails, HTML, CSS, Javascript ", "tags": "", "loc": "/content/topics/logistics/goals_cosi166.md/" },

        {"title": "Interesting links", "text": "Links to articles that you might find useful M. Broy,  Can practitioners neglect theory and theoreticians neglect practice?,  Computer (Long. Beach. Calif)., vol. 44, no. October, pp. 19–24, 2011. T. Demarco,  Software Engineering: An Idea whose time has come and gone?,  Computer (Long. Beach. Calif)., pp. 95–97. 12 Pieces of Advice on Startuping 4 steps to building a compelling value proposition 5 Steps to $5000 per month in monthly recurring revenue 95 ways to find your first customer for customer development and sales A Practical Introduction to Git A practical Git introduction A single startup metric Achieve Product Market Fit All about email regex Animation for Attention and Comprehension Basics of good database design in web development Boston Law-related startups Business school rankings need a startup upgrade! Classification of Cloud Services Cloud Computing is forcing a rethink of IP Cohort Analysis: 3 Rules to Actionable Metrics Cryptic Genetic Variation in Software-Hundting a 41 year old bug Dave McClure on Pirate Metrics Dave McClure on the Lean Startup Disney Struggles to Make Its Free Gaming Apps Pay Disney Struggles to Make Its Free Gaming Apps Pay Do things that don’t scale (Paul Graham) Don’t let the minimum win over the viable Easy Git Effective use of white space in forms Examples of paper prototyping here Good job, but what if the vcs don’t come? Heroku: Getting Started With Rails How Pivotal Tracker could be killing your startup How SnapChat will make money How SnapChat will make money How To Price Something How To Price Something How to be a great software developer How to be a growth hacker How to design a user experience flow chart How to go from zero to revenue in under five weeks! How to help your app stand out How to make sense of conflicting startup advice How to nail a group presentation Is Computer Science Sience? Is startup validation bullshit? Laws of Cloud SAAS Growth Leaders of dead startups share the reasons why they failed Learn advanced Rake in 7 episodes Linkedin Pitch to Greylock Low Findability and Discoverability: Four Testing Methods to Identify the Causes Making a simple db driven website with sinatra and heroku Martin Fowler on Feature Toggle Movie: Something Ventured about the VC world and Silicon Valley Paper Prototyping Pivoting in Product Development Pivoting when using Lean Startup for Product Development Post Mortem of a failed venture backed startup Rethinking Crossing the Chasm Romancing the pitch Silent students shortchange themselves and others Supercharge your Value Proposition The Git Book. The Lucky-take-all society The Pivot The Price of Free Apps The Price of Free Apps The history of app pricing and why apps are free Think Like a Git Unbundling: AOL, Facebook and LinkedIn User Experience: Stop designing screens and start designing flows Value Proposition Examples and How To Videos from Lean Startup Conference What I wish I knew before pitching to Greylock What is Computer Science? What is Customer Development? What’s in a startup name? When an accidental feature becomes your entire business Why composition is often better than inheritance Why you should find product Market Fit … Why you should never ask your customer to price your product Great Entrepreneurship Blogs Jason Calacanis Launch Blog Both Sides of the table - Mark Suster’s Blog A VC: Fred Wilson Blog ", "tags": "", "loc": "/content/topics/logistics/interesting_links.md/" },

        {"title": "Portfolio", "text": "Throughout this course there will be many programming homeworks. You will be organizing them into a coursework portfolio directory with a very specific structure on your computer. That directory will be shared (automatically) with the TAs and Professor/ IMPORTANT You are required to organize your portfolio in a very specific way so that we can automatically review your work. Look way below for the specifics for this particular course. Why In addition to formally grading an assignment that spans multiple classes, in some cases it is very useful to receive help or feedback along the way. By working in your portfolio we will be able to pay attention to your work in progress. Secondly, at the end of the course you will have a nicely organized set of code that you wrote that you will be able to use for your own portfolio as you go out into the world. Grading Every Monday TA will look at your portfolio directory and give it a progress score based on: 1. How current you are with the assignment 1. How well you are applying learnings so far This grade is not meant to assess your work but to give you useful feedback and possibly help to ensure that your actual submission will get a good grade. It counts very little towards your final grade, as part of class participation. The progress score will simply be: 100: You’ve made reasonable progress 90: You seem to be behind or stuck or otherwise having challenges 80: You have not submitted anything Submitting the actual deliverable There will be a specific date by which the assignment should be completed, just like any other homework. After that date, the assignment will be scored in the usual way according to a rubric. Hypothetical Example On Jan 1 the homework is  Begin working on movies-3  On Jan 5 the homework is  Continue working on movies-3  On Jan 8 the homework is  Complete and submit movies-3 for grading  What is in your movies-3 portfolio directory on Jan 5 will be scored for progress. And what is in your movies-3 portfolio directory on Jan 8 will be scored as a formally homework submitted. Directory structure These rules are very specific because we use an automated grading tool (RoboGrade) to do a first pass on your work. Your portfolio directory is called <coursenumber>_<yourbrandeisid>. So for example, it might be cosi166b_cburkh/. Note that the <coursenumber> is complete and all lower case and your <brandeisid> is the part of your brandeis email before the @brandeis.edu Inside the portfolio directory there will be folders with very specific names that will be indicated as part of the homework. So for example, ./movies-1. Dropbox for sharing the directories with us Download and install the Dropbox Desktop application from https://www.dropbox.com/install This will create a Dropbox folder on your local machine. Within this folder, create a folder named <coursenumber>_<yourbrandeisid>. This will serve as the top-level portfolio directory. Using the Dropbox web interface, share this folder with the TAs and instructor. To do this, select the folder, press the Share dropdown, select invite people to collaborate, and add their emails. ", "tags": "", "loc": "/content/topics/logistics/portfolio_instructions.md/" },

        {"title": "PR Logistics", "text": "NB: Organizational notes meant for Pito in organizing Product Reviewers Feedback I received Felt like they could have done more Didn’t want to have to chase students Engagement Ask PRs to send a progress summary email once a week How perscriptive to be with the agenda of the meeting? Schedule Kickoff meeting: Students have defined the projects enough to give a brief presentation Teams have been formed Should happen quite early in the semester Interim meetings At least 3 Scheduled by me: I know they will happen Hard to get all 4 PRs to agree to the same time A pain when there are conflicts Scheduled by team: I haven’t tried that yet Teams might neglect to schedule the meeting on time Can be remediated by grading means Where On Skype Easier for everyone Can be recorded Participation from the whole team can’t be ensured Live A little less convenient Also kind of old fashioned ", "tags": "", "loc": "/content/topics/logistics/PR_logistics.md/" },

        {"title": "Screencast", "text": "Many homework assignments sometimes include a screencast. Here are some useful links and a style guide. This is Screencastomatic. It is a great and simple tool for creating screencasts. It should work on all platforms. If you have trouble, here are two other useful links * http://www.mahalo.com/how-to-create-a-screencast * Linux: http://live.gnome.org/Istanbul You may use other tools if you prefer. In the end you need to be able to hand in a link to the screencast. callout( Important ,   Submit a LINK to your screencast, not the big file itself. ) Style Guide Keep it short. No more than 5 minutes This doesn’t have to be fancy, but you do need to show and tell. It has to be as if I was standing next to you and you were showing me something on your computer. You wouldn’t be silent then, right? You would explain what you are doing. For example if we ask you for a screencast demo of your programming assignment, then we expect you to include: Give a demo of the program, either from the command line or however it makes sense. Run the program and show off the key behaviors requested in the programming assignment. Show the source code. You need to scroll around to the parts of the program that are important, interesting or surprising. And then you need to talk to describe what you are showing. You don’t need to talk about every line of code. ", "tags": "", "loc": "/content/topics/logistics/screencast.md/" },

        {"title": "Links of interest to Software Engineers", "text": "Links of interest to Software Engineers Testing Your SLA with Loader and New Relic Insights Dissect my results: What’s this green line doing? Bob Pikes Rules of Programming Partitioning with Redis Open Source Load Testing Tools: Which One Should You Use? Building Scalable Databases: Pros and Cons of Various Database Sharding Schemes The Art of Enbugging Really good summary of REST pragmatics: Best Practices for Designing a Pragmatic RESTful API Wonderful intro to minitest spec: Minimalicious Testing in Ruby Great conceptual overview: Mocks aren’t Stubs Sofware Engineering Rules of Thumb Interesting presentation about google’s scaling: Software Engineering Advice from Building Large-Scale Distributed Systems Architecture, The Lost Years BDD With Minitest Spec Debugging Rails Applications Duck Typing Feature Switches at Flickr Five Rules for Product Demos Getting the V in MVP right Git Tutorials History of Software Testing How I learned to test my Rails Applications, Part 4 Laziness, Impatience and Hubris Let Me Google That For you Microservices by Fowler MiniTest::Spec tutorial Minitest Quick Reference ORM Hate (Martin Fowler) Object Oriented Design Patterns in Ruby RESTful Web Services: The Basics Rails Guide about Routing Rails Routing Guide Rails Testing Pyramid Rails Testing Series Intro Rails Testing Series Models and Factory Girl Rails Testing Series RSpec and Controllers Rails Testing Series RSpec and Requests Rails Testing Series Rspec Setup Rails Timezone Tutorial Rubular for Regular Expressions Ruby Gotchas Ruby Idioms Ruby Toolbox Ruby Toolbox SOLID - Single Responsibility Principle SVD Recommendation System in Ruby Sandy Metz on Object Oriented Design Shell Tutorial Twelve Factor App Using Minitest/spec with Rails 4 ", "tags": "", "loc": "/content/topics/logistics/se_links.md/" },

        {"title": "Showcase Logistics", "text": "NB: Organizational notes meant for Pito in organizing various showcase events Invitations Invite judges with 3 weeks notice 4 or 5 judges no more or less Individual Presentations Keep strict time limits 5 minutes: 1st warning 1 minute: 2nd warning 1 minute: hard cut off 3 minutes: q and a Make sure time keeper is comfortable being forceful Make sure overall event is 2 hours or less Otherwise by the end the audience is either very bored or leaving Judging Process Give judges 15 minutes to discuss in a separate room Ask judges to give individual feedback for each project They can decide who speaks One idea, give the judges a stack of 3x5 cards, one for each project Randomly give a card to a judge (allow them to trade) ", "tags": "", "loc": "/content/topics/logistics/showcase_logistics.md/" },

        {"title": "nT Final Assessments", "text": " Quality of the engineering. How is the design, is it broken down into some classes? Is there attention to single responsibility principle? Are the classes and methods reasonably brief. How does the code look? Are there tests and are they being run automatically? Quality of the Scalability. How well does the nT perform under load from loader.io? What steps did you take to help it scale better? And what is final result? Fit and Finish. Does the final product look professional and clean? Did you read the requirements (from me) broadly and go beyond the very minimum? Or did you just barely get it to work? Does it look good and shoe pride of work? ", "tags": "", "loc": "/content/topics/nt/nt_final_assessments.md/" },

        {"title": "Load Testing nanoTwitter", "text": "Load Testing Testing a product to see how it performs under load Deployment Obviously to do load testing, your app needs to be running on a server, separately from your own computer. This could be any server, even your neighbor’s laptop. For our purposes, it needs to be on one of the cloud services, like Heroku I recommend Heroku if you are adventurous you could deploy it elsewhere too. But then we won’t really be able to give you too much help Cloud deployment implies that there is a well known ‘fixed’ domain name (e.g. wild-mushroom-2312.herokuapp.com) App functionality Each team has deployed nanoTwitter and has supplied us with the domain name Each implementation of nanoTwitter follows the same spec In particular, implement the url routes exactly as specified. This allows a unified test to be run against all of the apps Load Testing Tools There are numerous open source Load Testing Tools We are using loader.io – at least to start. How to deal with authentication Initial tests should be constructed so that they don’t require a login For nanoTwitter, displaying of the non-logged in home page Later tests will require a log in Note that within loader.io there is a provision for authenticating using basic authentication. Standard Seed Data To allow us to compare apples to apples we have Seed Data Adapt your code to use this Seed Data Standard configuration parameters Non-logged in page displays the 100 most recent tweets Reporting Keep a careful lab notebook! Make note of configuration changes that you try Collect data and try to interpret it When your app is failing to scale Think about what happens when your app response time is longer than the time between new connections. Requests will start to pile up. If it takes too long for a request to reach the front of the line, it will time out. If your app is too overloaded, it may shut down entirely. Make sure to consult your Heroku logs after a test to identify this. When an app hasn’t been accessed for a while, Heroku will put it in a sleep state. If your app is asleep, make sure to access it manually to wake it up before beginning a test. Waking up may take several seconds, which would influence your results. Using Loader.io Our goal is to see how well each of your servers survive the onslaught of traffic Take a look at Loader.io Use the  maintain client load  option (at least to start.) Test 1: Simple display of home page Visit your root page (which will display a set number of tweets) Use Loader.io to hit that page using maintain client load Collect and record data Test 2: Display of a certain user’s home page Visit /user/1 to display User 1’s home page Visit /user/100 to display another home page Collect and record data Test 3: Do some analysis Form some hypotheses about what is going on with your performance Make a report correlating load to performance Try heroku pg:outliers to see if it tells you anything about your db performance ", "tags": "", "loc": "/content/topics/nt/nt_load_testing.md/" },

        {"title": "Load Testing Specs", "text": "For the final deliverable we will subject your implementation of nanoTwitter to a specific test scenario. Here are the tests you are required to be able to pass, as well as how to prepare for them. Show the homepage with 100 most recent tweets Create a user named test_user Create a path (/test_tweet) which when visited causes test_user to post a random tweet (use faker or a set string + a timestamp to generate unique tweets). Use loader.io to run against /test_tweet and the home page. Create a path (/test_follow) which when visited selects a random user and has test_user follow that user or unfollow that user (if test_user currently follows that user, unfollow. If test user_does not follow that user, follow). Use loader.io to run against /test_follow and test_user’s profile page. The profile page should show the 100 most recent tweets only by people test_user follows Create a path (/reset) which deletes all tweets by test_user and has test_user unfollow all users. This is used between tests to reset. ", "tags": "", "loc": "/content/topics/nt/nt_load_testing_configuration.md/" },

        {"title": "Seed Data", "text": "Why To standardize the scalability tests, use this set of seed data You can find it here: Nick’s Super Secret Seed Data Files There are three csv files: user.csv is id,name where user with id has name tweets.csv is id,tweet where user with id posted tweet follows.csv is id1,id2 where user with id1 follows user with id2 Content There are 1k users. Each user has 0-200 tweets (average 100) Each user follows (0-10) others No user follows itself. No two users have the same name. Tweet text could be repeated. How to use This is the bare-bones for required fields Each of your schemas will be a little different So you will need to process these files Feel free to add any additional fields with Faker. ", "tags": "", "loc": "/content/topics/nt/nt_seed_data.md/" },

        {"title": "elevator_pa", "text": "", "tags": "", "loc": "/content/topics/pa/elevator_pa.md/" },

        {"title": "Scenes and Points", "text": " We want to represent a simple graphical world of simple two dimensional shapes Points, who have an x and y coordinate Rectangles, defined by a point at top-left and a point at bottom-right Circles, defined by a center point and a radius Scenes, defined by including zero or more shapes Define a class structure for each of those. You may use inheritence if you want. The scene class should include methods as follows: constructor add shape delete shape count shapes Write a main program that Creates a scene with 2 rectangles and a circle Adds an additional rectangle to the scene Deletes the circle from the scene Prints out a report showing how many shapes of each kind exist in the scene ", "tags": "", "loc": "/content/topics/pa/pa_code_classes_1.md/" },

        {"title": "Simple car game", "text": "In this game there are parking garages where vehicles are parked. Parking garages can have more than one level. There are two kinds of vehicles, cars and police cars. The assignment is: We want to represent a parking garage. Each parking garage can have 1 or more levels Each level can hold zero or more vehicles We want to represent vehicles All individual vehicles can have: integer height (centimeters) There are two types of vehicle, with slightly different properties car: parking fee: [integer], default is 10 ($/hour) service_requested: [boolean] default is false police: parking_fee: [integer] default is 0 ($/hour) on_emergency: [boolean] default is false Define a class structure for each of those. You may use inheritence if you want. The Garage class should include methods as follows: add_level() - allocates a level. Happens only once when the garage is first created. count_regular_cars() - returns a count of how many regular cars there are in the garage count_police_cars() - returns a count of how many police cars there are in the garage car_arrives(car, floor) - adds a car to the specified floor car_departs(car) - removes a car from the garage (assuming the car is there) print_report() - shows how many floors the garage has and how many vehicles of what kind are on each level The Level, PoliceCar, Car classes all have constructors and other methods Write a main program that: Creates a garage with two levels Creates 3 cars and one police car with different heights and statuses Notes the arrival of all four vehicles Prints a report of the current status of the garage Notes the departure of all four vehicles Prints a report of the current status of the garage ", "tags": "", "loc": "/content/topics/pa/pa_code_classes_2.md/" },

        {"title": "Working the fleet", "text": "This programming assignment is different from the others: You will have 30 minutes in class to work on it The objective is a baseline assessment of what you learned in Cosi 12 or Cosi 21 NOTE You can use any programming language or do it in pseudo code. Get as far as you can. Partial work will get credit. We want to represent a rental car fleet, with many different kinds of vehicles: Passenger cars, defined by color and make Trucks, defined by color, make, and capacity Electric Cars, defined color, make, and range in miles The fleet itself, containing some number of each of those vehicles Define a class structure for each of those. You may use inheritance if you want. The fleet class should include methods as follows Constructor Add vehicle Delete vehicle Count total vehicles Find vehicles Write a main program that Creates a fleet with 2 cars, one truck and one electric Adds an additional electric car to the fleet Deletes that electric car again Prints out a report showing how many vehicles of each kind exist in the fleet ", "tags": "", "loc": "/content/topics/pa/pa_code_classes_3.md/" },

        {"title": "Quick Coding Problem 1", "text": " You may do this in any language you like, including pseudo code Write a short program that prints out all the even numbers between 20 and 100 ", "tags": "", "loc": "/content/topics/pa/pa_code_loop.md/" },

        {"title": "Elevator Assignment", "text": "Background With buildings getting taller and taller, the issue of efficiently operating elevators to the benefit of people in the buildings, fire codes, and resource consumtion is one of great importance. Here’s some entertaining reading on the future of elevators: Elevators in the New Yorker Objectives The objective is to give you a chance to show off your software design skills This is a pure ruby assignment. No need for sinatra or a database Focus on good class design, separation of concerns, single responsibility principle, unit testing Try to make this a beautiful program Final Deliverbales A series of ruby files implementing the elevator simulation The simulation should be (at least) of 1 building with 5 floors and one elevator and people moving between floors Running the simulation should be simply ruby simul.rb and it should display information on the console A readme file which describes your solution and any interesting design concepts you applied All checked into github Run the github repo through code climate and add a badge to your readme showing the rating Post the url of the github repo to Latte Basic Structure You are to design a simulation framework for the testing and optimization of elevator operations. The domain model is as follows: Building There is one building in the simulation The building has number_of_elevators elevators The building has number_of_floors floors Floors Each floor has a specified position in the building Floors are ordered from 0 to n Each floor has a series of number_of_elevators call buttons pairs, one for UP and one for DOWN Each floor has a queue of persons who are waiting for the elevator. Persons Each floor and elevator can have up to the indicated maximum of people Each Person has an intended floor that they wish to get to Elevators Can be empty or contain up to ELEV_MAX_PERSONS passengers Have a direct button for every floor in the building Is traveling up or down or is stationary When empty, and when no call buttons or direct buttons are depressed, it will travel to the ELEV_RESTING_FLOOR floor Elevator Logic The crux of this assigment is creating the classes for the simulation, writing the tests and getting it all to work. But what makes it fun is to figure out the  AI  (if you can forgive the exageration) that makes the decisions for what should happen next. It turns out that all the  AI  can be made part of the elevator. After all, it is the one thing that acts a tiny bit intelligent, deciding what to do next. So at every tick of the simulation clock, essentially each elevator must decide whether to stay put, go up or go down. To keep this simple we can assume (but don’t have to) that when the elevator is at a certain floor, and there are passengers that want to get off, they will get off, and if there are passengers that want to get on, they will. In other words, you don’t need to simulate opening and closing the doors. Assume that they open at each floor and that the passengers are eager. That is, they get off as soon as they can and get on as soon as they can. Evolving the elevator logic Start by creating the Simulate, Building, Floor and Elevator classes Focus on creating a building with one elevator, and three floors Add a to_s method to each of these that describes the relevant state of each of the objects Here are the stages you can try to implement, starting from the simplest. One elevator, 3 floors The elevator doesn’t ever move. One elevator, 3 floors The elevator moves up. When it gets to the top, it changes direction and moves down. When it gets to the bottom it stops. One elevator, 3 floors Elevator starts on bottom floor Elevator has one passenger on it Passenger wants to get to top floor Elevator travels to top floor One elevator, 3 floors Floor 0 has one waiting passenger, destined for floor 2 Elevator starts on Floor 0 Passenger loads Elevator travels to Floor 2 Passenger unloads Simulation Architecture There are many ways to architect a simulation.I have verified that this model works and is doable by you. You are welcome to diverge from this suggested model. Simulate class This is a discrete, synchronized simulation The simulation is controlled by a Simulation class It is run by virtual time ticks All instances of the domain model classes Have a clock_tick method which gets called by the Simulation class The clock_tick method updates to object to reflect the new state Whenever a new domain model instance is created, it registers itself with the Simulate class, by calling @simulation.register(self) The simulation is run by calling @simulation.run(n) which runs it for n ticks which in turn means that all registered objects get called once for each tick They update their state based on the overall context Running the simulation A main program - sim.rb runs the show. It does: Creates an instance of the Simulation class Creates (directly or indirectly) the building, floors, elevators, and people Runs the simulation Displays to the console output tracking what’s happening to show that it worked ", "tags": "", "loc": "/content/topics/pa/pa_elevator.md/" },

        {"title": "(PA) Mazes", "text": "Mazes: One of the most basic kinds of games that we can represent in software is a maze. A maze is defined as a rectangular grid (n by m) of cells. Each cell has between 1 and 3 walls. Also, the walls at the outside cells (along the top, left, right and bottom of the maze) are closed. A cell that has 4 walls is a dead end and one that has zero walls of course floats and has no impact. A basic 4x4 maze might look like this if it has all cells with 4 walls. This is not a valid maze. +-+-+-+-+ | | | | | +-+-+-+-+ | | | | | +-+-+-+-+ | | | | | +-+-+-+-+ | | | | | +-+-+-+-+ Here’s a valid maze: +-+-+-+-+ | | | +-+ + + + | | | | + +-+ + + | | | +-+ +-+ + | | | +-+-+-+-+ That maze can be described more concisely with a series of 1’s (for wall) and 0’s (for space) as follows: 111111111 100010001 111010101 100010101 101110101 100000101 111011101 100000101 111111111 Note that a row with 4 cells has 4 spaces and at least 2 but potentially 5 walls. So each row in the 1/0 notation has 9 ones or zeros. More compactly, I could represent a maze as a string:  111111111100010001111010101100010101101110101100000101111011101100000101111111111  (By the way, unless you are very clever I wouldn’t be fooled into thinking of that as a number) Assignment specifics: Here’s the puzzle/assignment. Write a program in Ruby that does as many of these as you can. You probably will not get to (6) but its there if you are adventurous. Make sure you print results as you go along because you will also be submitting the output that your app generates to show it’s results. Represent a n by m maze in an appropriately designed class called Maze. Each position in the maze can be designated by two coordinates, x (across) and y (down). For a 4x5 maze the top row of positions (x,y) would be (0,0), (1,0), (2, 0) and (3,0). The constructor of the Maze class should take two parameters for n and m. Note of course that you need to represent the walls between cells not just the cells. Implement a Maze#load(arg) method that initializes the maze using a string of ones and zeros as above Implement a Maze#display method that prints a diagram of the maze on the console. It can be just a simple character based printout like above or any other format you want. Implement a Maze#solve(begX, begY, endX, endY) method that determines if there’s a way to walk from a specified beginning position to a specified ending position. Of course it can return an error or false if there is now way. Implement a Maze#trace(begX, begY, endX, endY) method that is just like solve() but traces the positions that the solution visits. Implement a Maze#redesign() which will reset all the cells and walls and come up with a random new maze of the same size. There are lots of algorithms out there to do this. Feel free to google for ideas, but the code you hand in should be your own. Deliverables The code for your solution A file containing the result of running your solution that demonstrates each of the specifics above. ", "tags": "", "loc": "/content/topics/pa/pa_mazes.md/" },

        {"title": "(PA) Movies Part 1", "text": "Social networking-based webapps often collect a huge amount of information about the members of the community. One of the most exciting developments in the past decade has been the development of tools for analyzing this data to provide value for the community. For this assignment, you are to write a ruby program that reads in a large data set and produces some analysis. Data The data set, ml-100k, consists of 100,000 ratings of 1682 movies from 943 users and can be downloaded from one of these places: http://www.grouplens.org http://dennett.cs-i.brandeis.edu/talks/ml-100k.zip The main data set u.data consists of 100,000 rows where each row has 4 tab-separated items: user_id movie_id rating timestamp More information about the users and movies can be found in other files, but you don’t need that info for this assignment. Program You should write a program movie_data.rb containing a class MovieData with the following methods load_data - this will read in the data from the original ml-100k files and stores them in whichever way it needs to be stored popularity(movie_id) - this will return a number that indicates the popularity (higher numbers are more popular). You should be prepared to explain the reasoning behind your definition of popularity popularity_list - this will generate a list of all movie_id’s ordered by decreasing popularity similarity(user1,user2) - this will generate a number which indicates the similarity in movie preference between user1 and user2 (where higher numbers indicate greater similarity) most_similar(u) - this return a list of users whose tastes are most similar to the tastes of user u Questions to think about (be prepared to discuss them …) Describe an algorithm to predict the ranking that a user U would give to a movie M assuming the user hasn’t already ranked the movie in the dataset. Does your algorithms scale? What factors determine the execution time of your  most_similar  and  popularity_list  algorithms. Final work product The movie_data.rb source code a transcript of running your code and generating the first and last ten elements of popularity list and most_similar(1) ", "tags": "", "loc": "/content/topics/pa/pa_movies_1.md/" },

        {"title": "(PA) Movies Part 2", "text": "You are to extend your (PA) Movies Part 1 to include a prediction method that will predict the rating a user would give to a movie and you are to run some tests to determine how accurate your method is. Note: After using this a few times, I think there are slightly better ways to organize the classes. You are welcome to either follow these instructions exactly or to come up with a 'better' design. You should implement two classes: MovieData and MovieTest with the following specifications: MovieData has a constructor that takes a path to the folder containing the movie data (ml-100k for example) a second optional constructor can be used to specify that a particular base/training set pair should be read. For example, 1 z = MovieData.new( ml-100k ) will read it all of the data in the 100,000 lines in  u.data  as the training set and will have an empty test set, while 1 z = MovieData.new('ml-100k',:u1) will read in the 80,000 lines in  u1.base  as the training set and the 20,000 lines in  u1.test  as the test set. MovieData also has several instance methods z.rating(u,m) returns the rating that user u gave movie m in the training set, and 0 if user u did not rate movie m z.predict(u,m) returns a floating point number between 1.0 and 5.0 as an estimate of what user u would rate movie m z.movies(u) returns the array of movies that user u has watched z.viewers(m) returns the array of users that have seen movie m z.run_test(k) runs the z.predict method on the first k ratings in the test set and returns a MovieTest object containing the results. The parameter k is optional and if omitted, all of the tests will be run. MovieTest is generated by the z.run_test(k) and it stores a list of all of the results, where each result is a tuple containing the user, movie, rating, and the predicted rating. The MovieTest object also has several instance methods: t.mean returns the average predication error (which should be close to zero) t.stddev returns the standard deviation of the error t.rms returns the root mean square error of the prediction t.to_a returns an array of the predictions in the form [u,m,r,p]. You can also generate other types of error measures if you want, but we will rely mostly on the root mean square error. You should write comments for each of the methods of your two classes and use Rdoc to generate HTML documentation for the two classes. Put the documentation folder and the two classes in a folder called PA2, and upload PA2 to github. Final work product Create a new repo on Github with your complete program. Take a look at Codeclimate.com. Code climate is free when applied to  open source  github repos. Open source for github is simply a  public  repo. Run Codeclimate. Submit a short summary of your work as a pdf to latte. Include the following information about your solution: The url to the CodeClimate report for your solution The url of the public github repo containing your solutun The Algorithm. A description of your prediction algorithm and what you think are its advantages and drawbacks. The Analysis. A description of the result of running some experiments to determine the accuracy of your method (using the z.run_test(k) method and the MovieTest methods. Benchmarking. An estimate of the time it takes run each prediction (determined by using Time.now to capture the current clock time before and after making k predictions) and an explanation of what you think will happen to that time if you increase the size of the training set by a factor of 10 or 100…. NOTE This will take a few hours but don't spend too much time trying to get a super accurate prediction algorithm. There are several published papers on this subject and the goal here is just to give you some practice writing useful Ruby code and the let you think about big data for your own applications.... If you want to create a really good prediction algorithm. First complete this PA2 with a really simple predictor and get everything done. Then go back and refine the algorithm, but only if you don't have more important projects to work on! This is a really fun kind of project to work on, especially once you start getting the hang of writing ruby code to implement sophisticated algorithms. We'll discuss some very simple algorithms in class... ", "tags": "", "loc": "/content/topics/pa/pa_movies_2.md/" },

        {"title": "PA Simple Shell Commands", "text": "What are the shell commands to do the following activities: list all the files in the current directory change to a different directory delete a file delete a directory and its contents What do the following shell commands do? cp my_file.rb your_file.rb cd .. mv /mydev/freetime/home.rb /mydev/sample/home.rb ", "tags": "", "loc": "/content/topics/pa/pa_simple_shell.md/" },

        {"title": "Sinatra Twitterwhack", "text": "Assignment Overview In this assignment, you’ll make a simple sinatra web app that allows users to play a Twitter version of the Googlewhack game (http://en.wikipedia.org/wiki/Googlewhack). The user will provide two search terms, and you’ll send requests to Twitter’s API to search for recent tweets containing those words. You’ll use the results to calculate the user’s score and display a sample tweet that contains their search terms. Using the Twitter API Twitter provides a set of public API hooks that allow you to query for various data about tweets, users, etc. You can read the full documentation here: https://dev.twitter.com/rest/public For this assignment, we’re interested in the GET search/tweets call, as it will allow us to search for tweets by setting search terms. You should read through the documentation for this hook in particular. Before we can start making API calls, we need to get access tokens from twitter so that we can properly authenticate ourselves to the API. Getting an API key Create an account with twitter. If you already have an account, you can use that one. Go here: https://apps.twitter.com/ and sign in. Click  Create New App  Fill in a name, description, etc. for your app. You can just use http://www.example.com for your website, and can leave the callback URL blank. Twitter may ask you to verify your account. This will require giving them a cell phone number and receiving a text with a verificatin code. Once you’ve created your app, click on it in your dashboard, and go to the  Keys and access tokens  tab. The values we need are  Consumer Key ,  Consumer secret ,  Access token  and  Access token secret . You may have to click to generate an access token. NOTE: If you are uncomfortable with giving Twitter your cell phone number, let us know and we will provide you with API keys you can use for this assignment. Accessing the API with Ruby Code Academy provides a helpful guide to accessing APIs with ruby, and accessing Twitter’s API in parituclar. See here: http://www.codecademy.com/en/tracks/twitter Final Product Specs You should produce a sinatra app with two pages: a main page and a results page. On the main page, the user will be presented with a form that prompts for two words, and a submit button. When the submit button is pressed, take the two words and conduct three Twitter searches: one for both words, and two for each word alone. Make sure to set the number of requested results to the maximum (100). After pressing the submit button, the user will be taken to a results page. On this page, you’ll display their Twitterwhack index and score, a comment on how well they did, as well as a sample tweet that contains their search terms. The Twitterwhack index is simply the number of results which contained both of their search terms, up to the maximum of 100. Lower indices are better, although zero doesn’t count. The Twitterwhack score is the product of the number of results which had the first term and the number which had the second term, up to the maximum (100*100 = 10,000). In this case, a higher score is better. Your comment on their result should be based on their index. For example, you might say  Excellent!  for an index 5 or below,  Try again!  for an index 90 or above, and  You got whacked!  for an index of zero. You only need to have a small handful of different comments. You should select a random example tweet from among the results that had both terms and display the text of that tweet along with the name of the user who wrote it. In the event there were no tweets, you should instead output a message saying so. Example output looks like this: Your words (sinatra and test) gave an index of 10 with a score of 10000. That's pretty good! An example tweet that contained these words is: RT @JimmyJazz1968: If MSNBC can pull the plug on Frank Sinatra & Woody Allen's test tube baby then nobody is safe NOBODY by prostgrad ", "tags": "", "loc": "/content/topics/pa/pa_twitterwhack.md/" },

        {"title": "FAQ for Pito Salas", "text": "Mutual Respect Here are some things about me as a teacher that might be interesting and useful for you to know. I think it might make it easier to understand how I respond and why I say some of the things I say. I care a lot about teaching. It’s an art that I am still mastering and am very committed to. I put a lot of work into organizing a course, preparing for an individual class, and working with students. I feel proud and successful when students tell me that a course or class or experience was valuable for them in their own lives or carreers. I care a lot about-follow up. If I say I will do something and I don’t do it, I feel bad. I expect the same from you. If I make a specific request in person or email, I expect a response. Even if the response is that you can’t meet the request. Leaving me hanging is not good, I will remember and grumpily ask for it again. It’s important to me to feel like you are serious and engaged and trying I know that students take a course for many different reasons. Some see this as their future others think it might be kind of interesting. Some have been playing with computers since high school, and for others they are not sure yet if they even want to be a computer scientist. That’s understood. However what makes me sad is to see or feel that a student for whatever reason is nt seriously trying their best, that they don’t give a ‘hoot’. I care a lot about maturity and ‘professionalism.’ I work hard (really) at this and I expect you to do the same. We treat each other with respect not because I am the teacher and you are the student, but because we value the effort that each other is bringing to the experience. No one is forcing either of us to be here. I am very available to you. Maybe more than you realize. My email is pitosalas@gmail.com and you will get a response very quickly. You also have my personal cell phone number. If you are ever unsure about anything, please ask: in person, or over email. I hope no one is ever nervous or unhappy because they don’t feel they understand what is going on, what is expected from them or some material. There are a lot of ways that I can help you. Please take advantage of them. I can help you understand stuff, decide what matters to learn, how to plan your work, I know a lot of people in a lot of disciplines who want to help students like you. Don’t miss the opportunity. If something in this doesn’t make sense to you or sounds odd, please let’s talk about it! ", "tags": "", "loc": "/content/topics/personal/pitofaq.md/" },

        {"title": "5 Questions", "text": " Proposer: Pito Salas Product name: 5 Questions Tweet length summary of project: Are you growing or are you in a rut? Look back in time to what your goals and priorities were in the past. Product Summary: Like 10Q but focused on college students. Once each year, on Oct 1 (or any other arbitrary date), subscribers get asked 11 Questions relevant to their future plans and college careers. They have 11 Days to answer after which their answers go into a vault. They can’t edit or look at them again. Until 12 months later. They see their answers to see how things really turned out. And they get the same 10 Questions again. It’s playing with time and time travel and looking back and into the future. Elevator pitch: What if over the last 4 years you answered, in private and confidentially, some personal questions about your life, your goals, your challenges and could look back at those answers to see where you’ve been and where you are going? 5 Questions is a platform for orchestrating this at a global level and in doing that descern global trends in culture, psychology and satisfaction. Describe the customer(s): The thoughtful, introspective person who wants to learn and evolve. Communities who want to reflect on their character and growth Researchers who want to analyze anonymized quantitative data about global psychology Describe what  jobs  the product will do for the customer: Once a year, contact the user and ask them to answer 5 questions, store them securely and anonymously. At the same time show the user the trends and answers they gave over the past years. Collect categorized and tagged answers to develop metrics, trends and forecasts. Customer Pains/Gains: describe what problems the product will eliminate for the customer Gain a low-impact and long-term understanding of your personal priorities, goals and direction Lose a sense of running in place, lack of growth and sense of being directionless. Understand the long term trends in the psychology of your community members. ", "tags": "", "loc": "/content/topics/products/5_questions.md/" },

        {"title": "AirStorage", "text": "* **Proposer**: Pito Salas * **Product name**: AirStorage * **Tweet length summary of project:** Have an empty basement or garage? Looking for a place to store your skis over the weekend? AirStorage connects the dots. * **Product Summary:** * **Elevator pitch:** * **Describe the customer(s):** * **Describe what  jobs  the product will do for the customer:** * **Customer Pains/Gains:** \[describe what problems the product will eliminate for the customer\] ", "tags": "", "loc": "" },

        {"title": "Barter Me", "text": " Proposer: Pito Salas Product name: BarterMe Tweet length summary of project: Connect people who have stuff to barter and help them make a deal. Product Summary: The product creates a marketplace of barterable goods. Users register themselves, and then register goods that they have to barter. They can be books, bicycles, refridgerators, dresses, anything. Then they can search through all the goods and find something of similar value and propose a trade to the other user. The trade is facilitated by the application but the people need to meet in meatspace to actually close the deal. Elevator pitch: Do you have stuff in your dorm room or basement that you just want to get rid of? Do you like poking around other people’s garage sales to see what crap they don’t want anymore? What if there was a site where likeminded people could discover and propose trades? You could bundle several of your things and propose a deal against several things that someone else had listed. Describe the customer(s): Someone who hates to throw stuff out but is trying to simplify their life Someone who loves finding bargains and doesn’t mind not having the newest shiniest toys Someone really pragmatic, resourceful and frugal Describe what  jobs  the product will do for the customer: List items that you want to barter Entertain proposed trades Propose trades with others Customer Pains/Gains: describe what problems the product will eliminate for the customer I have something that is not worth much to me, but I bet is worth more to soomeone else. Someone else has something that I really want, and they don’t value it I know someone wants this thing I have, but I have no idea who I know someone has thing I want, but I have no idea who ", "tags": "", "loc": "/content/topics/products/barter_me.md/" },

        {"title": "Campus GPS", "text": " Proposer: Pito Salas Product name: Campus GPS Tweet length summary of project: Human readable, non-GPS, directions between locations on a campus Product Summary: For any particular ‘campus’ there are buildings, floors, landmarks, parking lots, offices. Visitors to the campus need directions as simple as how do I get from the parking lot to the CEOs office. Or how do I get from T-Lot to Pito’s office. This system will generate such directions initially in English and display or text them to a recipient. As an example:  …After you park, look for a big circular building that looks like a top hat. Walk towards it, passing it on the right. When you get to the corner (with the stop sign) you will see a big lawn with a glass and green building behind it. Walk towards that building and pass it on the right. You will get to a smaller green lawn. Right ahead you will see a low slung concrete building with a set of concrete stairs going into it. Walk there and up those stairs and you have arrived at Feldberg.  Implementation note: A possible technique is to organize a set of landmarks by name, with arcs connecting the ones that can be reached combined with a sentnece that would represent that part of the directions. Elevator pitch: Don’t you always get lost finding an office, a conference room or a building on a new large campus? This product will generate fully readable, customizable directions that can be texted or emailed to a visitor. Describe the customer(s): A new visitor to a campus of any kind, but especially a largish one. It does not have to be a college, it could be a corporate or governmental. Someone who is trying to be helpful to a new visitor coming to such a campus The ‘management’ of such a campus who wants to provide a generally useful resource on their web site to supplement the generally useless maps that are incomplete and not detailed enough. Describe what  jobs  the product will do for the customer: Generate reliable directions for the visitor to use to find where they are going Generate reliable directions for the occupant trying to direct someone Produce a really useful feature for the web site of the ‘management’ Customer Pains/Gains: [describe what problems the product will eliminate for the customer] I get lost finding a location I have to struggle to generate useful directions to give a visitor ", "tags": "", "loc": "/content/topics/products/campus_gps.md/" },

        {"title": "Class Planner", "text": " Proposer: David Barsky Product name: Class Planner Tweet length summary of project: Planning the courses a student has to take in order to graduate is stressful and annoying. This makes the experience suck less. Product Summary: A class/major planner. It looks at previous semesters, and checks when the classes were offered, and makes predictions as to when classes will be offered in the future, thereby letting Elevator pitch: College course planning is painful, stressful, and filled with ambiguities like,  when will this class I want/need to take be offered again?  An app that provides a visual representation/understanding will be invaluable for many students in figuring out their college careers. Describe the customer(s): College students planning their courseload and majors. Describe what  jobs  the product will do for the customer: Figure out what classes the user would like to take. Lets the user plan their years at college. Customer Pains/Gains: [describe what problems the product will eliminate for the customer] Reduce anxiety abotu planning college classes. Give a sense of direction â knowing where one’s going is incredibly powerful. ", "tags": "", "loc": "/content/topics/products/class_planner/" },

        {"title": "Epsilon", "text": " Proposer: Jess Ochs-Willard Product name: Epsilon Tweet length summary: Physical media database and playlist manager for radio stations Product summary: Epsilon will be a web service for both terrestrial and online radio stations that encourages the station’s DJs to log the music they are playing, generate playlists accessible to the general public either through the site or an embedded widget, review and rate albums, songs, and artists, and access the reviews and ratings of other DJs and possibly radio stations that use the service. This will promote a deeper knowledge of the physical library, which is increasingly overlooked in an age of Spotify, Google Music, Youtube, etc., but which offers higher quality audio and media that is often not available on any streaming source. Customer base: Terrestrial and online radio stations with large libraries of physical media. This is not a massive customer base, but it seems like a tuned-down version of the business-to-business software model (e.g. Salesforce) which to me is more interesting than consumer apps What does it do for the customer: Epsilon makes available the full contents of any radio station’s physical library, along with the physical location of said media in the library, and offers semi-crowdsourced ratings and reviews, so that DJs will know what their peers like or dislike Personal statement: I’m the General Manager of the campus radio station, WBRS, and I used to be the tech director, and it dismays me to see DJs play all of their music off their computers. It sounds worse, and it’s honestly super cool to browse through the library and find new things. That’s too much of a commitment for people, but it would be a great first step to allow them to find out what other students like and where it lives, and maybe they’ll find something else they like when they go to get that CD or vinyl Basic Database Schema: Entity: Album Name Songs Artist Release Date Reviews Rating Location Length (time) Entity: Song Name Album Length (time) Entity: Artist Albums Songs Entity: DJ Playlists Entity: Playlist Songs DJ ", "tags": "", "loc": "/content/topics/products/epsilon_prod.md/" },

        {"title": "Expert Advice", "text": " Proposer: Pito Salas Product name: Expert Advice Tweet length summary of project: 3 Minute expert advice videos from student and faculty experts Product Summary: A crowd sourced collection of 3 minute videos with advice on topics of interest to members of the community. Professor Jones speaking about  The Perfect Resume ; Student Jones speaking about  Surviving Cosi 166 ; Student Jones speaking about  Running a successful Hackathon ; Coach Jones speaking about  Is Fencing for you? . (Sorr for the lame examples.) Any memember of the community can record a video on their smartphone and nuggets get voted up and down by users. In addition to voting up and down, users can share videos they liked on FB, Twitter, etc. Elevator pitch: Describe the customer(s): Describe what  jobs  the product will do for the customer: Customer Pains/Gains: [describe what problems the product will eliminate for the customer] ", "tags": "", "loc": "/content/topics/products/expert_advice.md/" },

        {"title": "Explosify!", "text": " Product name: Explosify! Proposer: Phill Skokos Tweet length summary of project: Select from a database of pre uploaded lens flares, explosions and lasers to make videos appear to be an action film Elevator pitch: Product Summary: Explosify! is an app that is a basic video/image compositor which selects from a database of images and videos of stock footage to be added to short clips that the user uploads. This will let the user produce a photograph, or a short 7 second video. Describe the customer(s): Vine users, Instagram users, sharers of multimedia and content creators, in order who are interested in adding special effects. There is a host of applications that are image manipulators, but this would cater towards a social media niche user base, like instagram or vine. Customer Pains/Gains:: describe what problems the product will eliminate for the customer Describe what  jobs  the product will do for the customer:It creates a basic profile for a user, which includes the list of videos that they have produced Personal statment: As a filmmaker and self-professed avid social media junky, I think this would be a fun project to work on, and would be a nifty and niche application for people who would like to have an application, as well as to make sharing compatible Basic Database schema: Entity: Video Name Release date Time Entity: Production Assets Explosions Lens Flares Smoke Rickochets Lasers *Filters Entity: User Video List Location About me ", "tags": "", "loc": "/content/topics/products/explosify.md/" },

        {"title": "Tinder for food/restaurants/bars", "text": " Proposer: Artem Malyshev Product Name: Tinder for food/restaurants/bars Tweet Summary: People often can’t choose where to order from or what to order. This web app allows users to upload pictures of food or the restaurant interior to help other people decide. The pictures will be presented like in Tinder where a user can flip through them Product Summary: This service will let users submit pictures of interiors of restaurants, bars and food. The user will flip through them and if he likes certain pictures they will be stored for him to review later. The liked pictures will offer links to yelp and other similar services. Furthermore the user will be able to switch to a mapped view where certain areas where user activity is concentrated will be highlighted more (solving the problem of which area of the city to go for restaurants, etc.). Concentration will be determined by amount of photos posted from that area. Also there is an idea of adding profiles for the user. So if the user posts pictures and other users like them enough he will have an  expert  status meaning he recommends good restaurants and people would like to follow him. Personal Statement: I have personally have faced issues of where to order from or where to eat out on the weekends, and Yelp reviews are not very descriptive as to the interior of the restaurants. Furthermore, pictures uploaded to Yelp are usually poor quality and few in number. Design: The design probably would resemble the Tinder: a swiping structure, with options to narrow search by allowing options (i.e., bar, restaurants or food to order). From what I understand, we are building more of a desktop application and this idea is geared to a mobile version. But I think with ruby on rails we can build a native looking web app for mobile phones and a desktop version. ", "tags": "", "loc": "/content/topics/products/food_tinder.md/" },

        {"title": "IMDB For Books", "text": " Proposer: Pito Salas Product name: Tweet length summary of project: Team Members: Product Summary: IMDB for Books: A service just like IMDB but for books: titles, genres, authors, publishers, lists of reviews, etc. This would be a very cut and dry  databasy  application that organizes information about books in a factual way. It would not contain reviews or any other subjective information, but if anything, point to it. Elevator pitch: Describe the customer(s): Describe what  jobs  the product will do for the customer: Customer Pains/Gains: [describe what problems the product will eliminate for the customer] ", "tags": "", "loc": "/content/topics/products/imdb_books.md/" },

        {"title": "Radical", "text": " Proposer: Phill Skokos Product name: Radical Tweet length summary of project: Craigslist for creatives Product Summary: Thought craigslist already has a section for creative aspects, this is for specifically creatives, and allows more freedom and customization, as well as real time updated gigs, events, and calls for talent Elevator pitch: Describe the customer(s): Creatives and artists from theater to video to film and visual art. As technology and art is becoming more integrated, it becomes more necessary to develop, maintain, and foster connections in the art world. Describe what  jobs  the product will do for the customer: It creates a basic profile for a user, and allows them to get in contact with other creatives in their field, and other closely related fields. Customer Pains/Gains: [describe what problems the product will eliminate for the customer] Personal statment: As someone who works in film, with friends in other fields such as music, theater, and art, I think it would good to have a program that would be useful towards people all these fields, in order to connect them, as well as to keep track of the connections that they make on the job, not to mention post gigs. This is different from sites like linked in, because this can be used from the amateur filmmaker, actor, and casual hobbyist to official businesses. Ideas: Person of the week: Highlights a random user within the database (probably too hard to implement in its current form, but other ideas are more than welcome. Basic Database schema: Entity:Post Description of Job Date Entity: Creative Hub Fields (for now only four) Visual Art (Sculpture, painting, etc.) Performing Arts (Dance, Theater, Improv, etc.) Filmmaking and Photography Music (All instruments) Entity: Location (within a 30 mile radius of a major city) Entity: User photograph email status Basic Profile of creative material reel/Portfolio ", "tags": "", "loc": "/content/topics/products/radical.md/" },

        {"title": "Remember my name", "text": " Proposer: Pito Salas Product name: Remember my name Tweet length summary of project: Team Members: Product Summary: Use Spaced Repitition to quickly memorize names and faces. This application takes as input a set of snapshots of faces plus the name of the person and it generates a ‘game’ that helps the user quickly memorize names and faces. Good for business people going to an important meeting or (!) professors teaching a new class. You could make the input of the names and faces clever and efficient by intelligently crawing a photo album page like is generated by Latte. Elevator pitch: Describe the customer(s): Describe what  jobs  the product will do for the customer: Customer Pains/Gains: [describe what problems the product will eliminate for the customer] Personal statement: ", "tags": "", "loc": "/content/topics/products/remember_name.md/" },

        {"title": "Carpe Diem", "text": " Proposer: Pito Salas Product name: Carpe Diem Tweet length summary of project: Impromptu events are happening on campus; announce, discover and join in Team Members: N/a Product Summary: At Olin College there is a very popular mailing list called  Carpe Diem.  It is used by students and staff to announce unofficial, informal, impromptu going ons. For example, meet on the lawn at 1 today for frisby game, or lots of left over pizza in kitchen on 3d floor, or going into Boston to demonstrate for minimum wage increase. Olin has less than 400 students which is likely an upper bound for the mailing list implementation. This product seeks to provide the same service with the same ultra simplicity, to a far larger community. To do this we will build the product as a mobile application for both announcing and browsing activities. To deal with information overload, each posted event will require one or more category tags. Users will be able to set notifications for events in categories of interest to them, with a certain time horizon. Simplicity of adoption and deployment will be paramount. Elevator pitch: In a busy and dynamic community like ours, impromptu meetings are constantly happening, whether it’s a pick-up volleyball game or a group driving to Boston for a demonstration or simply a bunch of leftover pizzas that you’d like to share. Carpe Diem is a super simple mobile app for announcing and discovering happenings around campus. Never be at a loss to find something to do when find yourself with a free block of time. Describe the customer(s): There are two audiences. We are not sure yet whether we cater to one or both: Communinity members, who want to be able to announce as well as browse for events. They will need very easy sign up and use. They will be concerned about privacy. Community Administration:, who want to provide this as a campus wide service to benefit the community. They will be concerned about privacy and security. They will want to set policies about who can and cannot post or search. Describe what  jobs  the product will do for the customer: Members: discover something fun or interesting to do during free time announce something fun or interesting that you want people to come to Administration: post an announcement to an officel event look at metrics of the kinds of activities that are being searched Customer Pains/Gains: [describe what problems the product will eliminate for the customer] Members: feel connected with what is going on on campus have a low friction way to let the community know about something you are doing I have some time free and I wish I knew some things that were going on I am putting together an event and want to bring people to it Administration: learn more about activities that people are looking for engender community cohesiveness an additional ‘channel’ to announce official events increase community happiness Address feedback that community members feel out of the loop Makes it easier for new members to become active community members Personal statement: I’ve seen the popularity of this service at Olin, and also see that the Olin approach cannot scale to a larger community. I also know from talking to students that many feel like they don’t know what is going on in their areas of interest. Another point that has been made is that there are random blocks of free time when people are interested in participating in something but don’t have a good way to find out what’s around. This, from an Olin Student: So, Carpe as a mailing list is the destination for serendipity. People send out emails about Urban Outfitters sales, free stuff, free food, cool events, anything Oliners could find interesting. I could imagine a mobile app version allows anyone to flash-submit an interesting on-campus occurrence or student-relevant event outside of campus. I’m sorting of thinking of slickdeals.net (a community-sourced deals site) but on a way shorter time scale and with more diverse items. It’d have to be really easy to send a Carpe, or maybe the app could watch a mailing list and apply some filters to deliver the user Carpe’s most relevant to them (for example, I want to know if someone is handing out computer RAM but I don’t care about free kale). It could be like a low-latency craigslist, especially if the communication is done instantly in-app. ", "tags": "", "loc": "/content/topics/products/seize_the_day.md/" },

        {"title": "Student Opinion Panels", "text": " Proposer: Pito Salas Product name: Student Opinion Panels Tweet length summary of project: Team Members: Product Summary: Develop a huge, diverse panel of students who are willing to answer a focus group kind of question, for example,  How many cups of coffee do you drink each day. , or  How much would you pay for streaming access to NFL games from your dorm room . Businesses who want to pose questions, based on geography, gender, age, or whatever, pay a fee to the business. That fee is used to compensate the students based on some magic formula. Panel members recruit new panel members to grow the panels from campus to campus. Elevator pitch: Describe the customer(s): Describe what  jobs  the product will do for the customer: Customer Pains/Gains: [describe what problems the product will eliminate for the customer] Personal statement: * ", "tags": "", "loc": "/content/topics/products/student_focus_group.md/" },

        {"title": "Template", "text": "* **Proposer**: * **Product name**: * **Tweet length summary of project:** * **Product Summary:** * **Elevator pitch:** * **Describe the customer(s):** * **Describe what  jobs  the product will do for the customer:** * **Customer Pains/Gains:** \[describe what problems the product will eliminate for the customer\] ", "tags": "", "loc": "" },

        {"title": "Trade Assistant", "text": "Incubator Product Proposal Proposer: Pito Salas Product and Team name: Trade Assistant Tweet length summary of project: Your own trading bot monitors the market, applies your rules, and sends you buy and sell reminders Team Members: [up to 3 other people. Proposer has to be part of the team] Product Summary: When it comes to a volatile market, many people have rules of thumb about when to buy and when to sell. This can apply equally to stocks, securities of any kind, commodities like gold, or even bitcoin! Trade Assistant monitors the market according to your personal rules of thumb and alerts you by tweet or email with advice, e.g.  Buy 4 shares of Apple now , or  Sell $100 BTC now . The Trade Assistant does not do any trading! Instead it reminds you of your own buy and sell signals by email or text message. TA is not artificially intelligent, it simply applies your own rules of thumb. This can be most easily explained with an example. Here are some examples of the kinds of iTunes Smart Playlist-like rules that can be set up:  Buy .1 BTC when price is below $500   Sell .05 BTC when the price is higher than the highest price it hit in the last 3 months   Buy 10 AAPL when the price is within 10% of the low for this year   Sell 10 AAPL every 2 weeks  TA monitors all the securities you are interested in and when one or more rules fire, it generates an alert by email, text message or tweet. Elevator pitch: Do you like to trade stocks? This product gives the amateur investor accesss to a powerful algorithmic trading tool to help then respond more quickly to the market. Set your own personal trading rules and then get reminded by email or text message when it’s time to put in an order. Describe the customer(s): An advanced amateur trader in stocks, commodities or currencies Describe what  jobs  the product will do for the customer: Constantly monitor the market, apply the customer’s own rules, and fire of alerts to buy or sell. Similarly, the customer can receive alerts about market moves, suggestive patterns. Customer Pains/Gains: Pain: I know what my buy or sell signals are, but it takes too much time and attention to monitor the market all the time Pain: I loose money because I cannot act quickly enough on market moves Gain: I save time because TA is watching the markets, I don’t have to Money: This product is perfect for a freemium model. Basic functionality free, and more advanced use will have a monthly fee. Note that the product does not do trades and so there’s no revenue opportunity around trade commisions. ", "tags": "", "loc": "/content/topics/products/trade_assistant.md/" },

        {"title": "Twitter Feed Reader", "text": " Proposer: Pito Salas Product name: Twitter Feed Readers Tweet length summary of project: Twitter has taken over for many people as the source of news but the twitter experience is lousy for readers. Team Members: N/a Product Summary: Elevator pitch: Describe the customer(s): Describe what  jobs  the product will do for the customer: Customer Pains/Gains: [describe what problems the product will eliminate for the customer] Personal statement: ", "tags": "", "loc": "/content/topics/products/twitter_feed_reader.md/" },

        {"title": "Video chat pen pal", "text": " Proposer: Yoseph Kantorovich Product name: Video chat pen pal Tweet length summary of project: Practicing languages with native speakers Product Summary: What does someone learning a language have in common with the native speaker of the language? Those people also want to improve and learn English. Practice your foreign language speaking skills by videochatting  omegle style  with people from other countries. Describe the customer(s): This would be a great product for any foreign language teacher or student looking to quickly improve their speaking ability. This could also be a great tool to prepare to go studying abroad. Describe what  jobs  the product will do for the customer: Since speaking a language is the best way to learn it, this would provide simple topics and prompts for students to converse in both English and the foreign language. It would match you up with someone who is fluent in your language and is looking to learn english. Another option would be just to match up with someone looking to learn your language and be able to practice it together. Money: This could be sold to foreign language classrooms as a very handy tool for teachers to use. Personal statement: As someone who loves to go abroad and interact with different cultures I think it would be really cool to build a videochat where you can connect with people of specific countries and be able to interact with them while improving your mastery of their language. Design: The design would be similar to omegle.com where you could write in the name of the language you want to practice and connect to a native speaker or someone else who is learning your language. ", "tags": "", "loc": "/content/topics/products/video_chat_pen_pal.md/" },

        {"title": "Zillow for dorm rooms", "text": " Proposer: Pito Salas Product name: Tweet length summary of project: Team Members: Product Summary: I don’t know if this makes any sense because I don’t know how rooms are assigned exactly… But what if you could rate your dorm room - location, condition, things that work or are broken, convenience to classes, condition of the bathrooms whatever. Then, when you are deciding what room or building to go for you have some basis for doing that. Also it could then become a source of info for knowing what rooms need to be repaired or rehabbed or whatever. Elevator pitch: Describe the customer(s): Describe what  jobs  the product will do for the customer: Customer Pains/Gains: [describe what problems the product will eliminate for the customer] Personal statement: ", "tags": "", "loc": "/content/topics/products/zillow.md/" },

        {"title": "Code Reading Practice", "text": "Some of you have said that you’re interested in investing more time in becoming master programmers. One of the best ways of doing that is reading other people’s code. I’ve selected 4 libraries that are all pretty small and digestable for your consideration. Because I am currently teaching Ruby, these examples are all Ruby. But a similar list would be easy to build for other languages. While each language has some unique capabilities that will be exploited in examples, most of what you learn in these examples would apply equally to other languages The list SignalLamp TimeTress Inflecto MicroMachine Proposed Process Find a group of two or three other, equally passionate programmers and decide on one of these programs to study. On your own study the library. Write a sample program using it so you really know what it is supposed to do. Read it on your own to orient yourself. Get together around a single computer and go through the program, line by line and discuss and explain what it does, all the while tapping into the web and ruby documentation to follow up on questions that are raised. My Special Offer I would be glad to participate in this meeting if you want! ", "tags": "", "loc": "/content/topics/programming/code_reading_practice.md/" },

        {"title": "Code Smells", "text": "Code Smells What are they? Signs that your code can be made better Things you should look for when doing a code review Learned from practical experience There are many lists, this is mine of the top ones They are not hard-and fast The smells Large class: Class longer than 100 or so lines Large method: Method longer than 10 lines or so Long parameter list: methods with 4 or more parameters Single Responsiblity Violations: Class should do one thing Global variables: Almost always a very bad sign Bad Name: Non descriptive or very short variable names Unnecessary complexity: Nested conditionals (ifs and case) are questionable Feature envy: A class that uses methods of another class exessively Note Smells can be ambiguous or language dependent Some references Smells to Refactorings Sandi Metz’ Rules for Developers Sandi Metz’ Rules Video ", "tags": "", "loc": "/content/topics/programming/code_smells.md/" },

        {"title": "Good programming", "text": "Good Programming What is  disposable code ? Not designed Incomprehensible 1 year, 1 month, 1 week later Just barely works, no idea why  write-only  Long, ugly methods Bad or meaningless naming Rules and Slogans QUOTE Know the rules well, so you can break them effectively. (Dalai Lama) Slogans DRY:  Do Not Repeat Yourself . YAGNI:  You’re Not Gonna Need It  NIH:  Not Invented Here  BDOF:  Big Design Up Front  Discussion about hard and fast rules Tools to automatically check: Automatic Code Reviews Code Smells What are they? Signs that your code can be made better Things you should look for when doing a code review Learned from practical experience There are many lists, this is mine of the top ones They are not hard-and fast The smells Large class: Class longer than 100 or so lines Large method: Method longer than 10 lines or so Long parameter list: methods with 4 or more parameters Single Responsiblity Violations: Class should do one thing Global variables: Almost always a very bad sign Bad Name: Non descriptive or very short variable names Unnecessary complexity: Nested conditionals (ifs and case) are questionable Feature envy: A class that uses methods of another class exessively Note Smells can be ambiguous or language dependent Some references Smells to Refactorings Sandi Metz’ Rules for Developers Sandi Metz’ Rules Video Other basic hygene What’s the right amount of code commenting? How important is proper formatting? Why is naming important and what is it’s connection to commenting? ‘Sandy Metz’ Rules Classes can be no longer than 100 lines of code Methods can be no longer than five lines of code Pass no more than four parameters into a method Controllers (Rails) can insantiate only one object. Therefore views can only know about one instance variable, and only send methods to that object. (@view_presenter.user.username is not allowed) ", "tags": "", "loc": "/content/topics/programming/good_programming.md/" },

        {"title": "Choosing a project to work on", "text": " Be hard-nosed! Don’t go for what looks fun and cool ONLY Challenge yourself and your teammates Do a little research using your common sense! Can you find other similar products, competitors, or related products, and is this a good or bad thing? Look in Kickstarter and RocketHub. Are there any related projects? Do you believe that you could actually get enough funding through Kickstarter or RocketHub to build a prototype? What would the Sharktank say of it? How big a real problem is this really solving? For who, and do you think those people would be willing to pay for it? How would you get it to them? What kind of price do you think they would be willing to pay? Are you pretty sure this can be productized (that is, not can we make a single one by hand, but can we make a lot of them?) ", "tags": "", "loc": "/content/topics/projects/choose_product.md/" },

        {"title": "Term Project Final Deliverables", "text": "Summary [DRAFT] This is a team, multi-part deliverable. You should start looking at this at the start of the Term Project part of the course so you know what you are working towards. Don’t be scared by all the words below, I am just trying to be clear and detailed. Questions are welcome! Remember, 9 out of 10 startups fail. It is not expected that each project yields something that merits investment. The important things are the journey, the process, and what you learned that will help you be a better entrepreneur. Final Presentation Day On Monday December 15,1:30PM - 4:30PM we will have final presentations. Several Product Reviewers (tm) will be invited to listen to each team do their presentations, ask questions, and have one on one conversations while we munch on snacks and drink delicious beverages. The PRs will ask to review the projects as if they were looking for angel funding. Their review will be based on the formal presentation. But your grade will be based on that plus the three pdf deliverables described below. What we will be looking at In general, it is important that the following comes through: That you based your proposal on empirical outside information ( getting out of the building. ) Talking to people, surveys, looking at other products or web sites, data from studies that might be relevant etc. That you focused not just the user interface of the product, but also on growth, pricing, getting awareness, feasibility and so on. Here are some more specific critiera that should come through: Important These are more topics than you can possibly cover in the presentation. It's expected that some be relegated to the report. the idea itself, with an elevator pitch and positioning/value prop Your understanding the market and the customer Summary of top hypotheses that were tested and the results thereof How much you learned by getting outside the building How well you have addressed the biggest and riskiest hypotheses Your thinking about growth: initial awareness, and further growth of adoption Your analysis of the target(s) users and/or organizations and/or institutions and/or companies Your thinking about the pricing and business model Your thinking about the feature set (stories) Your thinking about the user experience (paper prototype, ux flow, mockups, etc.) Your thinking about the feature set/stories for the product and the technical architecture Your ability to deliver the product if it were funded You should consider using the Business Model Canvas structure as the outline of either your presentation or your handout or both. This is just a suggestion. Here it is: Business Model Canvas Specific Deliverables An 8 minute presentation. Will be delivered by all the students on a team. The presentation needs to be rehearsed and fit to the time constraint. Questions will be held to the end, and will go for up to 8 minutes. You can think of the audience as angel investors. Slides for the presentation. These should be submitted for grading as a pdf. Paper (Report) Of your proposal, with additional information (5-10 pages.) You can assume that whoever reads it also has the presentation slides. You can think of the audience for this piece to also be angel investors. You should submit it for grading as a pdf. Ad or Brochure or Flyer for your product (1 page. 2-sided if you want. Color. Pretty.) These should be submitted as a pdf for grading and also printed out to hand out to the guests. This is pure marketing. How do you want to convince your customer to adopt your product? If your product has two distinct customes, e.g. University Admin and Students, then it’s ok to have two Ads if you feel you need it. ", "tags": "", "loc": "/content/topics/projects/final_deliverables.md/" },

        {"title": "Term Project Report", "text": " N.B. Please maintain your term project’s version of this document. You may tweak it at any time and even reorganize it. Just make sure that you cover every point of the outline in your document. Make sure that if you printed it out and gave it to someone who had never seen it before it reads and looks clean and professional. Pro Tip This is not a form to be filled out. Truly excellent Project Documents often will diverge from this Introduction Product and Team name: which can be anything you want. Sometimes people just pick a code name like Team Alpha, and sometimes a descriptive name like Team Affective Tutor. You can always change it later. Team Members Summary Tweet length summary of project (140 characters) Product Summary (1-3 paragraphs) Value Proposition Designer Canvas Customer Jobs Customer Pains Customer Gains Products and services Pain Relievers Gain Creators Elevator pitch and value proposition Elevator Pitch as you might use for a non-technical business savvy person, for example a senior member of Brandeis administration (see: Elevator Pitch) Value proposition statement, using a ‘sentence template’ like we used in class Tracking ", "tags": "", "loc": "/content/topics/projects/final_report.md/" },

        {"title": "Frame 1 Report", "text": "Report 2-5 pages, including diagrams, photos, graphs or whatever Based on work done so far in Frame 1 and looking forward Format could be a word document, a pdf (or even a one page web site, but that would be unusual) How to write an excellent report This report will be read as a unit, without refrence to previous drafts It should have a logical flow of an argument with an introduction and a conclusion Give consideration to visual appearance of the report, it should look professional By now your team should have really solidified around your product’s vision Try to have as much substance as you can based on outside research, meetings, references etc. Show that you’ve ‘done your homework’ See suggested topics below, which is not meant as an outline just stuff to jar your memory Suggested Contents Checklist Name: Product or codename Team members: names and emails Visuals: Any mockup or diagram or flow chart to illustrate the product One liner: Tweet Length summary of the product Vision: A concept for an exciting and impactful product or service with team alignment on exactly what the product is (this is harder than you think!) Can be 2-3 paragraphs. Elevator Pitch: Elevator Pitch) for your product (with validation if possible) Value Proposition: Based on the Value Proposition Canvas. Hypotheses: What type of hypothesis? (customer, problem, etc.) Any leap of faith? Which ones did you validate and which ones failed? By what evidence? Getting out of the building: Design and results out of the building ‘experiments’ to test hypotheses with multiple proven or disproven. What tools and techniques did you use, what were the results? Which ones would you still like to validate? What dead ends did you pursue? Analysis: And preliminary conclusions based on validated learning so far. Strategy going forward: Immediate next steps; identified risks and ways of addressing them; reasons to believe this will be a fundable product going although further pivots will be needed; Conclusions ", "tags": "", "loc": "/content/topics/projects/frame_1_report.md/" },

        {"title": "Frame 2 Report", "text": "Report 4-10 pages, including diagrams, photos, graphs or whatever Incorporates all the content of the Frame 1 Report, revised as much as you require Format is PDF How to write an excellent report Flow. This report will be read as a unit, without reference to previous drafts. It should have a logical flow of an argument with an introduction and a conclusion. Try to think bigger. You will need to make a case that the product will be a viable business. Be Serious.Your work is evaluated not just on whether you follow the steps or the format but based on whether you are being realistic and intellectually honest about your proposal. Would you actually pitch this to an Angel? Get Out. Everyone needs to get out of the building more. Go beyond your friends. Talk to strangers! Professionalism.* Give consideration to visual appearance of the report, it should look professional Substance Try to have as much substance as you can based on outside research, meetings, references etc. Show that you’ve ‘done your homework’ Suggested Contents Content of Frame 1 report is incorporated, revised and edited as much as required A visual mockup or good paper prototype to use in further experiments and as input to the design. It should include all the important screens and give the reader a sense of the product. A diagram showing the flow of screen to screen in the user interface and explanation thereof. An architectural diagram of the product, site, app or service. An idea of how it could be built. Major technological risks are called out Preliminary technical architecture: Database schema (Domain Model) makes sense and is explained well Tables, fields, joins and so on are worked out Some thinking about communications and where the data is stored Overall system architecture - what are the major components Some sense of how the overall product will be built List of stories. Don’t just show a big list. You need to organize them into sets of related functionality, sometimes called  epics , for the purposes of presentation. For example:  Core Proximity Functionality (4 Stories)  or  Abilities to define ad-hoc survey for real time feedback (5 stories)  or  Visualize and change users visibility to other users (5 stories)  or  Animal shelter registration and profile updating (3 stories) . Strategy going forward: Immediate next steps; identified risks and ways of addressing them; reasons to believe this will be a fundable product going although further pivots will be needed ", "tags": "", "loc": "/content/topics/projects/frame_2_report.md/" },

        {"title": "Pilot Project (P2P Tours)", "text": "For the first 4 weeks of the course we will focused on the  Lean Startup  approach to validating a vision for a project, pivoting as necessary to achieve a product-market fit. We will divide students into groups of 5 or so, and each group will work independently to use the process on the vision for a product called  P2PTours  This vision is purposely vague and allows many different implementations and instantiations. P2PTours - Peer to Peer Tours  Our vision is that using just a cellphone, travelers can now get access to a huge and wonderful collection of local tours, recorded by local experts, for free or for a nominal fee. Imagine: you walk into St. Peter’s Square and choose which local expert you want to listen to: a historian? A priest? An architect? A chef? Each one will have their unique perspective and will enhance your visit in their own unique way! Process Class is divided into 5-student teams. You are a study group. You will work together to understand the ideas of Lean Startup and apply them to the Pilot Project. During the first 4 weeks we will rapidly cover the Lean Startup approach and concepts. In that time you will read about half the book. I recommend that each pilot team arrange to meet at least 1-2 hours per week outside of class as a study group to learn from each other and work on group homeworks. The pilot project will end with a class when each of the teams present their deliverables for the pilot project. Team Deliverables A report/discussion of 2-4 pages covering the elements of the lean startup process including: Elevator pitch for the product (see: Elevator Pitch) Vision (revised): Describe your product or service, in one tweet and then in a paragraph or two. Hypotheses: What type of hypothesis? (customer, problem, etc.) Any leap of faith? Which ones did you validate and which ones failed? By what evidence? Getting out of the building: What tools and techniques did you use, what were the results? Which ones would you still like to validate? What dead ends did you pursue? MVP: What MVP(s) did you create or would you create. How did you or would you use it to validate the hypotheses? Engine of Growth: What are some of the ways in which this can grow? Which of the types of engine of growth do you think would work Pivots: What pivots do you anticipate and why? How would you handle them? Conclusions: Do you think this product would work? Could it make money? Would you invest in it? Reflect on the experience: How did your team operate? How well did the LS work for you? ", "tags": "", "loc": "/content/topics/projects/pilot_project.md/" },

        {"title": "Product ideas", "text": "Best ideas Closed Student Online Focus Group: Has a huge, diverse panel of students who are willing to answer a focus group kind of question, for example,  How many cups of coffee do you drink each day. , or  How much would you pay for streaming access to NFL games from your dorm room . Businesses who want to pose questions, based on geography, gender, age, or whatever, pay a fee to the business. That fee is used to compensate the students based on some magic formula. Panel members recruit new panel members to grow the panels from campus to campus. 11 Questions: Like 10Q but focused on college students. Once each year, on Oct 1 (or any other arbitrary date), subscribers get asked 11 Questions relevant to their future plans and college careers. They have 11 Days to answer after which their answers go into a vault. They can’t edit or look at them again. Until 12 months later. They see their answers to see how things really turned out. And they get the same 10 Questions again. It’s playing with time and time travel and looking back and into the future. Yelp for Online courses and Moocs This problem is just being noticed. If I want to take an online course on some topic, say  How to fix a car  or  Econometrics  I might find two, 3 or even 10 offerings from different teachers and institutions. How do I know which one to take? Cryptocurrency Visualizer: An educational or research tool that creates a visualization of how cryptocurrencies in general or bitcoin in particular, work. Showing all the network nodes, simulated users and miners, an animation of all this, including the public ledger. Could serve many purposes, starting with teaching. IMDB for Books: A service just like IMDB but for books: titles, genres, authors, publishers, lists of reviews, etc. This would be a very cut and dry  databasy  application that organizes information about books in a factual way. It would not contain reviews or any other subjective information, but if anything, point to it. RegisterBot: Alert me when a course that I want to take is open for registration. Uses the Universities data access API to efficiently monitor and then alert user about course availability. Generalize to other situations when you want to know as soon as something becomes available. Personal Training Service via Skype: Delivers how-to videos and excercises, a platform for trainers and phys ed teachers and physical therapists to offer their services via skype. ExcuseMe (mobile app for people in a gathering to allow the participants to react to what is being presented). Related to Classroom clicker, but much simpler. Yelp for Courses: Crowdsource student ratings of courses. In the simplest example, simply let me list my 3 favorite courses. Or perhaps rate courses that I’ve taken. And then help another student discover great courses in other departments perhaps that they never knew existed. Generalize to help me pick my favorite beer, or my favorite tv show. Instead of ratings, keep it very simple: each user picks their top 3. Generalize further by tying in availability of the course, or whether it counts for your major, or whether it is offered when you need it. Rember My Name: Use Spaced Repitition to quickly memorize names and faces. This application takes as input a set of snapshots of faces plus the name of the person and it generates a ‘game’ that helps the user quickly memorize names and faces. Good for business people going to an important meeting or (!) professors teaching a new class. You could make the input of the names and faces clever and efficient by intelligently crawing a photo album page like is generated by Latte. FoodFlix: A service for for restaurants to get professional photos and videos for their establishments in say Tripadvisor or Yelp. The premise is that great images greatly improve the results of listings on sites like Tripadvisor, yet most restaurants don’t know that, don’t care, don’t have the wherewithal or assume that getting good photos is expensive. The concepts would be that the business is around designing and optimizing a real-world process for cheaply making and posting these photos and videos. It also tests and optimizes the style, titling, length, etc of photos and videos for maximum effectiveness for the chosen purpose. FinancialBot: Approachable way to create stock selection agents which watch for certain patterns in prices and market conditions and do things, most likely send an email. For example:  Alert: Stock INTL price is within 10% of 12 month low.  Allow a normal person to do program trading in a safe way. Possible to have some domain specific language, or an iTunes Smart Playlist kind of user interface to create agents that ‘run in the cloud’ and send emails, or some day actually perform trades. BarTalk: A short-distance walkie-talkie for use inside a noisy bar. We can talk to each other right across the room. There are many other applications. It’s clearly just a fun toy but it could be very cool. A software-only solution that might work goes as follows: Using a pair of smartphones and bluetooth headsets, the two phones could use low-power bluetooth to transmit voice between the two. If that approach can be made to work technically, then the further details of the user interface are quite soluble. Giving Portfolio: This app uses publicly available charity ratings databases to design a customized, personal portfolio of giving based on broad categories of causes, funds to be donated, and a time schedule. With this app the donor orders a customized report recommending varying donations to causes over time. For example, I want to support charities with less than 12% overhead, that focus internationally on education and homelessness, and I want to donate $1000 every quarter. This tool will send me an email every three months with specific and up to date recommendations. Genius Online: Inspired by an Amazon announcement today: Amazon Mayday. This idea is to provide the same kind of  Apple Genius  live support to Mac and Windows users. They pay a subscription fee or a per incident fee and get live video assistance for their basic computer problems. I do this for my mother all the time. And by the way, if someone calls AppleCare to get help, the incident cost is pretty high. This could by concierge-tested very easily. SpeedSpy: A distributed way to address speeding or unsafe driving on public transportation. Running this app simply captures the location and speed of the vehicle. The app knows the official speed limits for busses, trains, trolleys and captures apparent violations. This data is collated on the server to be used for flagging dangerous drivers, or times of day, or parts of a route. Internal Social Network: Professor Ben Gomes Casseres is interested in a tool optimized for groups or organizations of 100-1000 people or so. Create a secure internal social network that mimics the best of Facebook, Twitter, Tumbler, Reddit, Wordpress and other social media platforms. But this one should be focused on forums, topics, events, resources, and images of interest to the group. Ideally, cloud based and accessible from all devices. One use, for example, would be for internal communication inside Brandeis or a specific program here. But it will compete with open networks that students also use. So, ideally, it is linked to these open networks, filters relevant info from them, or something like that. The business model would probably involve the organization or group leader buying the product, managing access, and doing some monitoring. There are some products on the market that may approximate this, but it is not clear how good they are (e.g. Ning). Corporations often have such internal networks, but they worry more about security than organizations such as universities – for corporate use, a cloud solution is less likely for them. Curriculous: A teaching and learning tool to allow a teacher to easily create a course web site, including curriculum, lectures, course notes etc. Based on the product with which I made this site. Future would allow each lecture to have a video assoicated with it, allow students to hand in homeworks directly on the site, automatically convert the curriculum into a powerpoint or pdf and many other cool things. Tweeting Trees: Chris Osgood of City of Boston says: Drought and high heat are two of the major summer stresses for our street trees, and we don’t have the ability to water every tree in the summer when they need it. To encourage residents to help out – to adopt-a-tree – we thought it would be compelling if adopted trees could tweet @ their adopter when thirsty (a.k.a. low moisture levels.)We’ve been looking for a partner who can build something for us to pilot this with.  Lean Startup Growth Engine: Educational  game/simulator . A teaching and learning tool. Choose stragegies, set prices, design the product, burn money, earn money, analyze results over time, pivot and either get off the runway or crash. FlowPlanner: General visual discrete simulations. Professional software product, useful in all kinds of strategic decision making. Visually lay out a ‘network’ with ‘products’ and ‘customers’ flowing through, queueing up, being processed, developing bottlenecks and traffic jams. LiveClassroom: A teaching and learning tool allowing instant feedback from an audience or classroom regarding a lecture or meeting or event. Members get an email notification that looks like a survey asking about today’s lecture or class. The results of these probes are available as beautiful visualizations which help track the effectiveness and retention and motivation of the audience. Classroom  clicker  app for smart phone: Create quick surveys and tests, on-the-fly and allow folks in the audience to use their smartphones as a cicker. Grabbag from previous courses Online book club Open Source OnStar Mobile flashmob generator Skillshare - I have this skill Pandora-style Upcoming concerts Find recycling + haz. waste disposal location Aquarium Game Roommate Helper. Site to help roommates survive with each other. One Sentence Definition Computer ‘self destruct’ Create groups quickly, many groups, location based? PenPal Finder I am Qualified Face Recognition - mobile camera Coupon Search Scan social network for pictures of yourself Paths on campus (optimal paths) Lend Me A Fiver Fan-kit - make your own fan site Chore Tracker -  Honey, do…  (possible name: Honeydew)  Ask the Incubator  - or connect builders to requestors Music Composition - auto-transcribe PortableFakeBook Just the chord changes (legal stuff) - and pick the key (auto-transpose) … Vocal note entry ( Ab quarter note ) Don’t wake me up - time zone checker Brandeis Mobile Photo Productivity: where are you, how much is done, movement, plant dying showing Stop me from texting while driving ConcertFinder Social Filtering of courses Physical Disability Google Maps - pathfinder Mobile Language learning games Mobile tip calculator Collaborative Math Research platform Tycoon (City Business game) Mission Impossible (people send out missions to other people) College Thief (stealing to pay your way through college. Tagline: Books, Dorms, and a Crowbar) Modern Protest/Dynamic Democracy (real-world ‘dislike/like’) Avoid Queue (general reservation system for restaurants/replacing table waiting devices/order and pickup) MyCatalogue/VirtualButler (everything I own, library of everything you own) Batman-R-Us (I need help) Pandora Shopping (look at different types of shoes, find similar shoes) Happy/Sad (maybe prompting you, research on this information) Games for Good (rpg working way up to different ranks by doing good deeds possibly linked with activism or non-profits) Brandeis App (used by brandeis students - shuttle/WBRS/menus) Mobile Multiplayer Sketch (sharing drawings and turn taking) Who’s up for (flashmobs around certain topics; who’s up for baseball!?; announcements for events; SMS) Giraffe (rubber neck adventure;  a cool kicka** videogame that a lot of people would play ; addictive) Brandeis Monopoly (realistic version of monopoly) PEN (HORSE-like game by flipping a pen by virtual/physical movements of your phone) Remember Me? (which friends live in a city; acquaintances social network) RecipeApp (insert ingredients, says what you can make with that) Virtual Tron (running around, gps sees where you are and build walls) Turn-based-starcraft tactile envtironment MMORPG for Android Realworld RPG - Games for good levels based on past participation gain ability to set goals for others advanced users can determine tasks Real world Network of ppl w/ similar interests 100 pushups a day game Brandeis mobile app Maurauders map Course planning software Tycoon game for Android Game using speech recognition/location-aware Defcon for android Portable resume In Attendence - add friend featureBrandeis events achievements Brandeis Scavenger Hunt/BucketList/Virtual items extend to other locations Settlers of Brandeis Network realy app - extend the network Paper football Assassins for Android Brandeis King of the Hill General platform for mobile multi-player Crowd-source chess/other game Protest app where you select how long/loudly your protest Group hug (flashmob) Dodgeball anywhere Activism app Yardsale app Virtual book exchange enhanced reality (superimpose book shelves) deposit books virtually Location-based anonymous chat Enhanced reality for travelers ", "tags": "", "loc": "/content/topics/projects/product_ideas.md/" },

        {"title": "Project Plan of Attack", "text": "Planning functionality for Showcase Day Version (SDV) Instead of a final, this course will have a Showcase day where everyone presents and demos their products You will need to plan this Showcase Day Version of your product (SDV) Think of this as the absolute minimum demo of your product that you want to have working by the product showcase. What is the essential coolness of your product? Can you demo that? Remember a perfect login or user settings page is not essential coolness. Think of the aha reaction you want in the viewer. Remember you can always exceed that! Narrow your focus! Make a detailed mockup/paper prototype of your 1 or at most 2 core views your SDV will require Detailed not because it has beautiful colors but because it covers the layout AND interactions that will work. Everything from here on should be support that core view and nothing more! Divide and conquer! Make sure each team member has a distinct deliverable! Dig into the difficult things - don’t avoid them in favor of the easy things! The Walking Skeleton (WS) One of the principles of Agile development is to have running code as soonb as possible and all the time Sometime in 2 or so weeks you will have completed your  walking skeleton  version of the product It’s called that because it will do almost nothing, just simply ‘stand up’ It might show one or two screens that does one little thing with a database with just one or two tables. It’s purpose is to prove that you’ve gotten something running. ", "tags": "", "loc": "/content/topics/projects/product_plan_of_attack.md/" },

        {"title": "Project Roadmap", "text": "Towards the  Walking Skeleton  [GIT] Setup a git repo for your team [TRELLO] Setup Trello and write down stories:prioritized [PLANSKEL] Decide informally what the  Walking Skeleton  will include [BUILDSKEL] Create it using scaffolding [RUNSKEL] Get it running on your personal computers, checked into Git [HEROKUSKEL] Get it deployed in the cloud on Heroku Towards the SDV [STORYSDV] Prioritized story list for SDV [PAPERSDV] Prepare a paper prototype of the key screens of your SDV, plus UX flows [SCHEMASDV] Design Schema for your application [VIEWSMODELSDV] Identify and describe your key views and models [URLSSDV] Work out your URL scheme and build the routes [SCAFFSDV] Use rails generators to generate scaffolding for your key models and views [DB] Database up and running (focus on core views) [UNITTEST] Basic unit tests of models and one or two integration tests [ACCTS] User accounts: registration, login, logout, administration [AUTHENT] Implement initial set of authentication and authorization views [DEPLOY] Deployed to Codeship and Heroku [GEMRESEARRCH] Identify what gems you need and learn them [DEMODATA] Build up some interesting demonstration data to show off your product. [ADDTESTS] Write more tests [RAILSADMIN] Use RailsAdmin to quickly get an admnin UI to all your data [BOOTSTRSAP] Use Bootstrap for your UI framework (recommended) [KEYVIEWS] Implement Key Views for app [BACKGPROC] Background processing if needed [MAPS] Google Maps if needed [HEROKU] Deployment to Heroku [CI] Implement continuous integration and/or deployment [UIPRETTY] Make it pretty [FINAL] Final touches, prepare presentations ", "tags": "", "loc": "/content/topics/projects/project_roadmap.md/" },

        {"title": "Showcase Day", "text": "Plan Each team will have an 8 minute presentation which will be timed. Please reserve questions to the end of each presentation Product Reviewers, please make notes on this sheet with your feedback on each product. ", "tags": "", "loc": "/content/topics/projects/showcase_day.md/" },

        {"title": "Term Product Brief", "text": "Each product/service is required to complete a project brief and get instructors approval at the start of the first frame. This is to help assure consistency, good preparation, and a reasonable choice of product. Required Sections A Tweet length (140 chars) summary of your project (product or service) On a scale of 1(low)-10(high) how personally excited are you about this? The three team members Your current intuition about your proposed project: What is the problem is it solving? What is the  job  that your customer or user will hire this project to do for them? What can you say about what who the customer is, where you can find them, where they congregate? What form will your solution take, how will it work, what will it do? How will it be delivered to customers? What are some ways in which it might make money? What other ways might it make a positive impact on people’s lives or the world broadly speaking? What aspects of the product or the process are interesting and exciting to you? Feel free to add anything else you think is relevant. ", "tags": "", "loc": "/content/topics/projects/term_project_brief.md/" },

        {"title": "Term Project Framework", "text": "The purpose of the Term Project is to give you an open ended, but structured hands-on opportunity to: Apply the principles and concepts of lean startup and product discovery Think clearly about setting real goals for a product or business, whether they are to make lots of money or otherwise put a dent in the universe. Develop and practice the discipline to invest time and effort in only what is most important at any point During the  Lean Immersion  period of the course everyone will be applying Lean Startup to a product idea that I have provided. The purpose is to do a practice round without the pressure of inventing a product. The, during the second part of the course you will pursue a Term Project that you conceive of following a defined framework, which will divide the work roughly into three frames of 3 weeks each. You should expect to pivot once or twice during that phase. Challenge yourselves: We are looking for something with a potential big impact. A  big idea  that can perhaps change the world in some way. Not just a feature, but a product. Remember 9 out of 10 startups fail. If you’re doing it right, you fail fast instead of spending months and years on something that’s not gonna pan out. Our goal here is to improve those odds. There will be 3 Frames of work on the projects. At the end of eacg Frame, students will prepare and present the results of the work. Frame 1 Report Frame 2 Report Term Project Report ", "tags": "", "loc": "/content/topics/projects/term_project_framework.md/" },

        {"title": "Term Project How To", "text": "The Term Project forms the backbone of the second section of the term. Here is how it will work in general: Term Projects We will work in teams of 3-4 students which will be assigned by the teachers. Each team, by the end of the term, will have defined a new product or service, at least up to a point of being ready to seek funding. The content of the classroom work should be directly applicable to the project work. The team has to come up with a validated business model for a product or service with the following characteristics: it should solve a problem we believe people really have we have evidence that people would pay money to solve it our solution involves technology of some sort we should have reason to believe that the product can be built Objectives for each team Work as a team where everyone contributes. Figure out how you will be effective and make decisions. Describe and flesh out an actual product or service that you want to build. Follow a lean startup methodology to refine and test and describe the product in detail. Articulate and build your MVPs, pivot as needed Get out of the building and talk to real users and customers Prepare for a solid presentation of the product by the end of the semester Capture learnings along all the dimensions of the business model. Describe the details of the product as far as you can in a series of stories in Trello Ideation and team formation As you know, ther first segment of the course we will be learning the Lean Startup model and applying it to the Pilot Project (P2PTours). During this same time we will be talking and making lists of possible products or services for the Incubator. Ideas are developed as follows: We develop a master list of very brief product or service ideas. I have a list of ideas too that we can use to prime the pump. We discuss, we brainstorm, we prioritize and we clarify. In classes, we will discuss, debate, sort and prioritize, to discover the best ideas. As a result of this process we clarify and add detail. Each student belongs to a team of 3 or 4 students who will then debate amongst themselves to decide on the project. After this we enter into a three frame process, which will consume the balance of the term. See Term Project Framework ", "tags": "", "loc": "/content/topics/projects/term_project_how_to.md/" },

        {"title": "ActiveRecord Mechanics", "text": "ActiveRecord DB Mechanics ActiveRecord Library from Ruby on Rails which is the connection between the rails application and the underlying database For advanced designs, there are options other than Activerecord ActiveRecord is also often used by itself, especially in Sinatra Naming Model.rb file is named singular, e.g. User Corresponding db table is plural and lower case, e.g. users Correspondences Each instance of the class (e.g. User) corresponds to a single record in the dabase When a query returns a bunch of records, you get a collection of instances of the class (this is classic Active Record model) Attributes Rails will automagically create the methods to access each field of the record in the database Different database ‘servers’ Sqllite - local database, no need for a server MySql - Standard industrial strength database, free Postgress - Becoming very popular with Rails community Datatypes supported by ActiveRecord DB datatypes for Rails 4 Queries and other ways to access the database Validations Rails Validations Tools and notes Check out MesaSQLite Handy Rake Info: Rake  tasks  (commands) ", "tags": "", "loc": "/content/topics/rails/ar_db_mechanics.md/" },

        {"title": "Adding basic authentication", "text": "Rails Details for Authentication References Reference: Ruby on Rails Tutorial - Chapters 6,7 and 8 Reference: AuthDemo source code Intro There are several popular gems to implement authentication Beware that the fact that there is a gem does not mean that it’s trivial You need to understand what’s going on. Advice: Avoid getting fancy with OAuth, or FB or LinkedIn log in. Start with a simple password has_secure_password Line added to top of the model representing what is logging in Might be Users, or Accounts, or whatever. The thing that logs in. Makes base assumptions about that model Database contains a field called password_digest (and does NOT contain a field called password) Implements various aspects of the authentication model Look at ./db/schema.rb ./app/models/user.rb password_digest, password, password_confirmation Database only stores password_digest Model logic supplied by has_secure_password On create: compare password, password_confirmation are equal Computed a cryptographic hash (digest) And store as password_digest User.create(email:  tim@brandeis.edu , password:  abc , password_confirmation:  abc ) User.where(email:  tim@brandeis.edu ).first.authenticate( abc ) Log in/out Displaying the log in page: see ./app/views/sessions/new.html.erb Log in is a page like any other, needs a route Will assume existance of a SessionsController with create, new and destroy actions. Check rake routes to see what routes are created 1# ./config/routes.rb 2 resources :sessions, only: \[:new, :create, :destroy\] sessions POST /sessions(.:format) sessions#create new_session GET /sessions/new(.:format) sessions#new session DELETE /sessions/:id(.:format) sessions#destroy Sessions Controller Tricky: Session is not a model! Session controller maps a url (route) to some code Specifically code to execute when loging in and out session#new: display login box session#create: try validate password and save  logged in status  session#destroy: reset logged_in_status Building a form of any kind form_for is a view helper. Makes it easier to generate the required html for a form. Effect of the form is to do an HTTP PUT. This is what submit does URL for that form can come from the form_for method ActiveRecord Triggers Methods that get called before, during or after key activerecord events. 1# ./app/models/user.rb 2 before_save { self.email = email.downcase } 3 before_create :create_remember_token Helpers and Remember Token Think of these as  view helpers , used in creating and working with views and controllers Remember Token Used in sessions so we don’t expose the actual ID of the user record 1# ./app/helpers/sessions_helper.rb 2 def sign_in(user) 3 remember_token = User.new_remember_token 4 cookies.permanent\[:remember_token\] = remember_token 5 user.update_attribute(:remember_token, User.hash(remember_token)) 6 self.current_user = user 7 end ", "tags": "", "loc": "/content/topics/rails/basic_authentication.md/" },

        {"title": "Demo of controllers and resources", "text": "Setup We’re going to build a simple blogging system Posts and comments Do these commands in the shell rails new resdemo rails generate scaffold Post title:string body:text rails generate scaffold Comment body:text post_id:integer rake db:migrate Review Examine db/migrations/* Examine app/models/* Examine config/routes.rb Examine app/controllers Examine app/views Routes Run rake routes Prefix Verb URI Pattern Controller#Action comments GET /comments(.:format) comments#index POST /comments(.:format) comments#create new_comment GET /comments/new(.:format) comments#new edit_comment GET /comments/:id/edit(.:format) comments#edit comment GET /comments/:id(.:format) comments#show PATCH /comments/:id(.:format) comments#update PUT /comments/:id(.:format) comments#update DELETE /comments/:id(.:format) comments#destroy posts GET /posts(.:format) posts#index POST /posts(.:format) posts#create new_post GET /posts/new(.:format) posts#new edit_post GET /posts/:id/edit(.:format) posts#edit post GET /posts/:id(.:format) posts#show PATCH /posts/:id(.:format) posts#update PUT /posts/:id(.:format) posts#update DELETE /posts/:id(.:format) posts#destroy Play with the server Run the rails server (rails server) Access these urls from your browser observe error messages, and refer to rake routes above http://0.0.0.0:3000/posts http://0.0.0.0:3000/posts/1 http://0.0.0.0:3000/comments/1 http://0.0.0.0:3000/posts/1/comments/1 Note: no nesting! Update the controllers Now we add some code for controllers and views rails generate controller Posts new create update edit destroy index show rails generate controller Comments new create update edit destroy index show Experiment with the urls again http://0.0.0.0:3000/posts/1/comments/1 Nesting still doesn’t work Nesting happens in routing Before: 1# config/routes.rb 2 resources :posts 3 resources :comments After: 1# config/routes.rb 2 resources :posts do 3 resources :comments 4 end Review results Review rake routes Illustrate what is happening by adding params.inspect in various views. ", "tags": "", "loc": "/content/topics/rails/controllers_resources.md/" },

        {"title": "Forms and Views", "text": "#### Tour of the sample code * Reference containing all the code: [Forms_Views_emo](https://github.com/Cosi-166/form_view_demo) * Feel free to look, but DON'T COPY/PASTE! I trust you otherwise why would I give you the repo? * Take 10 minutes now to grab the code from github and look around ##### Models * There are 4 models * Item (Has many comments) * Category (Has many items) * Comment (Belongs to a comment) ##### Routes * *Discussion:*{: style= color: blue } *URLs, HTTP verbs and routes* * What's a good URL to see all items? * What's a good URL for search? * What's a good URL for seeing a list of comments? Think again * What's a good URL for creating a comment? * Let's look at routes.rb and take turns explaining each line ##### Rake Tips * rake db:migrate:reset * rake db:seed ##### Let's look: Migrations * Nothing special going on * Notice exactlhy ONE per table (at this stage of the game) ##### Let's look: Bootstrap Bootstrap is an open source front-end framework It came from Twitter, and used to be caleld  Twitter Bootstrap  but now it is its own open source project, and is called just  Bootstrap  It consists solely of css, javascript, some images, and some fonts Look at code for Bootstrap Look at Bootstrap Look at Bootstrap Demo Github Not using any gems for now!! Why is most of the Bootstrap setup in application.html.erb? Where else do we see bootstrap? ##### Partials * the _form.html.erb is a partial (view) * the same body of the form is used in a new and update scenario * Incorporate with `render 'partial'` ##### Seed data * Put enough 'real looking' seed data so you can get a feel for the UI * seeds.rb is a regular ruby program. Look at sample code. #### Hacking the sample * Get formdemo to run on your computer * Update the new item form so it looks as pretty as the search form * Update the new item form so it shows a popup of categories instead of a blank ", "tags": "", "loc": "/content/topics/rails/example_forms_views/" },

        {"title": "Forms and Views", "text": "Tour of the sample code Reference containing all the code: FormDemo Feel free to look, but DON’T COPY/PASTE! I trust you otherwise why would I give you the repo? Take 10 minutes now to grab the code from github and look around Models There are 4 models Item (Has many comments) Category (Has many items) Comment (Belongs to a comment) Sample – IGNORE THIS ONE Routes Discussion: URLs, HTTP verbs and routes What’s a good URL to see all items? What’s a good URL for search? What’s a good URL for seeing a list of comments? Think again What’s a good URL for creating a comment? Let’s look at routes.rb and take turns explaining each line Rake Tips rake db:migrate:reset rake db:seed Let’s look: Migrations Nothing special going on Notice exactlhy ONE per table (at this stage of the game) Let’s look: Bootstrap Not using any gems for now!! Why is most of the Bootstrap setup in application.html.erb? Where else do we see bootstrap? Partials the _form.html.erb is a partial (view) the same body of the form is used in a new and update scenario Incorporate with render 'partial' Seed data Put enough ‘real looking’ seed data so you can get a feel for the UI seeds.rb is a regular ruby program. Look at sample code. How do Forms work? Conceptual You need a form whenever the browser needs to send data to the server <form> tag begins the group of fields. It declares the URL that payload is sent to There are zero or more fields There’s always a  submit  link or button that triggers the sending </form> terminates the group Sending always is done via some kind of HTTP request Payload is always name=value pairs, value is always text over the wire Rails There are always TWO controller actions: one to display the form one to accept the data from the form Where can I find them for items? Two controller actions means TWO urls! Display the form Let’s look at what the HTML should look like Difference between form_for and form_tag: let’s look at two examples Why is there an Item.new in the form display action (new)? Accept data from the form What URL is requested to send the data? What http verb? Why? How does the data come back from the form? What can the controller do with that data? Security issues What if the form payload is not coming from your form? What if your form has been modified inside the browser? Explain params.require() More complicated case Nested resources A comment always belongs to an item What should the URL look like to display the form to create a comment (THINK!) What is the verb? Does the form display to add a comment work differently? Using form_for vs. form_tag in this situation What would the URL look like to accept the data of the new comment? Let’s read the action and understand what it does How do you create a nested resource, i.e. a comment for item 3? Making Views DRY When you see yourself writing the same html over and over again write a helper: let’s do an example! write a partial: And let’s do another example! Summary Routes Understand the urls and verbs and how they map to controller actions Use rake routes to verify your understanding Make changes to routes.rb to get the urls and verbs you intend Forms Two actions, one to display the form, one to send the payload to the server form_for and form_tag are equally good. In real cases you end up with form_tag often Understand params and params.require Forms for nested resources Other tools helpers to generate repetitive html parials to build repetitive html rake db:migrate:reset and rake db:seeds Hacking the sample Get formdemo to run on your computer Update the new item form so it looks as pretty as the search form Update the search form so the options actually work Update the new item form so it shows a popup of categories instead of a blank ", "tags": "", "loc": "/content/topics/rails/forms_views.md/" },

        {"title": "Hands On Forms Demo", "text": "Set up and modify gem file rails new forms demo gem 'pry' gem 'pry-byebug' gem 'better_errors' bundle Make models and define associations rails generate scaffold items title:string description:string owner:text category_id:integer rails generate scaffold categories title:string description:string rails generate scaffold comments from:string message:string item_id:integer \[category.rb\] has_many :items \[item.rb\] belongs_to :category has_many :comments Create seed data (seeds.rb) Notice an interesting way to create test data puts  creating categories  Category.destroy_all books = Category.create(title:  book , description:  Books, Magazines etc. ) electronics = Category.create(title:  electronics , description:  Computer, Cellphone, etc ) clothing = Category.create(title:  clothing , description:  Shoes, Jackets, Belts, etc ) jewelry = Category.create(title:  jewelry , description:  Rings, watches, necklaces, etc ) owners = \[ Jane Smith ,  Ira Levin ,  George Benson \] colors = \[ red ,  brown ,  green ,  white ,  tiny \] clothingnames = \[ shoes ,  wallet ,  belt \] adjective = \[ My favorite ,  The perfect ,  A great \] puts  creating sample clothing  15.times do title = colors.sample +     + clothingnames.sample description = adjective.sample +     + title Item.create(title: title, description: description, owner: owners.sample, category: clothing) end Add Bootstrap Notice not using a gem, to keep it simple Reference: http://getbootstrap.com/getting-started/ Add this to application.html.erb <!-- Latest compiled and minified CSS --> <link rel= stylesheet  href= https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css > <!-- Optional theme --> <link rel= stylesheet  href= https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap-theme.min.css > <!-- Latest compiled and minified JavaScript --> <script src= https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js ></script> And put the right bootstrap tags in place in application.html.erb <div class= container > <div class= row > <%=  yield  %> </div> </div> #### Lets update the routes * Notice: how the scategories resource stays flat * Notice how items > comments is a nested resource * Notice how the collection is set up ~~~ Formdemo::Application.routes.draw do resources :samples resources :categories resources :items do collection do get 'search' get 'do_search' end resources :comments, only: \[:index, :new, :create\] end root 'items#index' ~~~ #### Define the search form search.html.erb ~~~ <div> <h1>Search</h1> <%= form_tag(do_search_items_path, method:  get ) do %> <div> <label>Title</label> <%= text_field_tag(:title,   ) %> </div> <%= submit_tag( Search ) %> <% end %> </div> ~~~ #### And it's corresponding actions * Why does search have two actions? * What controller do these actions go in? * Notice how to do  like  in order to allow close matches * Notice how we factor out the index page so we get a parital # [items_controller.rb] def search end def do_search @items = Item.where( title LIKE ? ,  %#{params[:title]}% ) end [views/items/_index.html.erb] Title Description Owner Category <% @items.each do |item| %> <%= item.title %> <%= item.description %> <%= item.owner %> <%= item.category_id %> <%= link_to 'Show', item %> <%= link_to 'Edit', edit_item_path(item) %> <%= link_to 'Destroy', item, method: :delete, data: { confirm: 'Are you sure?' } %> <% end %> [views/items/index.html.erb] Listing items <%= render  index  %> <%= link_to ‘New Item’, new_item_path %> ~~~~~ Let’s add some Bootstrap Bootstrap is already  included  in layouts/application.html.erb We bring it to life by adding classes to strategic spots # \[/views/items/index.html.erb\] <h1>Listing items</h1> <%= render  index  %> <br> <div class=btb-group %> <%= link_to 'New Item', new_item_path, class:  btn btn-default  %> <%= link_to 'Search', search_items_path, class:  btn btn-default  %> </div> # \[search.html.erb\] <div class= col-md-offset-1 col-md-4 > <h1>Search</h1> <%= form_tag(do_search_items_path, method:  get , class:  form ) do %> <div class= form-group > <label>Title</label> <%= text_field_tag(:title,   , class:  form-control ) %> </div> <%= submit_tag( Search , class:  btn btn-default ) %> <% end %> </div> Now lets add some additional controls A drop down control which will allow user to pick search options # \[views/items/search.html.erb\] <div class= form-group > <label>Return matching or non-matching items</label> <%= select_tag(:match_no_match, options_for_select( \[['only matching',  match \], \['only non matching',  nomatch \] ]), class:  form-control ) %> </div> # \[controllers/items_controller.rb, in do_search\] def do_search match_no_match = params.fetch(:match_no_match) negation = match_no_match ==  match  ?    :   NOT   query_string = negation +  title LIKE ?  @items = Item.where(query_string,  %#{params\[:title\]}% ) end ", "tags": "", "loc": "/content/topics/rails/hands_on_forms_demo.md/" },

        {"title": "Hands On Tiny Rails Demo", "text": "Setup rails new demo_tiny_rails cd demo_tiny_rails subl . # Gemfile gem 'better_errors' gem 'minitest-rails-capybara' gem 'minitest-reporters' gem 'faker' gem 'pry' gem 'pry-byebug' bundle Tune for minitest spec # config/application.rb config.generators do |g| g.test_framework :mini_test, :spec => true, :fixture => true g.integration_tool :mini_test end # test/test_helper.rb require  minitest/autorun  require  minitest/rails  require  minitest/pride  # let's have awesome colorful output;) Setup Models and Databases rails generate scaffold course number:integer name:string desc:string prof:string rake db:migrate # seeds.rb 25.times do Course.create(number: Faker::Number.number(4), name: Faker::Company.catch_phrase, desc: Faker::Hacker.say_something_smart, prof: Faker::Name.name) end Setup rudimentary tests # \[test/fixtures/courses.yml\] # Read about fixtures at http://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html one: number: 166 name: Cosi 166b desc: A wonderful course about geeks prof: Mr. Bond two: number: 167 name: Computer Science for Poets desc: The how and the why prof: Mr. James #\[test/models/course_test.rb\] require 'test_helper' class CourseTest < ActiveSupport::TestCase # test  the truth  do # assert true # end describe  With all test  do it  tautology works  do 1.must_equal 1 end it  should be able to find a certain course  do Course.where(number: 167).size.must_equal 1 end end end See that app runs and tests run. rake ", "tags": "", "loc": "/content/topics/rails/hands_on_tiny_rails_demo.md/" },

        {"title": "How do forms and views work?", "text": "Conceptual You need a form whenever the browser needs to send data to the server <form> tag begins the group of fields. It declares the URL that payload is sent to There are zero or more fields There’s always a  submit  link or button that triggers the sending </form> terminates the group Sending always is done via some kind of HTTP request Payload is always name=value pairs, value is always text over the wire Rails There are always TWO controller actions: one to display the form one to accept the data from the form Where can I find them for items? Two controller actions means TWO urls! Display the form Let’s look at what the HTML should look like Difference between form_for and form_tag: let’s look at two examples Why is there an Item.new in the form display action (new)? Accept data from the form What URL is requested to send the data? What http verb? Why? How does the data come back from the form? What can the controller do with that data? Security issues What if the form payload is not coming from your form? What if your form has been modified inside the browser? Explain params.require() More complicated case Nested resources A comment always belongs to an item What should the URL look like to display the form to create a comment (THINK!) What is the verb? Does the form display to add a comment work differently? Using form_for vs. form_tag in this situation What would the URL look like to accept the data of the new comment? Let’s read the action and understand what it does How do you create a nested resource, i.e. a comment for item 3? Making Views DRY When you see yourself writing the same html over and over again write a helper: let’s do an example! write a partial: And let’s do another example! Summary Routes Understand the urls and verbs and how they map to controller actions Use rake routes to verify your understanding Make changes to routes.rb to get the urls and verbs you intend Forms Two actions, one to display the form, one to send the payload to the server form_for and form_tag are equally good. In real cases you end up with form_tag often Understand params and params.require Forms for nested resources Other tools helpers to generate repetitive html parials to build repetitive html rake db:migrate:reset and rake db:seeds ", "tags": "", "loc": "/content/topics/rails/how_forms_view_work.md/" },

        {"title": "How do forms and views work?", "text": "Conceptual You need a form whenever the browser needs to send data to the server <form> tag begins the group of fields. It declares the URL that payload is sent to There are zero or more fields There’s always a  submit  link or button that triggers the sending </form> terminates the group Sending always is done via some kind of HTTP request Payload is always name=value pairs, value is always text over the wire Rails There are always TWO controller actions: one to display the form one to accept the data from the form Where can I find them for items? Two controller actions means TWO urls! Display the form Let’s look at what the HTML should look like Difference between form_for and form_tag: let’s look at two examples Why is there an Item.new in the form display action (new)? Accept data from the form What URL is requested to send the data? What http verb? Why? How does the data come back from the form? What can the controller do with that data? Security issues What if the form payload is not coming from your form? What if your form has been modified inside the browser? Explain params.require() More complicated case Nested resources A comment always belongs to an item What should the URL look like to display the form to create a comment (THINK!) What is the verb? Does the form display to add a comment work differently? Using form_for vs. form_tag in this situation What would the URL look like to accept the data of the new comment? Let’s read the action and understand what it does How do you create a nested resource, i.e. a comment for item 3? Making Views DRY When you see yourself writing the same html over and over again write a helper: let’s do an example! write a partial: And let’s do another example! Summary Routes Understand the urls and verbs and how they map to controller actions Use rake routes to verify your understanding Make changes to routes.rb to get the urls and verbs you intend Forms Two actions, one to display the form, one to send the payload to the server form_for and form_tag are equally good. In real cases you end up with form_tag often Understand params and params.require Forms for nested resources Other tools helpers to generate repetitive html parials to build repetitive html rake db:migrate:reset and rake db:seeds ", "tags": "", "loc": "/content/topics/rails/how_forms_views_work.md/" },

        {"title": "Job of the Rails Server", "text": " Simply to accept HTTP requests Decode them ( routing ) Generate the necessary HTML ( views ) Return the html as a response to the request ( Controller ) ", "tags": "", "loc": "/content/topics/rails/intro_rails.md/" },

        {"title": "Hands-on with Rails DBs and Models", "text": "Live Coding Database schema for an event schedule Person(name, dob, gender, zipcode) Event(name, date) Registrations(person_id, event_id, status, comment) Create rails app rails new demo2 Gemfile gem 'pry-rails' gem 'pry-byebug' gem 'awesome_print' gem 'hirb' gem 'better_errors' Create the database tables rails generate resource Person name:string dob:date gender:string zipcode:string rails generate resource Event name:string event_date:date event_time:time rails generate model Registration person_id:integer event_id:integer Define sample data in seeds.rb Event.create(name: 'Welcome', event_date: 'Feb 1 2014', event_time: '12:00pm') Person.create(name: 'Angelo Smith', dob: 'Jan 2, 1991', gender: 'f', zipcode: 02474) Registration.create(person_id: 3, event_id: 2) Commands relating to seeding rake db:create # creates the database for the current env rake db:seed # (only) runs the db/seed.rb file rake db:migrate # Run latest migrations rake db:setup # runs db:schema:load, db:seed Examining the DB from the SQL console In the database console you can type classic SQL commands rails dbconsole .help .databases .tables select * from people; select * from people where id > 1; Examining the databases from the Rails console In the rails console you can type ruby commands (it’s pry) ActiveRecord::Base.connection.tables Person.all Person.where(gender: 'm') Person.where( dob > ? , Date.new(1995)) Person.where( dob > ? , Date.new(1995)).count CRUD operations (Create, Read, Update, Delete) p = Person.new(name:  Pito , dob: '12-12-2012', gender: 'f', zipcode: 12355) p.new_record? p.save p = Person.create(name:  Amin , dob: '12-12-2014', gender: 'm', zipcode: 31231) p.delete Associations, declared in models class Person < ActiveRecord::Base has_many :registrations has_many :events, through: :registrations end class Event < ActiveRecord::Base has_many :registrations has_many :people, through: :registrations end class Registration < ActiveRecord::Base belongs_to :person belongs_to :event end Association, used Person.find(1).registrations Person.where(name:  Angelo Smith ).first.registrations Event.find(1).people Validations Validations are applied by ActiveRecord, NOT the database validates :zipcode, length: { is: 5} # declared in model file p = Person.find(1) p.zipcode = 1 # assign invalid value p.valid? # explicit check p.save # Is not permitted into the database p.save! # Same but throws exception Appendices References Awesome Print ActiveRecord Associations ActiveRecord Queries ActiveRecord Queries Cribsheet ActiveRecord Validations Validations Cribsheet ", "tags": "", "loc": "/content/topics/rails/rails_db_models.md/" },

        {"title": "Best Rails and Ruby Resources", "text": "Getting answers Stack Overflow: You may or may not have heard of Stack Overflow, but have you really used it? Have you looked for answers - probably yes, but have you posted questions? You will be doing both extensively during the course, so you might as well get used to it! Google Google is your friend. You know this of course. Almost any technical problem you encounter has been solved and written up by someone. Google it. Ask Mother Google. Ask The Google! Best of Rails Help Rails Guides Highly readable and concise (yet comprehensive :) guides to the most important parts of Rails. Often better than any book or manual. Rails Casts This web site contains hundreds of free screen casts that give step by step explanations on all sorts of use cases of rails. As the series has been going on for years, and has been in suspended animation since this June, you will see videos that talk about old versions of Rails and obsolete techniques. So, your mileage may vary but it’s still a great resource. Rails for Zombies Best of Ruby Help Ruby the hard way is great if you are stuck getting going with Ruby Ruby on Rails Tutorial - Another excellent Rails tutorial ", "tags": "", "loc": "/content/topics/rails/rails_resources.md/" },

        {"title": "URL in Rails", "text": "Fundamental importance of the URI/URL URI =  Uniform Resource Identifier  Used to be called  Universal Resource Locator  (URL) Because the resources were files on the disk of the server And the URL’s path was really a path! Focus now on the ‘path’ part of the URI e.g. some ugly examples http://roomscheduler.com/reserve/room/3 http://bookstore/gonewiththewind/order/3 http://nyt.com/latest-updates?year=2014 e.g. some good examples http://roomscheduler.com/room/3/request http://bookstore.com/book/412/price http://tourmanager.com/city/boston/tour/tuesday/new There are many ways to structure a url RESTful style of URI design  Representational State Transfer  (See Original REST Paper) Each URI denotes a specific ‘resource’ ‘room 3’ or ‘book 412’ or ‘tuesday tours IN Boston city’ It is usually not a file but something generated ‘on the fly’ Still the same URI should yield the same resource every time (handwave) Each URI is used in combination with an HTTP  method  Get: retrieve the indicated  resource  Put: update value of the indicated resource Delete: delete the indicated resource Post: Create a new instance of indicated resource (some other, less important ones) One of the earliest design questions What do the URLs for my app look like? Conceptually, they are  directory structure-like  URLs There is a coherent  syntax  about them, e.g. http://www.myservice.org/discussion/topics/{topic} http://www.myservice.org/discussion/2008/12/10/{topic} http://www.myservice.org/discussion/{year}/{day}/{month}/{topic} Touchpoints, coming soon: rails generate resource rails routes default controllers In other words, you don’t have to follow this form of URL but… You really should follow it because a lot of things fall into place. Appendix Rails Routing Guide RESTful Web Services: The Basics ", "tags": "", "loc": "/content/topics/rails/url_rails.md/" },

        {"title": "README for Curriculous-topics", "text": "Repository of Topics For use with the curriculous curriculum authoring tool ", "tags": "", "loc": "/content/topics/README/" },

        {"title": "Architecting for Scale", "text": "Architecting for scale YAGNI Never do extra work for scaling until measurement reveals there's a problem and where the problem is. Base configuration We start with the simplest possible set up. If you have stand alone servers (which we don’t) you would run the database and web server on the same box. In our case we are deploying to a cloud server, where you aren’t getting a full box but a virtual slice, from e.g. Heroku. In that case our base configuration is a single  web worker  to run Sinatra and a single  database  to run our database, which would be Postgress. With that base, measure performance. If you have a real load, you can measure. In our case we have to create an artificial load send traffic to the server. We want to see how many simultanuous sessions we support. Stage One Scalability Tuning Analyze and think abou whether the servers are poweful enough. Is it your old laptop running a database server or is it a fairly new computer with no other load. If you are using a cloud service, like BlueMix, Heroku or Digital Ocean, what kind of virtual capacity or limits does it have? You might need to simply up the capacity. Examine your database access and queries. Can you determine that pages that don’t have a database call are really fast and the ones that do are slower? Can you see what pages slow down the most? If queries are the problem Make sure you clearly understand the separation between the web and the database server. Consider whether you should put the database on it’s own server Consider whether any tables need indexes Consider whether you are going back to the database more than a few times for each page displayed. Consider whether you are hitting the database once for each record displayed (so called N+1 problem). If you are, look at making your queries ‘greedy’ meaning that they bring back more in a single call to tge server Consider whether you are issuing the exact same query over and over again. Consider whether an intermediate query result that is expensive is being requested again. If so, caching those results is a strategy. Look at the metrics on your database servers, that is simple If the app/web server seems to be the problem Consider whether you are fully/over utilizing resources Make sure that the resources (memory, cpu) are being used but not pinned to maximum. You don’t want to hit your caps on resources, otherwise the app will start thrashing. Consider adding more  web workers  or concurrent threads. You have to be careful that your architecture allows that. Is your design ready to run concurrently. Is there any way that one request can corrupt another one running at the same time? If you still have scaling issues Consider adding another discrete server Once you see one box does not cut it any longer add another server, you will need a load balancer for this. Adding another server, increases your redundancy. Depending on how valuable this app is and how badly it needs to stay up 2 app servers is a good idea, as well as 2 database servers, 1 primary and 1 follower on stand by. AWS RDS makes that last part easy. Consider caching services Are there intermediate results that can be cached to avoid hitting the database at all? Consider partitioning the databases One replica for update transactions and multiple replicas for read transactions Partitioning vertically, by moving certain columns of tables to a separate db servers. Partitioning horizontally (sharding) by moving certain sets of rows to separate db servers. (For example, profile records for half the users on one server and the other half on another server.) Consider breaking into services Are there separable major bits of functionality that you can carve off into fully independent services, with their own app and db servers ", "tags": "", "loc": "/content/topics/scaling/architecting_for_scale.md/" },

        {"title": "Scaling", "text": "Thought experiment Real world example: cafeteria flow chart Optimization:the search for bottlenecks. What’s a bottleneck? Refer back to the cafeteria example. Moving target: When you eliminate/improve one bottleneck, it just reveals the next one. You make starting the dashboard activity faster….so that now you can notice that drawing the map overlay is slow. Important: Measurement Worse sin: Optimizing early. Why? Performance Performance is what what a user experiences as  slow  or  fast  Response time to an operation initiated by the user Perception! Can you ‘fool’ the user into thinking the app is faster than it is? Feedback: spinners etc Anticipation: start doing work before user requests it Different (but intertwined with) scaling Scaling  How many X per minute can you do  (e.g. user log ins, page refreshes, notifications,… How many (users, sessions, videos, pictures, etc) does the site need to support Different from response time:  How long does it take to accomplish Y?  Related but different Scaling has to do with the load on the servers Big challenge: how fast or slow will the site or app grow? Architectural techniques apply equally scaling up vs. scaling out caching load balancing database partitioning and sharding asynchronous processing Patterns of scaling problems and solutions  Clients  = web browsers accessing the site, mobile apps accessing the site, etc. Load on the servers. Some scenarios, one or more of: Too many clients asking the server to do operation O * Individual clients asking the server to do operation P too often Operation Q is time consuming for the server to satisfy Solutions can be Add an identical server to handle operations O, P or Q Send operation O to one server and operation P to another server Why are so many clients asking for O? Can we reduce the number? What’s the reason why a client would ask for operation P so often? Can we reduce that? Is there a way to make operation Q faster to satisfy? ", "tags": "", "loc": "/content/topics/scaling/scaling.md/" },

        {"title": "Patterns in Scaling", "text": "Scalability Pattern: Database Caching Example, Social Graph Classic Relational Approach Schema (like all of you have) People(id, name) Follow(id, follower, following) Nicely normalized First, Second and Third Normal form Origins of the relational database Queries like: How many people are following user X Who is following user Y But to display each and every user, a join is needed! Measurement Ask database system to analyze SQL queries that are slow e.g. heroku pg:outliers Discover that the social graph access was very slow Solution: Caching Use Network scale caching (Redis) to store and share across servers Caching with  Redis  Analogous to other network scale caching solutions (e.g. cached) Typical structure is a key-value store A nosql database. But in memory It has some interesting characteristics ATOMIC operations, e.g.  INCR  operation keys that expire (TTL) Supports other values: lists, sets, hashes And many many more Ruby bindings gem redis-objects Wait, where’s the data actually stored? A redis host, accessible by tcp/ip: dns name + port number You can run it Heroku can run it for you with Redis to go. Nano size is free! In all cases, if the host dies, the data is gone Putting the two together  Store the social graph, denormalized, in a cache  Means, more or less: All user information is stored as before in the relational database In addition, a denormalized copy of the key facts are stored in Redis Redis is accessed Whenever ui needs to show count of followings or followers Whenever a new follow command is issued, it is updated Under certain circumstances, Redis is refreshed with good data Scalability Pattern: Database Partitioning Conflicting definitions When you divide a big database into several smaller ones Partitioning: Horizontal and Vertical Sharding; Horizontal Partitioning What’s the problem? When the database is the bottleneck Add a second database server What to do with the data? Some options Replication: Put a complete copy of the data on the second db server Pay attention to read vs. write What to do about data consistency? Parition Example User Database Happens to often be a monster Lots of records Each record with lots of information Accessed a lot Schema User: (id, name, email, biography, hobbies, college, last_login, encrypted_pw, profile_photo_jpg, …) Vertical partition Often associated with an SOA Divide the User table into three different database servers: User: (id, name, biography, email) Autentication: (id, last_login, encrypted_pw) Photos: (id, profile_photo_jpg) How it changes your application Pretty basic rearchitecture into separate services Sharding (Horizontal partition)  buckets  of users (== shards) How? Create multiple database servers with the same schema different subset or clump of records Need a way to direct requests to the right  shard  inspect something about the record determine what shard to look in Three common flavors to decide what bucket gets a record Range Based: Range of some scalar value (record id, first letter of name, etc.) List Based: Take some other property (e.g. zipcode, department) Hash Based: Compute a hash on some value How it changes your application Whenever you either read, write, or search Require to include enough information to pick the right shard Pros and Cons Joins become a problem What was once one db is now spread over more than one db Can lead to denormalization Data Integrity Foreign keys might now point to another database Databases can get out of sync NB Both kinds of sharding are advanced techniques and you should only use them when you have quantitative reasons to believe they will improve a measured performance issue. References Building Scalable Databases: Pros and Cons of Sharding ", "tags": "", "loc": "/content/topics/scaling/scaling_patterns_1.md/" },

        {"title": "Patterns In Scaling 2", "text": "Scaling patterns Do more with the available resources Do more things at the same time Resource idle time is your enemy CPU Network Disk Database Scenarios Users can ask for a detailed report about their twitter traffic It can be a one shot, or regenerated at midnight It can be displayed on the screen or emailed Inline is no good because of computational cost and error handling Users tweet with attached images Submitted in all kinds of formats, shapes and sizes Need to convert and resize to standard shapes and sizes Inline no good due to computational cost and error handling System sends an email to newly registered users After creating the new user in db, send a confirm email with a link Inline is no good, due to network latency and error handling Concurrency on a single Computer Difference between syncrhonous and asynchronous Difference between concurrent and parallel Operating Primitives (pretty much universal) Processes ( forking ) Use more memory (new VM for each process) for the data + the program + everything  Copy on write  Context switching very expensive Communication expensive (IPC) Slower to create and destroy Less hard to program and debug (not easy!) Threads Use less memory (Shared memory space) Context switching cheap Communication cheap (via queues and shared memory) Fast to create and destroy Harder to program and debug Assumes  Thread-safe  code Ruby: See GIL ##### Demonstrations: Queueing Systems: RabbitMQ Key terms in RabbitMQ Producers: Software that sends messages Consumers: Software that consumes (and processes) messages Queues: FIFO  holding area  for messages Message: A bit of data which often incorporates an action or command Exchange: Receives messages from producers, and sticks them into a queue Concepts in RabbitMQ Acknowledgement: So that if the server dies before finishing, the message gets given to someone else Durability: So that if the Queueing Service dies, the content of the queue survives References RabbitMQ Tutorial Rabbit Demo (github) Concurrency and Parallelism Blog Post Ruby Concurrency Exmplained ", "tags": "", "loc": "/content/topics/scaling/scaling_patterns_2.md/" },

        {"title": "Techniques for Scaling", "text": "Techniques: Caching Save the result of a request with a given set of parameters. In a future request with the same parameter (maybe) return the same result Memoization: caching applied to an individual method A basic programming technique System level caching. Storage: In ‘local’ memory In ‘remote’ memory In database In Cloud Name-value databases Very fast searches and lookups Distributed searches and distributed databases Robust across system and application failures References: Redis Memcached Amazon Elastic Cache Techniques: Asycnhronous processing Real examples: Discussion: What do all of these have in common? Account registraton confirmation emails (actually all emails) Daily (periodic or episodic) notification emails Automatic backups or archiving Image Resizing Spam checking Synchronous: Caller waits for response Asynchronous: Request returns immediately, but result comes later NB: web server mainly responds to http requests! Background processing happens even if no requests! How do processes work in a modern Operating System? Scheduler part of the OS Processes can be fairly heavy weight Let’s estimate how many background processs you would need How would you handle processes that: Were taking too long? Had crashed? Needed to be restarted? Or what if the server crashes as a whole? It’s a mess. Need abstractions! Case 1: Schedule based CRON jobs. Most elementary. Require  privileges  Alternative: Native  scheduler  application (e.g. Heroku Simple Job Scheduler) References: Heroku Simple Job Scheduler Unix Cron Creating Cron Jobs on Mac Rails Runner Case 2: Request based Request handled ‘asynchronously’ of course By local server, in a separate process By a remote server Request queueing What happens when requests come faster than we can handle them How do we add more performance in handling request References Comparing Background processing Libraries Rails Delayed Job Gem Techniques: Databases Discussion: What if all the user names are stored in one table on one server? Databases are a major bottleneck! Must move the data to more than one machine! Need to undertand the access pattern: read intensive/write intensive Database Replication What does it do What are the benefits Database Partitioning What are the different kinds: Horizontal and Vertical What does it do What are the benefits Database Sharding What does it do What are the benefits References The Basics Of Database Sharding ", "tags": "", "loc": "/content/topics/scaling/scaling_techniques.md/" },

        {"title": "Techniques for Scaling", "text": "Techniques: Caching Save the result of a request with a given set of parameters. In a future request with the same parameter (maybe) return the same result Memoization: caching applied to an individual method A basic programming technique System level caching. Storage: In ‘local’ memory In ‘remote’ memory In database In Cloud Name-value databases Very fast searches and lookups Distributed searches and distributed databases Robust across system and application failures References: Redis Memcached Amazon Elastic Cache Techniques: Asycnhronous processing Real examples: Discussion: What do all of these have in common? Account registraton confirmation emails (actually all emails) Daily (periodic or episodic) notification emails Automatic backups or archiving Image Resizing Spam checking Synchronous: Caller waits for response Asynchronous: Request returns immediately, but result comes later NB: web server mainly responds to http requests! Background processing happens even if no requests! How do processes work in a modern Operating System? Scheduler part of the OS Processes can be fairly heavy weight Let’s estimate how many background processs you would need How would you handle processes that: Were taking too long? Had crashed? Needed to be restarted? Or what if the server crashes as a whole? It’s a mess. Need abstractions! Case 1: Schedule based CRON jobs. Most elementary. Require  privileges  Alternative: Native  scheduler  application (e.g. Heroku Simple Job Scheduler) References: Heroku Simple Job Scheduler Unix Cron Creating Cron Jobs on Mac Rails Runner Case 2: Request based Request handled ‘asynchronously’ of course By local server, in a separate process By a remote server Request queueing What happens when requests come faster than we can handle them How do we add more performance in handling request References Comparing Background processing Libraries Rails Delayed Job Gem Techniques: Databases Discussion: What if all the user names are stored in one table on one server? Databases are a major bottleneck! Must move the data to more than one machine! Need to undertand the access pattern: read intensive/write intensive Database Replication What does it do What are the benefits Database Partitioning What are the different kinds: Horizontal and Vertical What does it do What are the benefits Database Sharding What does it do What are the benefits References The Basics Of Database Sharding ", "tags": "", "loc": "/content/topics/scaling/techniques.md/" },

        {"title": "Experimental Computer Science", "text": "Experimental Computer Science? We have many many beliefs (or debates) (in engineering and computer science) which are not based on evidence, for example: Are static or dynamic types more productive? Are 2 or 4 week sprints better? Is deeply commented code more maintainable? Are languages with 2 dimensional arrays better? Does multiple-inheritence reduce programmer productivity? Is there a 100:1 productivity ratio between the best and worse programmers? ", "tags": "", "loc": "/content/topics/science/experimental_computer_science.md/" },

        {"title": "classes_tut", "text": "######## CLASS ####### # A very simple class class School def initialize(name) @name = name end end ##### INSTANCES ##### my_school = School.new( Brandeis ) my_school.class your_school = School.new( Olin College ) ##### INSTANCE VARIABLES ##### class School attr_accessor :name, :rank def initialize(name, rank) @name = name @rank = rank end def to_s  #{@name} is ranked #{@rank}  end end my_school = School.new( Brandeis , 30) your_school = School.new( Olin , 50) ##### DUCK TYPING ##### my_school.to_s puts  Inspecting my school: #{my_school.inspect}  my_school.respond_to? :inspect 1.234.respond_to? :inspect ########################## # Blocks are kind of like'anonymous methods' numbers = [1, 20, 33, -1, 11] numbers.sort numbers.sample numbers puts  first example:  numbers.each { |x| puts x} puts  \nSecond example (the same!)  numbers.each do |x| puts x end numbers.map {|x| x * 1000} numbers.reduce { |accum, val| accum + val } ", "tags": "", "loc": "/content/topics/scripts/classes_tut/" },

        {"title": "dbl_demo1", "text": "require 'minitest/autorun' class Book attr_accessor :title, :description def initialize title, author binding.pry @description =  Written by #{author.name}  end end describe Book do it  uses author's name in description  do tim_author = MiniTest::Mock.new tim_author.expect(:name,  Tim Hickey ) book = Book.new( Introduction to 3D graphics , author: tim_author) book.description.must_equal 'Written by Tim Hickey' #tim_author.verify end end", "tags": "", "loc": "/content/topics/scripts/dbl_demo1/" },

        {"title": "elevator", "text": "class Person # their name end class Elevator # List of people on board # direction of motion (up, down, stopped) end class Floor # what elevators are at this floor right now # List of people waiting here end class Brain end ", "tags": "", "loc": "/content/topics/scripts/elevator/" },

        {"title": "Hands On Heroku for Sinatra", "text": "Introduction Heroku is one of many  cloud app platform  (see Cloud Deployment Assumptions You have a working Sinatra application The code is in a PUBLIC github repository Note, you will need to make a few small changes to ready it for Heroku Setup Go to Heroku Create a new user account (free) Install the Heroku Toolbelt for your platform Prepare your rails app go to your local directory containing the rails app Get your environment set up go to your local directory containing the Heroku app The name of your app is assigned automatically and printed out once you do heroku create Prepare your application Configure it for rack: make sure you have a config.ru Create it on Heroku heroku create git push heroku master heroku run rake db:migrate heroku run rake db:seed heroku open ", "tags": "", "loc": "/content/topics/scripts/hands_on_heroku_for_sinatra.md/" },

        {"title": "inheritance", "text": "require 'pry' require 'pry-byebug' # class Character # attr_reader :location, :velocity, :type # def initialize(args) # @type = args[:type] # @velocity = args[:starting_v] # end # def passengers # if @type == :car # 4 # else # nil # end # end # def to_s # if @type == :person #  [person]  # elsif @type == :car #  [car]  # else # error  Invalid type  # end # end # end # person = Character.new(type: :person, starting_v: 0) # puts person # car = Character.new(type: :car, starting_v: 0) # puts car # puts car.passengers #------- # class Character # attr_reader :location, :velocity, :type # def initialize(args) # @velocity = args[:starting_v] # end # end # class Car ", "tags": "", "loc": "/content/topics/scripts/inheritance/" },

        {"title": "intro_tut", "text": "########################## # Strings, Numbers are a class 1.class # => Fixnum  Greetings .class # => String ########################## # We use  new  to create new instances a = Array.new(5) # => [nil, nil, nil, nil, nil] # We call a method by  .methodname  a.size # => 5 a.max # => nil ########################## # We do array assignments with brackets a[0] =  Truth  # =>  Truth  a[1] =  even  # =>  even  a[2] =  unto  # =>  unto  a[3] =  its  # =>  its  a[4] =  innermost  # =>  innermost  a[5] =  parts  # =>  parts  ########################## # Ruby has lots of built in methods to operate on arrays! a # => [ Truth ,  even ,  unto ,  its ,  innermost ,  parts ] a.size # => 6 a.class # => Array a.sample # =>  innermost  a.sort # => [ Truth ,  even ,  innermost ,  its ,  parts ,  unto ] ########################## # Variables are not declared, nor typed x = 100 # => 100 x =  pito  # =>  pito  y = x # =>  pito  y = true # => true x # =>  pito  ########################## # More about strings  I am a string  # =>  I am a string  'So am I' # =>  So am I  concat =  I am a string   + 'so am i' # =>  I am a string so am i  prompt =  Hello, my name is #{x}  # =>  Hello, my name is pito  prompt =  Hello, my name is #{x.capitalize}  # =>  Hello, my name is Pito  ########################## # Methods (are like functions, procedures, etc.) def greet(name) result =  Good night #{name}  # =>  Good night Pito ,  Good night Pito  return result # =>  Good night Pito ,  Good night Pito  end greet( Pito ) # =>  Good night Pito  greet  Pito  # =>  Good night Pito  # More idiomatic:! def greet name  Good night #{name}  # =>  Good night Pito ,  Good night Pito  end greet( Pito ) # =>  Good night Pito  greet  Pito  # =>  Good night Pito  ########################## # Hashes aka dictionaries (Python) who = {first:  Jon , last:  Anders , age: 12} # => {:first=> Jon , :last=> Anders , :age=>12} who[:first] # =>  Jon  who[:name] # => nil who[0] # => nil who.length # => 3 who.sort # => [[:age, 12], [:first,  Jon ], [:last,  Anders ]] require 'json' # => true puts who.to_json # => nil # >> { first : Jon , last : Anders , age :12} ", "tags": "", "loc": "/content/topics/scripts/intro_tut/" },

        {"title": "jsonexample", "text": "require 'json' puts  Convert from an array to Json:  puts [1,2,3].to_json puts  \nConvert from a hash to json:  puts ({ name:  Jonathan , birthday:  Dec 1, 1991  }.to_json) puts  \nConvert from an arbitrary class:  class Car def initialize make, model @make = make @model = model end def to_json {'make' => @make, 'model' => @model}.to_json end end c = Car.new( Toyota ,  Corlla ) puts c.to_json puts  \nAnd the other way around  name_hash = '{ name :  Pito ,  town :  Arlington }' puts JSON.parse(name_hash) name_list_hash = '[{ name :  Pito ,  town :  Arlington }, { name :  Chris ,  town :  Willemstad }, { name :  Amin ,  town :  Lafayette }]' puts JSON.parse(name_list_hash) puts  \n*** How about converting from XML to JSON?  require 'xmlsimple' xml = Pito Salas male EOS xml_clean = xml.gsub(/\s/, '') xml_hash = XmlSimple.xml_in(xml_clean , { 'ForceArray' => false }) xml_json = xml_hash.to_json puts  Input xml string: , xml_clean puts  \nConverted to a hash: , xml_hash puts  \nConverted to a json string: , xml_json ", "tags": "", "loc": "/content/topics/scripts/jsonexample/" },

        {"title": "mountain_bike_refactor1", "text": "class MountainBike TIRE_WIDTH_FACTOR = 250 FRONT_SUSPENSION_FACTOR = 100 REAR_SUSPENSION_FACTOR = 150 def initialize(params) params.each { |key, value| instance_variable_set  @#{key} , value } @commission = 0.25 @front_suspension_price = 95.0 @rear_suspension_price = 67.0 @base_price = 490.00 end def off_road_ability result = @tire_width * TIRE_WIDTH_FACTOR if @type_code == :front_suspension || @type_code == :full_suspension result += @front_fork_travel * FRONT_SUSPENSION_FACTOR end if @type_code == :full_suspension result += @rear_fork_travel * REAR_SUSPENSION_FACTOR end result end def price case @type_code when :rigid (1 + @commission) * @base_price when :front_suspension (1 + @commission) * @base_price + @front_suspension_price when :full_suspension (1 + @commission) * @base_price + @front_suspension_price + @rear_suspension_price end end def owner @owner end def to_s  Mountain bike - owner: #{owner}, off road ability: #{off_road_ability()}, price: #{price}  end end pitos_bike = MountainBike.new(:owner =>  Pito , :type_code => :rigid, :tire_width => 2.5) puts pitos_bike ricks_bike = MountainBike.new(:owner =>  Rick , :type_code => :front_suspension, :tire_width => 2, :front_fork_travel => 3) puts ricks_bike ", "tags": "", "loc": "/content/topics/scripts/mountain_bike_refactor1/" },

        {"title": "mountain_bike_refactor2", "text": "class MountainBike TIRE_WIDTH_FACTOR = 250 FRONT_SUSPENSION_FACTOR = 100 REAR_SUSPENSION_FACTOR = 150 def initialize(params) params.each { |key, value| instance_variable_set  @#{key} , value } @commission = 0.25 @front_suspension_price = 95.0 @rear_suspension_price = 67.0 @base_price = 490.00 end def off_road_ability result = @tire_width * TIRE_WIDTH_FACTOR if @type_code == :front_suspension || @type_code == :full_suspension result += @front_fork_travel * FRONT_SUSPENSION_FACTOR end if @type_code == :full_suspension result += @rear_fork_travel * REAR_SUSPENSION_FACTOR end result end def price case @type_code when :rigid (1 + @commission) * @base_price when :front_suspension (1 + @commission) * @base_price + @front_suspension_price when :full_suspension (1 + @commission) * @base_price + @front_suspension_price + @rear_suspension_price end end def owner @owner end def to_s  Mountain bike - owner: #{owner}, off road ability: #{off_road_ability()}, price: #{price}  end end # Test: Normally would be in a separate file require 'minitest/autorun' class TestMountainBike describe MountainBike do def setup @pitos_bike = MountainBike.new(:owner =>  Pito , :type_code => :rigid, :tire_width => 2.5) @ricks_bike = MountainBike.new(:owner =>  Rick , :type_code => :front_suspension, :tire_width => 2, :front_fork_travel => 3) end it  knows price of pitos_bike  do @pitos_bike.price.must_equal 612.5 end it  knows offroad abilituy of pitos bike  do @pitos_bike.off_road_ability.must_equal 625.0 end it  knows price of ricks_bike  do @ricks_bike.price.must_equal 707.5 end it  knows offroad abilituy of ricks bike  do @ricks_bike.off_road_ability.must_equal 800 end end end ", "tags": "", "loc": "/content/topics/scripts/mountain_bike_refactor2/" },

        {"title": "mountain_bike_refactor3", "text": "class RigidBikeSpec def initialize @commision = 0.25 @base_price = 490 end def price (1 + @commission) * @base_price end end class FrontSuspensionBikeSpec def initialize @commision = 0.25 @base_price = 490 @front_suspension_price = 95.0 end def price (1 + @commission) * @base_price + @front_suspension_price end end class FullSuspensionBikeSpec def initialize @commision = 0.25 @base_price = 490 @front_suspension_price = 95.0 end def price (1 + @commission) * @base_price + @front_suspension_price + @rear_suspension_price end end class MountainBike TIRE_WIDTH_FACTOR = 250 FRONT_SUSPENSION_FACTOR = 100 REAR_SUSPENSION_FACTOR = 150 def initialize(bike_spec, params) params.each { |key, value| instance_variable_set  @#{key} , value } @commission = 0.25 @front_suspension_price = 95.0 @rear_suspension_price = 67.0 @base_price = 490.00 @bike_spec = bike_spec end def off_road_ability result = @tire_width * TIRE_WIDTH_FACTOR if @type_code == :front_suspension || @type_code == :full_suspension result += @front_fork_travel * FRONT_SUSPENSION_FACTOR end if @type_code == :full_suspension result += @rear_fork_travel * REAR_SUSPENSION_FACTOR end result end def price case @type_code when :rigid (1 + @commission) * @base_price when :front_suspension (1 + @commission) * @base_price + @front_suspension_price when :full_suspension (1 + @commission) * @base_price + @front_suspension_price + @rear_suspension_price end end def owner @owner end def to_s  Mountain bike - owner: #{owner}, off road ability: #{off_road_ability()}, price: #{price}  end end # Test: Normally would be in a separate file require 'minitest/autorun' class TestMountainBike describe MountainBike do def setup @pitos_bike = MountainBike.new(RigidBikeSpec.new, :owner =>  Pito , :type_code => :rigid, :tire_width => 2.5) @ricks_bike = MountainBike.new(FrontSuspensionBikeSpec.new, :owner =>  Rick , :type_code => :front_suspension, :tire_width => 2, :front_fork_travel => 3) end it  knows price of pitos_bike  do @pitos_bike.price.must_equal 612.5 end it  knows offroad abilituy of pitos bike  do @pitos_bike.off_road_ability.must_equal 625.0 end it  knows price of ricks_bike  do @ricks_bike.price.must_equal 707.5 end it  knows offroad abilituy of ricks bike  do @ricks_bike.off_road_ability.must_equal 800 end end end ", "tags": "", "loc": "/content/topics/scripts/mountain_bike_refactor3/" },

        {"title": "mountain_bike_refactor4", "text": "TIRE_WIDTH_FACTOR = 250 FRONT_SUSPENSION_FACTOR = 100 REAR_SUSPENSION_FACTOR = 150 class RigidBikeSpec def initialize (tire_width: nil) @tire_width = tire_width @commission = 0.25 @base_price = 490 end def price (1 + @commission) * @base_price end def off_road_ability result = @tire_width * TIRE_WIDTH_FACTOR end end class FrontSuspensionBikeSpec def initialize (tire_width: nil, front_fork_travel: nil) @tire_width = tire_width @front_fork_travel = front_fork_travel @commission = 0.25 @base_price = 490 @front_suspension_price = 95.0 end def off_road_ability result = @tire_width * TIRE_WIDTH_FACTOR result += @front_fork_travel * FRONT_SUSPENSION_FACTOR end def price (1 + @commission) * @base_price + @front_suspension_price end end class FullSuspensionBikeSpec def initialize @commission = 0.25 @base_price = 490 @front_suspension_price = 95.0 end def off_road_ability result = @tire_width * TIRE_WIDTH_FACTOR result += @front_fork_travel * FRONT_SUSPENSION_FACTOR result += @rear_fork_travel * REAR_SUSPENSION_FACTOR end def price (1 + @commission) * @base_price + @front_suspension_price + @rear_suspension_price end end class MountainBike def initialize(bike_spec, params) params.each { |key, value| instance_variable_set  @#{key} , value } @bike_spec = bike_spec end def off_road_ability @bike_spec.off_road_ability end def price @bike_spec.price end def owner @owner end def to_s  Mountain bike - owner: #{owner}, off road ability: #{off_road_ability()}, price: #{price}  end end # Test: Normally would be in a separate file require 'minitest/autorun' class TestMountainBike describe MountainBike do def setup @pitos_bike = MountainBike.new(RigidBikeSpec.new(tire_width: 2.5) , :owner =>  Pito , :type_code => :rigid, :tire_width => 2.5) @ricks_bike = MountainBike.new(FrontSuspensionBikeSpec.new(tire_width: 2.0, front_fork_travel: 3), :owner =>  Rick , :type_code => :front_suspension, :tire_width => 2, :front_fork_travel => 3) end it  knows price of pitos_bike  do @pitos_bike.price.must_equal 612.5 end it  knows offroad ability of pitos bike  do @pitos_bike.off_road_ability.must_equal 625.0 end it  knows price of ricks_bike  do @ricks_bike.price.must_equal 707.5 end it  knows offroad ability of ricks bike  do @ricks_bike.off_road_ability.must_equal 800 end end end", "tags": "", "loc": "/content/topics/scripts/mountain_bike_refactor4/" },

        {"title": "mountain_bike_refactor5", "text": "class BikeSpec TIRE_WIDTH_FACTOR = 250 FRONT_SUSPENSION_FACTOR = 100 REAR_SUSPENSION_FACTOR = 150 def initialize(tire_width: nil, front_fork_travel: nil) @commission = 0.25 @base_price = 490 @front_suspension_price = 95.0 @rear_suspension_price = 78.0 @tire_width = tire_width @front_fork_travel = front_fork_travel end end class RigidBikeSpec  Pito , :type_code => :rigid, :tire_width => 2.5) @ricks_bike = MountainBike.new(FrontSuspensionBikeSpec.new(tire_width: 2.0, front_fork_travel: 3), :owner =>  Rick , :type_code => :front_suspension, :tire_width => 2, :front_fork_travel => 3) end it  knows price of pitos_bike  do @pitos_bike.price.must_equal 612.5 end it  knows offroad ability of pitos bike  do @pitos_bike.off_road_ability.must_equal 625 end it  knows price of ricks_bike  do @ricks_bike.price.must_equal 707.5 end it  knows offroad ability of ricks bike  do @ricks_bike.off_road_ability.must_equal 800 end end end ", "tags": "", "loc": "/content/topics/scripts/mountain_bike_refactor5/" },

        {"title": "mountain_bike_refactor6", "text": "#### BikeSpecs: Described fixed characteristics of different kinds of Mountain Bikes class BikeSpec TIRE_WIDTH_FACTOR = 250 FRONT_SUSPENSION_FACTOR = 100 REAR_SUSPENSION_FACTOR = 150 def initialize(tire_width: nil, front_fork_travel: nil, owner: nil) @commission = 0.25 @base_price = 490 @front_suspension_price = 95.0 @rear_suspension_price = 78.0 @tire_width = tire_width @front_fork_travel = front_fork_travel @owner = owner end end class RigidBikeSpec ", "tags": "", "loc": "/content/topics/scripts/mountain_bike_refactor6/" },

        {"title": "tdd0_tut", "text": "def fact(n) if n == 1 1 else fact(n-1) * n end end if (fact(1) != 1) puts  Error when calling Factorial with 1  elsif fact(2) != 2 puts  Error when calling Factorial with 2  else puts  Factorial function works.  end ", "tags": "", "loc": "/content/topics/scripts/tdd0_tut/" },

        {"title": "tdd1_tut", "text": "require 'minitest/autorun' def fact(n) if n == 1 1 else fact(n-1) * n end end describe  factorials  do it  works for 1  do fact(1).must_equal 1 end it  works for 2  do fact(2).must_equal 2 end it  works for 20  do fact(20).must_equal 2432902008176640000 end it  works for zero  do fact(0).must_equal 0 end end ", "tags": "", "loc": "/content/topics/scripts/tdd1_tut/" },

        {"title": "tdd2_tut", "text": "require 'minitest/autorun' class PlayingCard attr_reader :rank, :suit def initialize suit:nil, rank:nil @suit = suit @rank = rank end def random @suit = [ hearts ,  spades ,  diamonds ,  clubs ].sample @rank = rand(13) self end def to_s card_to_english end def card_to_engish rank_to_english +   of   + @suit end def valid? @rank >= 1 && @rank 1 && @rank ", "tags": "", "loc": "/content/topics/scripts/tdd2_tut/" },

        {"title": "Hands On Heroku for Sinatra", "text": "Introduction Heroku is one of many  cloud app platform  (see Cloud Deployment Assumptions You have a working Sinatra application The code is in a PUBLIC github repository Note, you will need to make a few small changes to ready it for Heroku Setup Go to Heroku Create a new user account (free) Install the Heroku Toolbelt for your platform Prepare your rails app go to your local directory containing the rails app Get your environment set up go to your local directory containing the Heroku app The name of your app is assigned automatically and printed out once you do heroku create Prepare your application Configure it for rack: make sure you have a config.ru Create it on Heroku heroku create git push heroku master heroku run rake db:migrate heroku run rake db:seed heroku open ", "tags": "", "loc": "/content/topics/sinatra/hands_on_herokusinatra.md/" },

        {"title": "Hands-on with Sinatra Persistence", "text": "Database schema for an event schedule Person(name, dob, gender, zipcode) Event(name, date) Registrations(person_id, event_id, status, comment) Required/desired Gems $ gem install sinatra Basic directory structure demo_app/ config/ database.yml environments.rb db/ migrate/ . schema.rb models/ . views/ . Gemfile Rakefile config.ru demo_app.rb Config.ru # Config.ru configures the interface between  Rack  and Sinatra require './demo_app' run Sinatra::Application config/environments.rb # These Settings Establish the Proper Database Connection for Heroku Postgres # The environment variable DATABASE_URL should be in the following format: # => postgres://{user}:{password}@{host}:{port}/path # This is automatically configured on Heroku, you only need to worry if you also # want to run your app locally configure :production do puts  \[production environment\]  db = URI.parse(ENV\['DATABASE_URL'\] || 'postgres://localhost/mydb') ActiveRecord::Base.establish_connection( :adapter => db.scheme == 'postgres' ? 'postgresql' : db.scheme, :host => db.host, :username => db.user, :password => db.password, :database => db.path\[1..-1\], :encoding => 'utf8' ) end configure :development, :test do puts  \[develoment or test Environment\]  end Gemfile # Gemfile lists the gems and version numbers required for this app # Note: Always type  bundle  at command line after making a chance here source  https://rubygems.org  gem  sinatra  gem  activerecord  gem  sinatra-activerecord  gem 'sqlite3' gem  pg  gem 'pry-rails' gem 'pry-byebug' gem 'awesome_print' gem 'hirb' Rakefile # Rake defines developer  tasks  to automate various typical activities require './demo_app.rb' require 'sinatra/activerecord/rake' config/database.yml # Create mapping from server  environment  (development|test|production) to database development: adapter: sqlite3 database: db/development.sqlite3 test: adapter: sqlite3 database: db/test.sqlite3 demo_app.rb require 'sinatra' require 'sinatra/activerecord' require './config/environments' Migration files # 001_create_persons.rb class CreatePersons < ActiveRecord::Migration def change create_table :persons do |t| t.string :name t.date :dob t.string :gender t.integer :zipcode end end end # 002_create_events.rb class CreateEvents < ActiveRecord::Migration def change create_table :events do |t| t.string :name t.date :date end end end # 003_create_registrations.rb class CreateRegistrations < ActiveRecord::Migration def change create_table :registrations do |t| t.integer :person_id t.integer :event_id t.string :status t.string :comment end end end Models # models/event.rb class Event < ActiveRecord::Base end # models/person.rb class Person < ActiveRecord::Base end # models/registration.rb class Registration < ActiveRecord::Base end Examining the databases from the Debugger $ pry require './demo_app.rb' ActiveRecord::Base.connection.tables Person.all Person.where(gender: 'm') Person.where( dob > ? , Date.new(1995)) Person.where( dob > ? , Date.new(1995)).count CRUD operations (Create, Read, Update, Delete) p = Person.new(name:  Pito , dob: '12-12-2012', gender: 'f', zipcode: 12355) p.new_record? p.save p = Person.create(name:  Amin , dob: '12-12-2014', gender: 'm', zipcode: 31231) p.delete Associations, declared in models class Person < ActiveRecord::Base has_many :registrations has_many :events, through: :registrations end class Event < ActiveRecord::Base has_many :registrations has_many :people, through: :registrations end class Registration < ActiveRecord::Base belongs_to :person belongs_to :event end Association, used Person.find(1).registrations Person.where(name:  Angelo Smith ).first.registrations Event.find(1).people Validations Validations are applied by ActiveRecord, NOT the database validates :zipcode, length: { is: 5} # declared in model file p = Person.find(1) p.zipcode = 1 # assign invalid value p.valid? # explicit check p.save # Is not permitted into the database p.save! # Same but throws exception Appendices References ActiveRecord Associations ActiveRecord Queries ActiveRecord Queries Cribsheet ActiveRecord Validations Validations Cribsheet ", "tags": "", "loc": "/content/topics/sinatra/hands_on_sinatra_db_work.md/" },

        {"title": "Sinatra Service Hands On", "text": "Scenario A horoscope web service to allow apps (e.g. a calendar) to place a horoscope into their user interface It has no  user interface , that is no web site: Just a set of web services Reference: Designing with Class: Heroku, Sinatra, Postgress Web Service API GET /fortune/:date/:sign :date -> date for the fortune, e.g. mar-15-2015 :sign -> sign, e.g.  scorpio  Returns english language fortune Status 200 unless parameters are invalid Implementation A database of fortunes migrations seed data gem activerecord gem sinatra-activerecord  config  and  db  folders are not dictated by sinatra db: contains the migrations, seed and db data config: contains database config Sinatra notes Notice  modular  form of a sinatra app Notice use of  shotgun  to auto reload the sinatra app Notice the need for  config.ru  ", "tags": "", "loc": "/content/topics/sinatra/hands_on_sinatra_services.md/" },

        {"title": "Capybara", "text": "Capybara and friends Allows expected behavior in browser also to be tested Take a look at this: formdemo/test/integration/home_page_test.erb ", "tags": "", "loc": "/content/topics/testing/capybara.md/" },

        {"title": "Hands On Codeship", "text": "Introduction Codeship is one of a bunch of continuous integration services They all do a variant of this: Monitor your github repository Pull out the latest sources whenver there’s a change Run all the tests If they pass, then send the code to Heroku for deployment Codeship](https://codeship.com/) is the one I’ve used most often to good success. But don’t get hung up on that. New ones spring up and old ones die off. This hands on example assumes: You have a working rails application which has some working tests That it is on github in a PUBLIC repository It works well as a follow up to Hands On Tiny Rails Demo Hands On Go to codeship.com Log in with your github account Click on  Create a new Project  Select the github icon (with the cat) Select the specific name of the public github repo Within  select your technology to prepopulate  choose Ruby on Rails Click  save and go to dashboard  Get it to work Go to your repo (in your shell) Modify any file in the directory (readme is a good choice) git commit –all; git push -m  first test  Keep an eye on the browser window displaying the  dashboard  If the tests pass, you should see  SUCCESS  in green You now have a green build! Congratulations! What’s next You might now want to deploy your application to heroku Next in the process is Hands On Heroku for Rails ", "tags": "", "loc": "/content/topics/testing/hands_on_codeship.md/" },

        {"title": "Hands On Heroku for Rails", "text": "Introduction Heroku is one of many  cloud app platform  (see Cloud Deployment Assumptions You have a brand new rails application (such as shown in Hands On Tiny Rails Demo The code is in a PUBLIC github repository Setup Go to Heroku Create a new user account (free) Install the Heroku Toolbelt for your platform Prepare your rails app go to your local directory containing the rails app #more to come Get your environment set up go to your local directory containing the rails app the name of your app is assigned automatically and printed out once you do heroku create # Create the app on heroku heroku version heroku login heroku create ", "tags": "", "loc": "/content/topics/testing/hands_on_heroku.md/" },

        {"title": "Hands on Rails Test Demo", "text": "Set up rails new my_app cd my_app Add to gemfiles gem 'pry' gem 'pry-byebug' gem 'better_errors' gem 'minitest-spec-rails' Add and test a model rails generate model word eng:string ned:string rake db:migrate Default empty test (word_test.rb) require_relative '../test_helper' describe Word do it  succeeds in default test  do 1.must_equal 1 end end Add some more tests it  stores a translation  do word = Word.new(eng:  house , ned:  huis ) word.eng.must_equal  house  word.ned.must_equal  huis  end Add a few fixtures # Read about fixtures at http://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html house: eng: house ned: huis boat: eng: boat ned: boot And see if words model can be persisted it  has two words in database  do Word.count.must_equal 2 end it  can accept a new word  do Word.create(eng:  shoe , ned:  schoen ) Word.count.must_equal 3 end Add a validation to the model class Word < ActiveRecord::Base validates :eng, presence: true validates :ned, presence: true end Add a test for the validation it  cannot save a word without the english and dutch text  do w = Word.create(eng:  university ) w.valid?.must_equal false end Test the Word.random method it  Can return a random word  do w = Word.random w.must_be_kind_of Word end Implement the Word.random method def self.random offset = rand(Word.count) Word.offset(offset).first end Add and test a controller rails generate controller Words learn First write the test for the learn action require_relative '../test_helper' describe WordsController do it  handles learn action  do get :learn assigns('word').must_be_kind_of Word assert_response :success end end Now actually implement the action in the WordsController class WordsController < ApplicationController def learn @word = Word.new end end Now, lets test that the controller is calling the Word.random method it  passes a word from random  do target_word = Word.new(eng:  nose , ned:  neus ) Word.stub :random, target_word do get :learn assigns('word').must_equal target_word end end Stub creates a temporary override of the Word.random method And then verifies that it is being called,which it is now. We now need to update the controller to actually call Word.random ~~~ WordController calls Word.random class WordsController < ApplicationController def learn @word = Word.random end end References RoR Guide about testing BDD with Minitest Old Post on which my example above is based more or less Minitest Readme Minitest Quick Reference ", "tags": "", "loc": "/content/topics/testing/hands_on_rails_test.md/" },

        {"title": "Mocking", "text": "Mocking Overview SUT ( System under test ) Collaborators (other objects needed to test SUT) Decoupling is a major goal What is a Mock? An object that stands in for another object during testing Make sure that only the right methods are called Other terms: doubles, stubs, and others. Don’t get confused. Advantages Decoupling is always a good thing. Performance Maintainability Testability If you introduce a bug in a class Only the tests that are testing that class will fail So, fewer false positives Disadvantages Need to maintain to consistency between the mock and the class-being-mocked Otherwise you may be testing somethingn that doesn’t even exist Coding example: Doubles Demo Real world example: Let’s look at some of the code that runs this web site. Note slightly different syntax because of RSpec vs. minitest/spec citem_spec.rb toc_spec.rb ", "tags": "", "loc": "/content/topics/testing/mocking.md/" },

        {"title": "TDD demo", "text": "How you might unit test  by hand  NB: This example is using minitest/spec 1def fact(n) 2 if n == 1 3 1 4 else 5 fact(n-1) * n 6 end 7end 8 9if (fact(1) != 1) 10 puts  Error when calling Factorial with 1  11elsif fact(2) != 2 12 puts  Error when calling Factorial with 2  13else 14 puts  Factorial function works.  15end 16 17 18 19 How can you automate this with tools There are a huge variety of tools and techniques to avoid repetitious coding We will be using the built-in unit testing framework called  minitest  For this course focus ONLY on unit testing A Cosi101 Factorial Function using minitest 1require 'minitest/autorun' 2 3def fact(n) 4 if n == 1 5 1 6 else 7 fact(n-1) * n 8 end 9end 10 11describe  factorials  do 12 it  works for 1  do 13 fact(1).must_equal 1 14 end 15 16 it  works for 2  do 17 fact(2).must_equal 2 18 end 19 20 it  works for 20  do 21 fact(20).must_equal 2432902008176640000 22 end 23 24 it  works for zero  do 25 fact(0).must_equal 0 26 end 27end 28 Notes What other tests can we do to test this Factorial class? Testing a full ruby class 1require 'minitest/autorun' 2 3class PlayingCard 4 attr_reader :rank, :suit 5 def initialize suit:nil, rank:nil 6 @suit = suit 7 @rank = rank 8 end 9 10 def random 11 @suit = [ hearts ,  spades ,  diamonds ,  clubs ].sample 12 @rank = rand(13) 13 self 14 end 15 16 def to_s 17 card_to_english 18 end 19 20 def card_to_engish 21 rank_to_english +   of   + @suit 22 end 23 24 def valid? 25 @rank >= 1 && @rank <= 13 && !@suit.nil? 26 end 27 28 private 29 30 def rank_to_english 31 if @rank ==  1  32  Ace  33 elsif @rank > 1 && @rank < 11 34 number_to_english(@rank) 35 elsif @rank == 11 36  Jack  37 elsif @rank == 12 38  Queen  39 elsif @rank == 13 40  King  41 end 42 end 43 44 def number_to_english val 45 %w(fail0 fail1 two three four five six seven eight nine ten)[val] 46 end 47end 48 49describe PlayingCard do 50 before do 51 @a_card = PlayingCard.new.random 52 end 53 54 it  creates a valid card  do 55 @a_card.valid?.must_equal true 56 end 57 58end Notes What other tests can we do to test this PlayingCard class? ", "tags": "", "loc": "/content/topics/testing/tdd_demo.md/" },

        {"title": "Intro to Test Driven Development", "text": "There are different kinds of testing and why they are important Unit testing: test a small unit of code that has few side effects Integration testing: test a subsystem that has many components End-to-end testing: test the complete system from top to bottom Code Coverage: Seeing how much of your actual code is run during a test or production Performance testing: Checking the speed of your code and there are some other categories NB: Ruby community is especially focused on quality and testing ", "tags": "", "loc": "/content/topics/testing/tdd_intro.md/" },

        {"title": "Test Fixtures", "text": "Fixtures (and seeds) Intro Data or objects that exist exclusively for testing Sometimes known as test or seed data What is the role of data in developing tests for your application Where are they stored? in memory (i.e. objects and classes) on disk (i.e. files, images, …) in a database (i.e. records in a dbms) When are they created? At  build  time, i.e. putting files in the right directories or adding records to an empty database At  launch  time, i.e. when the app launches it creates the fixtures At  test run time , i.e just before the test needs them Tooling In rails, we have  seeds  and  fixtures  built in In sinatra, just seeds ", "tags": "", "loc": "/content/topics/testing/test_fixtures.md/" },

        {"title": "Conceptual Arguments for Testing", "text": "The Context Credit: Some of this is directly quoting POODR Testing and Agile Notion of a ‘release’ is gone Notion of a ‘spec’ is gone Cycles are much faster Automation becomes a requirement Testing and Design Insight (not shared by all) that TDD supports design Insist on looking at the class/module/unit first as a black box that delivers services Good design delays all decisions that can be delayed until further requirements are nailed down. Refactoring is how new requirements are incorporated Good test suites is what gives you the confidence to refactor Testing and Refactoring: Recall: Refactoring is a controlled technique for improving the design of an existing code base. Its essence is applying a series of small behavior-preserving transformations, each of which ‘too small to be worth doing’ So you always should have solid tests before you start refactoring Each small change is verified to not have changed behavior Good Testing/Quality/Testability Fundamental motivation for testing: reduce costs Writing tests should over the lifetime of the code cost less Otherwise it’s not worth doing How does it reduce costs? Breaking it down: Why Test? Finding bugs early Reducing errors Making assumptions explicit - documenting code with code [how do test do that?] Make refactoring possible and safe [how safe?] Driving design decisions (TDD?) Discover bad design decisions [how?] Philosophy of Commenting Believe or not, it’s controversial Comments should not duplicate what the code clearly says Of course,  clearly says  is in the eyes of the beholder One philosophy: If you feel the need to put in a block comment, extract that section into a method with an intention revealing name ", "tags": "", "loc": "/content/topics/testing/testing_concepts.md/" },

        {"title": "Evolution of Software Testing", "text": "Evolution of Software Testing - in brief The Original  Bug  found by Grace Hopper Industrial or Manufacturing model Quality Assurance: Make sure that the product we ship works as advertised Factory cranks parts, random sample is sent back to the lab and ‘tested’ Statistics used to deterime whether the quality was at the desired level Software Quality Assurance Realize that software was different Required a detailed functional spec Believed in an adverserial relationship between QA and Development team Written test plans Most testing was manual Automated Analysis as a Computer Science persuit Read code and detect the errors?  Executable  specifications Automatic measures of code complexity to predict location of errors Introduction of test automation Required some rearchitecture of the software Turned the ‘manual’ test plans into something that could be ‘executed’ Beginning of merging of QA with Dev We see that finding a bug early in cycle saves big bucks We see that software can be designed to be testable Titles startreflecting this  Quality Engineer  – QE not QA ‘Testing’ function is integrated into the development team Agile methodology Whole concept of shipping a product begins disappearing Rapid release cycles, even continuous delivery Holy grail is 100% automated testing. Manual testing disappears Agile’s emphasis on refactoring demands finer grained unit tests Present era Contunous testing, integration and testing The notion of a release or a version totally gone Feature switches allow individual features to be released and un-released Cloud computing means that deployment happens to faraway servers Further integration of  operations  into software development: Rise of Devops. Here’s a longer version: History of Software Testing ", "tags": "", "loc": "/content/topics/testing/testing_evol.md/" },

        {"title": "Testing Pyramid", "text": "Testing Pyramid Costs of testing Code to write Tests to run As the software (inevitably) evolves interfaces change The code changes in two places: implementation and test Sometimes more: test fixtures, database schemas Conclusion: More is not necessarily better Testing Pyramid From (fewest -> most) tests and brittleness User Interface tests … Integration tests … Unit Tests Test Everything? What not to test Try not to test the same thing in more than one place Try not to test a library which is itself well tests Try not to test something that is self-evidently trivial (eye of the beholder) What to test Try to test code which is prone to off-by-one errors Try to test code with intricate algorithms Try to test to verify assumption Natural ‘borders’ in the architecture If I check your passport (i.e. validate inputs) at the border Then it makes no sense to check it every time you enter a building As long as there are no unguarded borders :) About Brittle Tests When a change in design suddenly makes a large number of tests fail Sign that either your design or your test approach can be improved ", "tags": "", "loc": "/content/topics/testing/testing_pyramid.md/" },

        {"title": "Tips on Testing in Rails", "text": "Rails Testing Tips Don’t write tests to prove that rails has no bugs. They test that themselves Hands On Hands on Rails Test Demo ", "tags": "", "loc": "/content/topics/testing/testing_rails.md/" },

        {"title": "Testing Techniques", "text": "Testing Techniques Mocking Overview SUT ( System under test ) Collaborators (other objects needed to test SUT) Decoupling is a major goal What is a Mock? An object that stands in for another object during testing Make sure that only the right methods are called Other terms: doubles, stubs, and others. Don’t get confused. Advantages Decoupling is always a good thing. Performance Maintainability Testability If you introduce a bug in a class Only the tests that are testing that class will fail So, fewer false positives Disadvantages Need to maintain to consistency between the mock and the class-being-mocked Otherwise you may be testing somethingn that doesn’t even exist Coding example: Doubles Demo Real world example: Let’s look at some of the code that runs this web site. Note slightly different syntax because of RSpec vs. minitest/spec citem_spec.rb toc_spec.rb Fixtures (and seeds) Intro Data or objects that exist exclusively for testing Sometimes known as test or seed data What is the role of data in developing tests for your application Where are they stored? in memory (i.e. objects and classes) on disk (i.e. files, images, …) in a database (i.e. records in a dbms) When are they created? At  build  time, i.e. putting files in the right directories or adding records to an empty database At  launch  time, i.e. when the app launches it creates the fixtures At  test run time , i.e just before the test needs them Tooling In rails, we have  seeds  and  fixtures  built in In sinatra, just seeds Rails Testing Tips Don’t write tests to prove that rails has no bugs. They test that themselves Hands On Hands on Rails Test Demo ", "tags": "", "loc": "/content/topics/testing/testing_techniques.md/" },

        {"title": "Paper Prototyping", "text": "Paper Prototyping There are many media for doing this. See lots of examples of paper prototyping here An interesting article: Paper Prototyping Advantages Very cheap which saves money But also makes it less painful when it has to be changed totally Allows a user to take over and cross things out and suggest other ideas You can take this as far as you want. Smaller snippets for the various ui widgets (e.g. drop down menus) Make a  screen flow diagram  by connecting the different sheets of paper with lines showing the transitions It is similar to a movie ‘storyboard’ Here is my example: not good UI. Comments Why I insist on ‘paper prototyping’ How ugly can it be? Fast iteration Role of the UX Flow Chart ", "tags": "", "loc": "/content/topics/UI/paper_prototyping.md/" },

        {"title": "Personas", "text": "Personas * Used both in market segmentation and UX design * ‘Canonical’ users described by * what they do, * how they work, * where they are, what kinds of pains they are experienceing * What ‘jobs’ they want a product or service to do for them. ", "tags": "", "loc": "/content/topics/UI/personas.md/" },

        {"title": "Conducting a usability test", "text": "Usability Tests Don’t guess!  Get out of the buiidling ! It’s so much easier to grab one or two or more real humans Evidence from 2 or 3 random people is often enough, but really you don’t need for than 5-10.. Can be conducted at any stage Paper prototype Online mockup or ‘wireframes’ Actual build The difference is how hard/painful it is to make changes - which is inversely proportional to how open you will be listening This could be testing a paper prototype early, when it is easy to make big modifications, or later with actual software - when it’s more difficult to make changes Preparation Decide on a task(s) for user.  Log in and post a picture ,  Check and update your privacy settings  Decide on the type(s) of users. Decide on what knowledge or assumptions they will start with (new user, experienced user, musician, programmer, etc.) Rules of thumb to follow Try to get the ‘victim’ to narrate their thought process Make sure they know that if they are confused, it is the fault of the software, not their fault If and when they get stuck, engage them in a conversation by giving them small hints Ask them for a suggestion on how it would be clearer, for example:  Let’s say you want a plain pizza and you see this screen, what would you do?   Oh you can’t decide, well tell me, what are you looking for right now on the screen?  Running the test Mistakes are ALWAYS the fault of the software not the user. Make sure they know this and don’t feel like they have to appologize when things go wrong. Don’t help. Ask them to narrate their thought process:  I am not looking for a button called security or privacy. Oh here’s one called settings, maybe that’s it. I am going to click it. Hm, I expected to find security related stuff here but instead I see…  etc. Make notes Keep it simple You don’t need a one way mirror, video recording etc etc. You don’t need 10 subjects. Usually after 2-3 you already know what the problems are ACT ON WHAT YOU LEARN! ", "tags": "", "loc": "/content/topics/UI/usability_test.md/" },

        {"title": "User Stories", "text": "User Stories Start a list (Trello, Google Sheet etc.) Each story is a minimal  feature  or  scenario  or  use case  We will give you feedback on the wording Keep the list in priority order Not unusual to have 50-100 stories You will not implement all of them Examples from P2PTours  App can be used without an account   Users without account can search for tourguides   User can request an account by supplying email and password   User receives email with link to confirm account   Registered user can request to be accepted as a tour guide   Request for tour guide is accompanied by a cell phone number   There is a web based administrative console   Requests for tour guide status appear in a queue on the admin console   Admin console requires a login to access  etc. Discussion: Lets brainstorm user stories for each of the term projects ", "tags": "", "loc": "/content/topics/UI/user_stories.md/" },

        {"title": "User Experience Basics", "text": "Examples of User Experience ‹ › Discussion: In each case, can you tell how to operate this device? And while you are trying to answer the question, be introspective, and tell me your thought process. How are you trying to find the problem, if any? [Pito’s] Rules of thumb for good User Experience Pay attention to AFFORDANCES I want to make you become aware of affordances all around you Visual (or other clues) that something can be pushed, pulled, dragged, clicked, etc. Without them user is lost Know the answer to the question: WHO IS MY USER?  Personas . Note, often there is more than one. Build on what users likely have seen before Platform consistency (iPhone, Android … but then compare with Flash. Is that a platform? How about web?) Conventions: back, home, undo, cut, paste, file menu, etc. Guide the USERS’ CONCEPTUAL MODEL (sometimes called the user metaphor) Some links: This article talks about one kind of metaphor. I mean something broader. This article has some more relevant examples. This article has some interesting examples of misunderstood and obsolete metaphors What this application or feature is about - that sets expectations? What the USER (see above) is ‘expecting’ right now? What is she ‘reaching for’ right now? Remember the importance of WORDS that match this metaphor and user expectations Metaphors can become dated and inappropriate (file save icon in MS Word is what?) Any examples? PROXIMITY Implies RELATIONSHIP Put things that relate to each other near each other and vice versa Pay attention to the Visual Hierarchy Denote hierarchy/nesting of elements: posts->comments, projects->tasks, playlists->tracks, etc. Use size (and type choice) consistently to communicate importance/role Alignment and balance are important for aesthetics Don’t user spend ANY mental energy on questions like this (see book by Steve Krug) Where am I? Where should I begin? Where did they put it? What are the most important things on this screen? Think about DISCOVERABILITY MOBILE is NOT DIFFERENT, but… Assume mobile user is distracted, brief attention span Does NOT think of device as a computer Context: What is users mindset? Where are they, in a car, in line at store, at the theatre? Screen is far smaller  Mobile First  Dealing with COMPLEXITY  Simple things should be simple to do, complex things should be possible  Principle of progressive disclosure. What controls are only available at the back panel of the device, under a little door? We all know that users don’t read manuals, right? ", "tags": "", "loc": "/content/topics/UI/ux_basics.md/" },

        {"title": "User Experience Flows", "text": " Article: How to create a UX flow chart NB: Read the article for the concept, no need to mimic the appearance precisely. A UX Flow is a simple extension of Paper Prototyping Instead of individual paper prototypes of individual page, we zoom out and view the product with a broader perspective Each page is connected to one or more other with an arrow labeled with the that gesture, event or command, gets the user from one to the other (e.g.  user clicks ‘resend password link’  or  email was successfully sent ) You need to be meticulous and try and cover all the cases BEFORE you start coding. Neatness is not as important as careful thinking about how the user will experience the product ", "tags": "", "loc": "/content/topics/UI/ux_flows.md/" },

        {"title": "UI/UX Cool Tools", "text": "Some cool tools There are lots of these. I am not saying these are the best. But don’t reinvent the wheel. Look around first! Usability Hub Paper Prototyping Helper Kit Feedback Army UI Patterns Site Free Placeholder Images Android UI Patterns ", "tags": "", "loc": "/content/topics/UI/ux_tools.md/" },

        {"title": "Leveraging Web Services", "text": "Leveraging Web Services There are many many different kinds of services that deliver their info over a web service. Use google and Programmable Web has thousands of APIs you can use You might have to call a service directly (using HTTP) You might find a gem to provide a nicer, limited, ruby apii to the service You might elect to build your own gem Good design practice to isolate details of the web service from the rest of the code Security, Authentication, Money Several reasons why a service might need authentication They want to charge for it They want to force you to register with them so they know who you are They simply want to put in a speedbump Most typicall technique You register on their site (manually) and they give you api token of some kind (a random string) Every call to the service includes a mandatory paramter Case study Problem: Need to get an assortment of information about stocks: price quotes, historical info, and so on. Steps to solve the problem Locate an appropriate web service, with google and progammable web site Investigate whether there is an API, is it REST, is it free or does it cost, do they have the data I want A bunch of googling led me to two candidates: Yahoo Stocks Api and Markit On Demand Experiment to see if they do what I need. See Github Web Service Demo Build a class or set of classes to encapsulate the API calls. Consider isolation from web service , error handling, caching of common results. Key Gems to make your life good: typhoeusXmlSimple Delivering Web Services Providing a Web API from your server Often nice to provide sample code and a ‘binding’ to a language Need to decide on the url (REST!) Latest thinking is that you should not base it on your underlying relational database structure. In other words, to get title of course 3’s lecture 4 Don’t specify: http://teachback/api/course/3/lecture/4/title Do specify: http://teachback/api/course_info?code=COSI-234 -> xml structure with info about that course. Case Study Goal: Your server needs to respond to HTTP GET for this url: http://teachback/api/course_info?code=COSI-234 Controller: api Action: course_info Parameter: code=COSI-234 Let’s take a look at the code in Github Web Service Demo Try this url: http://0.0.0.0:3000/api/course_info.xml?course=aaa ", "tags": "", "loc": "/content/topics/webservices/leveraging_web_services.md/" },

        {"title": "Designing REST API", "text": "Foursquare App What happens when new user runs the app existing user launches it new user visits the web page when a merchant logs into the web site #### NEST Thermostat What happens when A new thermostat is installed for the first time? A thermostat runs day to day A user changes the temperature on the thermostat A user runs the NEST app ", "tags": "", "loc": "/content/topics/webservices/rest_protocol_design.md/" },

        {"title": "REST and Web Services", "text": "SOA and REST and Services What is a web service? Consider this web page: Olin College Engineering Courses What would  TeachBack  do if it wanted to have a list of courses pre-populated with a college’s courses? Grab all the text curl http://wikis.olin.edu/coursecatalog/doku.php?id=course_listings:engr > olincourses.txt Write a program to parse that page and then load the results into a database. This is called  scraping  and usually that would violate a copyright Server can also deliver information in  machine readable  formats (such as JSON or XML) The term  API  is used to describe the permissable ways that one program can call another, such as a library Web Service API is when this is between servers on the internet Protocols This can be done with many different standards and formats and protocols SOAP: Simple Object Access Protocol XMLRPC: XML-RPC REST: Representational State Transfer – our focus Discussion: What are some of the big differences between calling a gem’s API and calling a web service API?. Performance? Error handling and recovery? Security? Cost sharing? Pause to look at the big picture Servers on the internet, anywhere, can be called as objects and methods Resources of all kinds can be offered to clients with no coordination The internet becomes a huge, amazing Operating System One level deeper RPC - Remote Procedure Calls Imagine a procedure (method): get_horoscope(date, sign) => String, so for example: get_horoscope( march 22, 2015 ,  aries ) which returns a sentence of text (not html!) I could use it to improve my calendar app to optionally display the user’s horoscope Or, I could use it to create a twitter  robot  to answer a tweet with my horosc What would it mean to call it between two computers? What would it mean to call it between two computers over the internet? How would you approach it? REST - A different way to think about RPC REST based on HTTP: Mini review HTTP Verbs: GET (HEAD), PUT, POST, DELETE. Think of everything in terms of a ‘resource’ that is being manipulated For example, GET means get a representation of the resource marked, e.g. GET http://www.facebook.com/user/pitosalas GET http://www.facebok.com/users GET 0.0.0.0:3000/cards/1.xml Some things are harder to fit with the model What might a horoscope service look like as REST? The ‘resource’ here is a single fortune http://myhoroscope.org/fortunes/1 http://myhoroscope.org/fortunes http://myhoroscope.org/fortunes?date=mar-15-2025,sign=scorpio http://myhoroscope.org/fortunes/random Note fortunes/random, random is not exactly identifying a resource; but close enough. What if caching was done strictly by url? Two advantages: some rhyme or reason on how to build urls and make logical use of url space Different ‘representations’ possible: html and xml, but others too, say csv or video Big one: Standards allow caching in the cloud. But what about ‘random’ case? TTL! ", "tags": "", "loc": "/content/topics/webservices/rest_web_services.md/" },

]};