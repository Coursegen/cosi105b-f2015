#!/usr/bin/env ruby

<<<<<<< HEAD
# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

=======
>>>>>>> 1d25ed31a25b829346f1b3a2e6fd90f0b7c9dd6b
require './cg_config.rb'

preprocess do
  Toc.instance.prepare @items, SECTION_CONFIG
end

<<<<<<< HEAD
compile '/bootstrap/*' do
  nil
end

compile '/content/scripts/*' do
  nil
end

compile '/chalkmark/*' do
  nil
end

compile '/tipuesearch/*' do
  nil
end

compile "/tipuesearch_logic/tipuesearch_content" do
  filter :erb
end

compile '*' do
=======
compile '/bootstrap/**/*' do
  nil
end

compile '/content/scripts/**/*' do
  nil
end

compile '/chalkmark/**/*' do
  nil
end

compile '/tipuesearch/**/*' do
  nil
end

compile "/tipuesearch_logic/tipuesearch_content.*" do
  filter :erb
end

compile '/**/*' do
>>>>>>> 1d25ed31a25b829346f1b3a2e6fd90f0b7c9dd6b
  if item.binary? || item[:status] == "hidden"
    nil
  elsif item[:status] == "hidden"
    nil
  elsif item[:type] == "subsection"
<<<<<<< HEAD
    nil    
  elsif item[:extension] == "haml"
    filter :haml;
    layout 'course'
=======
    nil
  elsif item[:extension] == "haml"
    filter :haml;
    layout '/course.*'
>>>>>>> 1d25ed31a25b829346f1b3a2e6fd90f0b7c9dd6b
  else
    item[:extension].split('.').reverse.each do
      |f|
      case f
      when 'md', 'markdown'
        filter :kramdown, coderay_tab_width: 3
      when 'erb'
        filter :erb
      end
    end
<<<<<<< HEAD
    layout 'course'
  end
end

route '/bootstrap/*' do
  @item.identifier.chop + '.' + @item[:extension]
end

route '/tipuesearch/*' do
  @item.identifier.chop + '.' + @item[:extension]
end

route "/tipuesearch_logic/tipuesearch_content/" do
=======
    layout '/course.*'
  end
end

route '/bootstrap/**/*' do
  @item.identifier.to_s
end

route '/tipuesearch/**/*' do
  @item.identifier.to_s
end

route "/tipuesearch_logic/tipuesearch_content.*" do
>>>>>>> 1d25ed31a25b829346f1b3a2e6fd90f0b7c9dd6b
  '/tipuesearch/tipuesearch_content.js'
end


<<<<<<< HEAD
route '/chalkmark/*' do
  @item.identifier.chop + '.' + @item[:extension]
end

route '/content/' do
  '/index.html'
end

route '*' do
=======
route '/chalkmark/**/*' do
  @item.identifier.to_s
end

route '/content/*' do
  '/index.html'
end

route '/**/*' do
>>>>>>> 1d25ed31a25b829346f1b3a2e6fd90f0b7c9dd6b
  if item[:extension].nil?
    raise RuntimeError, "Missing required extension: \".#{item.identifier}\""
  elsif item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension] rescue fail "in route * in Rules"
  elsif item.identifier == "/search_logic/tipuesearch_content/"
      item.identifier.chop + '.' + item[:extension] rescue fail "in route * in Rules"
  elsif item[:status] == "hidden"
    nil
  elsif item[:type] == "subsection"
    nil
  elsif item[:extension] != "css"
<<<<<<< HEAD
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb

=======
    item.identifier.without_ext + '/index.html'

  end
end

layout '/**/*', :erb
>>>>>>> 1d25ed31a25b829346f1b3a2e6fd90f0b7c9dd6b
